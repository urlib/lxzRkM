<!DOCTYPE html><html><head><meta charset="utf-8"><title>Paymark Click APIs</title><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"><style>@import url('https://fonts.googleapis.com/css?family=Roboto:400,700|Inconsolata|Raleway:200');.hljs-comment,.hljs-title{color:#8e908c}.hljs-variable,.hljs-attribute,.hljs-tag,.hljs-regexp,.ruby .hljs-constant,.xml .hljs-tag .hljs-title,.xml .hljs-pi,.xml .hljs-doctype,.html .hljs-doctype,.css .hljs-id,.css .hljs-class,.css .hljs-pseudo{color:#c82829}.hljs-number,.hljs-preprocessor,.hljs-pragma,.hljs-built_in,.hljs-literal,.hljs-params,.hljs-constant{color:#f5871f}.ruby .hljs-class .hljs-title,.css .hljs-rules .hljs-attribute{color:#eab700}.hljs-string,.hljs-value,.hljs-inheritance,.hljs-header,.ruby .hljs-symbol,.xml .hljs-cdata{color:#718c00}.css .hljs-hexcolor{color:#3e999f}.hljs-function,.python .hljs-decorator,.python .hljs-title,.ruby .hljs-function .hljs-title,.ruby .hljs-title .hljs-keyword,.perl .hljs-sub,.javascript .hljs-title,.coffeescript .hljs-title{color:#4271ae}.hljs-keyword,.javascript .hljs-function{color:#8959a8}.hljs{display:block;background:white;color:#4d4d4c;padding:.5em}.coffeescript .javascript,.javascript .xml,.tex .hljs-formula,.xml .javascript,.xml .vbscript,.xml .css,.xml .hljs-cdata{opacity:.5}.right .hljs-comment{color:#969896}.right .css .hljs-class,.right .css .hljs-id,.right .css .hljs-pseudo,.right .hljs-attribute,.right .hljs-regexp,.right .hljs-tag,.right .hljs-variable,.right .html .hljs-doctype,.right .ruby .hljs-constant,.right .xml .hljs-doctype,.right .xml .hljs-pi,.right .xml .hljs-tag .hljs-title{color:#c66}.right .hljs-built_in,.right .hljs-constant,.right .hljs-literal,.right .hljs-number,.right .hljs-params,.right .hljs-pragma,.right .hljs-preprocessor{color:#de935f}.right .css .hljs-rule .hljs-attribute,.right .ruby .hljs-class .hljs-title{color:#f0c674}.right .hljs-header,.right .hljs-inheritance,.right .hljs-name,.right .hljs-string,.right .hljs-value,.right .ruby .hljs-symbol,.right .xml .hljs-cdata{color:#b5bd68}.right .css .hljs-hexcolor,.right .hljs-title{color:#8abeb7}.right .coffeescript .hljs-title,.right .hljs-function,.right .javascript .hljs-title,.right .perl .hljs-sub,.right .python .hljs-decorator,.right .python .hljs-title,.right .ruby .hljs-function .hljs-title,.right .ruby .hljs-title .hljs-keyword{color:#81a2be}.right .hljs-keyword,.right .javascript .hljs-function{color:#b294bb}.right .hljs{display:block;overflow-x:auto;background:#1d1f21;color:#c5c8c6;padding:.5em;-webkit-text-size-adjust:none}.right .coffeescript .javascript,.right .javascript .xml,.right .tex .hljs-formula,.right .xml .css,.right .xml .hljs-cdata,.right .xml .javascript,.right .xml .vbscript{opacity:.5}body{color:black;background:white;font:400 14px / 1.42 'Roboto',Helvetica,sans-serif}header{border-bottom:1px solid #f2f2f2;margin-bottom:12px}h1,h2,h3,h4,h5{color:black;margin:12px 0}h1 .permalink,h2 .permalink,h3 .permalink,h4 .permalink,h5 .permalink{margin-left:0;opacity:0;transition:opacity .25s ease}h1:hover .permalink,h2:hover .permalink,h3:hover .permalink,h4:hover .permalink,h5:hover .permalink{opacity:1}.triple h1 .permalink,.triple h2 .permalink,.triple h3 .permalink,.triple h4 .permalink,.triple h5 .permalink{opacity:.15}.triple h1:hover .permalink,.triple h2:hover .permalink,.triple h3:hover .permalink,.triple h4:hover .permalink,.triple h5:hover .permalink{opacity:.15}h1{font:200 36px 'Raleway',Helvetica,sans-serif;font-size:36px}h2{font:200 36px 'Raleway',Helvetica,sans-serif;font-size:30px}h3{font-size:100%;text-transform:uppercase}h5{font-size:100%;font-weight:normal}p{margin:0 0 10px}p.choices{line-height:1.6}a{color:#428bca;text-decoration:none}li p{margin:0}hr.split{border:0;height:1px;width:100%;padding-left:6px;margin:12px auto;background-image:linear-gradient(to right, rgba(0,0,0,0) 20%, rgba(0,0,0,0.2) 51.4%, rgba(255,255,255,0.2) 51.4%, rgba(255,255,255,0) 80%)}dl dt{float:left;width:130px;clear:left;text-align:right;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-weight:700}dl dd{margin-left:150px}blockquote{color:rgba(0,0,0,0.5);font-size:15.5px;padding:10px 20px;margin:12px 0;border-left:5px solid #e8e8e8}blockquote p:last-child{margin-bottom:0}pre{background-color:#f5f5f5;padding:12px;border:1px solid #cfcfcf;border-radius:6px;overflow:auto}pre code{color:black;background-color:transparent;padding:0;border:none}code{color:#444;background-color:#f5f5f5;font:'Inconsolata',monospace;padding:1px 4px;border:1px solid #cfcfcf;border-radius:3px}ul,ol{padding-left:2em}table{border-collapse:collapse;border-spacing:0;margin-bottom:12px}table tr:nth-child(2n){background-color:#fafafa}table th,table td{padding:6px 12px;border:1px solid #e6e6e6}.text-muted{opacity:.5}.note,.warning{padding:.3em 1em;margin:1em 0;border-radius:2px;font-size:90%}.note h1,.warning h1,.note h2,.warning h2,.note h3,.warning h3,.note h4,.warning h4,.note h5,.warning h5,.note h6,.warning h6{font-family:200 36px 'Raleway',Helvetica,sans-serif;font-size:135%;font-weight:500}.note p,.warning p{margin:.5em 0}.note{color:black;background-color:#f0f6fb;border-left:4px solid #428bca}.note h1,.note h2,.note h3,.note h4,.note h5,.note h6{color:#428bca}.warning{color:black;background-color:#fbf1f0;border-left:4px solid #c9302c}.warning h1,.warning h2,.warning h3,.warning h4,.warning h5,.warning h6{color:#c9302c}header{margin-top:24px}nav{position:fixed;top:24px;bottom:0;overflow-y:auto}nav .resource-group{padding:0}nav .resource-group .heading{position:relative}nav .resource-group .heading .chevron{position:absolute;top:12px;right:12px;opacity:.5}nav .resource-group .heading a{display:block;color:black;opacity:.7;border-left:2px solid transparent;margin:0}nav .resource-group .heading a:hover{text-decoration:none;background-color:bad-color;border-left:2px solid black}nav ul{list-style-type:none;padding-left:0}nav ul a{display:block;font-size:13px;color:rgba(0,0,0,0.7);padding:8px 12px;border-top:1px solid #d9d9d9;border-left:2px solid transparent;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}nav ul a:hover{text-decoration:none;background-color:bad-color;border-left:2px solid black}nav ul>li{margin:0}nav ul>li:first-child{margin-top:-12px}nav ul>li:last-child{margin-bottom:-12px}nav ul ul a{padding-left:24px}nav ul ul li{margin:0}nav ul ul li:first-child{margin-top:0}nav ul ul li:last-child{margin-bottom:0}nav>div>div>ul>li:first-child>a{border-top:none}.preload *{transition:none !important}.pull-left{float:left}.pull-right{float:right}.badge{display:inline-block;float:right;min-width:10px;min-height:14px;padding:3px 7px;font-size:12px;color:#000;background-color:#f2f2f2;border-radius:10px;margin:-2px 0}.badge.get{color:#70bbe1;background-color:#d9edf7}.badge.head{color:#70bbe1;background-color:#d9edf7}.badge.options{color:#70bbe1;background-color:#d9edf7}.badge.put{color:#f0db70;background-color:#fcf8e3}.badge.patch{color:#f0db70;background-color:#fcf8e3}.badge.post{color:#93cd7c;background-color:#dff0d8}.badge.delete{color:#ce8383;background-color:#f2dede}.collapse-button{float:right}.collapse-button .close{display:none;color:#428bca;cursor:pointer}.collapse-button .open{color:#428bca;cursor:pointer}.collapse-button.show .close{display:inline}.collapse-button.show .open{display:none}.collapse-content{max-height:0;overflow:hidden;transition:max-height .3s ease-in-out}nav{width:220px}.container{max-width:940px;margin-left:auto;margin-right:auto}.container .row .content{margin-left:244px;width:696px}.container .row:after{content:'';display:block;clear:both}.container-fluid nav{width:22%}.container-fluid .row .content{margin-left:24%}.container-fluid.triple nav{width:16.5%;padding-right:1px}.container-fluid.triple .row .content{position:relative;margin-left:16.5%;padding-left:24px}.middle:before,.middle:after{content:'';display:table}.middle:after{clear:both}.middle{box-sizing:border-box;width:51.5%;padding-right:12px}.right{box-sizing:border-box;float:right;width:48.5%;padding-left:12px}.right a{color:#428bca}.right h1,.right h2,.right h3,.right h4,.right h5,.right p,.right div{color:white}.right pre{background-color:#1d1f21;border:1px solid #1d1f21}.right pre code{color:#c5c8c6}.right .description{margin-top:12px}.triple .resource-heading{font-size:125%}.definition{margin-top:12px;margin-bottom:12px}.definition .method{font-weight:bold}.definition .method.get{color:#2e8ab8}.definition .method.head{color:#2e8ab8}.definition .method.options{color:#2e8ab8}.definition .method.post{color:#56b82e}.definition .method.put{color:#b8a22e}.definition .method.patch{color:#b8a22e}.definition .method.delete{color:#b82e2e}.definition .uri{word-break:break-all;word-wrap:break-word}.definition .hostname{opacity:.5}.example-names{background-color:#eee;padding:12px;border-radius:6px}.example-names .tab-button{cursor:pointer;color:black;border:1px solid #ddd;padding:6px;margin-left:12px}.example-names .tab-button.active{background-color:#d5d5d5}.right .example-names{background-color:#444}.right .example-names .tab-button{color:white;border:1px solid #666;border-radius:6px}.right .example-names .tab-button.active{background-color:#5e5e5e}#nav-background{position:fixed;left:0;top:0;bottom:0;width:16.5%;padding-right:14.4px;background-color:#fbfbfb;border-right:1px solid #f0f0f0;z-index:-1}#right-panel-background{position:absolute;right:-12px;top:-12px;bottom:-12px;width:48.6%;background-color:#333;z-index:-1}@media (max-width:1200px){nav{width:198px}.container{max-width:840px}.container .row .content{margin-left:224px;width:606px}}@media (max-width:992px){nav{width:169.4px}.container{max-width:720px}.container .row .content{margin-left:194px;width:526px}}@media (max-width:768px){nav{display:none}.container{width:95%;max-width:none}.container .row .content,.container-fluid .row .content,.container-fluid.triple .row .content{margin-left:auto;margin-right:auto;width:95%}#nav-background{display:none}#right-panel-background{width:48.6%}}.back-to-top{position:fixed;z-index:1;bottom:0;right:24px;padding:4px 8px;color:rgba(0,0,0,0.5);background-color:#f2f2f2;text-decoration:none !important;border-top:1px solid #d9d9d9;border-left:1px solid #d9d9d9;border-right:1px solid #d9d9d9;border-top-left-radius:3px;border-top-right-radius:3px}.resource-group{padding:12px;margin-bottom:12px;background-color:white;border:1px solid #d9d9d9;border-radius:6px}.resource-group h2.group-heading,.resource-group .heading a{padding:12px;margin:-12px -12px 12px -12px;background-color:#f2f2f2;border-bottom:1px solid #d9d9d9;border-top-left-radius:6px;border-top-right-radius:6px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.triple .content .resource-group{padding:0;border:none}.triple .content .resource-group h2.group-heading,.triple .content .resource-group .heading a{margin:0 0 12px 0;border:1px solid #d9d9d9}nav .resource-group .heading a{padding:12px;margin-bottom:0}nav .resource-group .collapse-content{padding:0}.action{margin-bottom:12px;padding:12px 12px 0 12px;overflow:hidden;border:1px solid transparent;border-radius:6px}.action h4.action-heading{padding:6px 12px;margin:-12px -12px 12px -12px;border-bottom:1px solid transparent;border-top-left-radius:6px;border-top-right-radius:6px;overflow:hidden}.action h4.action-heading .name{float:right;font-weight:normal;padding:6px 0}.action h4.action-heading .method{padding:6px 12px;margin-right:12px;border-radius:3px;display:inline-block}.action h4.action-heading .method.get{color:#fff;background-color:#337ab7}.action h4.action-heading .method.head{color:#fff;background-color:#337ab7}.action h4.action-heading .method.options{color:#fff;background-color:#337ab7}.action h4.action-heading .method.put{color:#fff;background-color:#ed9c28}.action h4.action-heading .method.patch{color:#fff;background-color:#ed9c28}.action h4.action-heading .method.post{color:#fff;background-color:#5cb85c}.action h4.action-heading .method.delete{color:#fff;background-color:#d9534f}.action h4.action-heading code{color:#444;background-color:#f5f5f5;border-color:#cfcfcf;font-weight:normal;word-break:break-all;display:inline-block;margin-top:2px}.action dl.inner{padding-bottom:2px}.action .title{border-bottom:1px solid white;margin:0 -12px -1px -12px;padding:12px}.action.get{border-color:#bce8f1}.action.get h4.action-heading{color:#337ab7;background:#d9edf7;border-bottom-color:#bce8f1}.action.head{border-color:#bce8f1}.action.head h4.action-heading{color:#337ab7;background:#d9edf7;border-bottom-color:#bce8f1}.action.options{border-color:#bce8f1}.action.options h4.action-heading{color:#337ab7;background:#d9edf7;border-bottom-color:#bce8f1}.action.post{border-color:#d6e9c6}.action.post h4.action-heading{color:#5cb85c;background:#dff0d8;border-bottom-color:#d6e9c6}.action.put{border-color:#faebcc}.action.put h4.action-heading{color:#ed9c28;background:#fcf8e3;border-bottom-color:#faebcc}.action.patch{border-color:#faebcc}.action.patch h4.action-heading{color:#ed9c28;background:#fcf8e3;border-bottom-color:#faebcc}.action.delete{border-color:#ebccd1}.action.delete h4.action-heading{color:#d9534f;background:#f2dede;border-bottom-color:#ebccd1}</style></head><body class="preload"><a href="#top" class="text-muted back-to-top"><i class="fa fa-toggle-up"></i>&nbsp;Back to top</a><div class="container"><div class="row"><nav><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#top">Overview</a></div><div class="collapse-content"><ul><li><a href="#header-introduction">Introduction</a></li><li><a href="#header-end-points">End Points</a></li><li><a href="#header-http-headers">HTTP Headers</a></li><li><a href="#header-authentication">Authentication</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#web-payments">Web Payments</a></div><div class="collapse-content"><ul><li><a href="#header-getting-started">Getting Started</a></li><li><a href="#header-how-web-payments-works">How Web Payments Works</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#paymark-hosted-standard-payment">Paymark Hosted Standard Payment</a></div><div class="collapse-content"><ul><li><a href="#header-overview">Overview</a></li><li><a href="#header-two-return-options">Two Return Options</a></li><li><a href="#header-css-customisation-for-hosted-web-payment-page">CSS customisation for Hosted Web Payment Page</a></li><li><a href="#header-standard-payment-request-data">Standard Payment Request Data</a></li><li><a href="#header-standard-payment-request-result">Standard Payment Request Result</a></li><li><a href="#header-output-fields-for-post-to-return-url-return-option">Output Fields for Post to Return URL Return Option</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#direct-post">Direct Post</a></div><div class="collapse-content"><ul><li><a href="#header-overview-1">Overview</a></li><li><a href="#header-transaction-flow">Transaction Flow</a></li><li><a href="#header-direct-post-request-data">Direct Post Request Data</a></li><li><a href="#header-direct-post-request-result">Direct Post Request Result</a></li><li><a href="#header-post-payment-details">Post Payment Details</a></li><li><a href="#header-validating-transaction-result-by-result_id">Validating Transaction Result By Result_ID</a></li><li><a href="#header-validate-transaction-request-result">Validate Transaction Request Result</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#merchant-hosted-transaction-processing">Merchant Hosted Transaction Processing</a></div><div class="collapse-content"><ul><li><a href="#header-overview-2">Overview</a></li><li><a href="#header-method-options">Method Options</a></li><li><a href="#header-purchase-with-card-details">Purchase with Card Details</a></li><li><a href="#header-authorisation-with-card-details">Authorisation with Card Details</a></li><li><a href="#header-status-check-with-card-details">Status Check with Card Details</a></li><li><a href="#header-store-card-details-without-issuer-validation">Store Card Details without Issuer Validation</a></li><li><a href="#header-online-eftpos-payment">Online EFTPOS Payment</a></li><li><a href="#header-outputs">Outputs</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#three-domain-secure">Three Domain Secure</a></div><div class="collapse-content"><ul><li><a href="#header-overview-3">Overview</a></li><li><a href="#header-enabling-3ds">Enabling 3DS</a></li><li><a href="#header-3ds-with-standard-payment-integration">3DS with Standard Payment Integration</a></li><li><a href="#header-3ds-with-direct-post-integration">3DS with Direct Post Integration</a></li><li><a href="#header-3ds-with-merchant-hosted-integration">3DS with Merchant Hosted Integration</a></li><li><a href="#header-possible-errors-and-3ds-details">Possible Errors and 3DS Details</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#retrieve-transaction">Retrieve Transaction</a></div><div class="collapse-content"><ul><li><a href="#header-overview-4">Overview</a></li><li><a href="#header-method-options-1">Method Options</a></li><li><a href="#header-retrieve-transaction-by-transaction-id">Retrieve Transaction by Transaction ID</a></li><li><a href="#header-search-for-transactions">Search for Transactions</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#capture-transaction">Capture Transaction</a></div><div class="collapse-content"><ul><li><a href="#header-overview-5">Overview</a></li><li><a href="#header-capture-transaction-1">Capture Transaction</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#cancellation-transaction">Cancellation Transaction</a></div><div class="collapse-content"><ul><li><a href="#header-overview-6">Overview</a></li><li><a href="#header-cancellation-transaction-1">Cancellation Transaction</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#refund-transaction">Refund Transaction</a></div><div class="collapse-content"><ul><li><a href="#header-overview-7">Overview</a></li><li><a href="#header-refund-transaction-1">Refund Transaction</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#payment-token-transaction-processing">Payment Token Transaction Processing</a></div><div class="collapse-content"><ul><li><a href="#header-overview-8">Overview</a></li><li><a href="#header-method-options-2">Method Options</a></li><li><a href="#header-purchase-with-payment-(or-card)-token">Purchase with Payment (or Card) Token</a></li><li><a href="#header-authorisation-with-payment-(or-card)-token">Authorisation with Payment (or Card) Token</a></li><li><a href="#header-outputs-1">Outputs</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#manage-payment-and-card-tokens">Manage Payment and Card Tokens</a></div><div class="collapse-content"><ul><li><a href="#header-overview-9">Overview</a></li><li><a href="#header-method-options-3">Method Options</a></li><li><a href="#header-retrieve-payment-method-details-using-payment-token">Retrieve Payment Method Details Using Payment Token</a></li><li><a href="#header-retrieve-card-details-using-card-token">Retrieve Card Details Using Card Token</a></li><li><a href="#header-retrieve-payment-method-details-using-token-reference">Retrieve Payment Method Details Using Token Reference</a></li><li><a href="#header-retrieve-card-details-using-token-reference">Retrieve Card Details Using Token Reference</a></li><li><a href="#header-update-card-token-information">Update Card Token Information</a></li><li><a href="#header-remove-a-card-token">Remove a Card Token</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#shopify-plugin">Shopify Plugin</a></div><div class="collapse-content"><ul><li><a href="#header-overview-10">Overview</a></li><li><a href="#header-set-up-integration">Set Up Integration</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#reporting-service">Reporting Service</a></div><div class="collapse-content"><ul><li><a href="#header-overview-11">Overview</a></li><li><a href="#header-method-options-4">Method Options</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#marketing-token">Marketing Token</a></div><div class="collapse-content"><ul><li><a href="#header-overview-12">Overview</a></li><li><a href="#header-end-points-1">End Points</a></li><li><a href="#header-signing-up-for-the-marketing-token-service">Signing Up For The Marketing Token Service</a></li><li><a href="#header-how-marketing-tokens-work">How Marketing Tokens Work</a></li><li><a href="#header-standard-payment-marketing-token-registration">Standard Payment Marketing Token Registration</a></li><li><a href="#header-direct-post-marketing-token-registration">Direct Post Marketing Token Registration</a></li><li><a href="#header-merchant-hosted-transaction-processing-marketing-token-registration">Merchant Hosted Transaction Processing Marketing Token Registration</a></li><li><a href="#header-retrieve-marketing-token-using-merchant-reference">Retrieve Marketing Token Using Merchant Reference</a></li><li><a href="#header-remove-a-marketing-token">Remove a Marketing Token</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#ivr-payments">IVR Payments</a></div><div class="collapse-content"><ul><li><a href="#header-introduction-1">Introduction</a></li><li><a href="#header-how-the-click-ivr-works">How the Click IVR Works</a></li><li><a href="#header-end-points-2">End Points</a></li><li><a href="#header-http-headers-1">HTTP Headers</a></li><li><a href="#header-ivr-transaction-registration">IVR Transaction Registration</a></li><li><a href="#header-ivr-transaction-processing">IVR Transaction Processing</a></li><li><a href="#header-ivr-transaction-status-retrieval">IVR Transaction Status Retrieval</a></li><li><a href="#header-voice-prompt-files">Voice Prompt Files</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#merchant-web-site-requirements">Merchant Web Site Requirements</a></div><div class="collapse-content"><ul><li><a href="#header-general-requirements">General Requirements</a></li><li><a href="#header-branding-requirements">Branding Requirements</a></li><li><a href="#header-online-eftpos-requirements">Online EFTPOS Requirements</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#rest-exceptions">REST Exceptions</a></div><div class="collapse-content"><ul><li><a href="#header-overview-13">Overview</a></li><li><a href="#header-rest-apis-error-messages">REST APIs Error Messages</a></li><li><a href="#header-paymark-hosted-standard-payment-and-direct-post-error-messages">Paymark Hosted Standard Payment and Direct Post Error Messages</a></li><li><a href="#header-ivr-error-messages">IVR Error Messages</a></li><li><a href="#header-payment-service-errors">Payment Service Errors</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#transaction-response-codes-and-messages">Transaction Response Codes and Messages</a></div><div class="collapse-content"><ul><li><a href="#header-overview-14">Overview</a></li><li><a href="#header-transaction-responses-and-error-messages">Transaction Responses and Error Messages</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#test-card-details">Test Card Details</a></div><div class="collapse-content"><ul><li><a href="#header-overview-15">Overview</a></li><li><a href="#header-card-numbers">Card Numbers</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#online-eftpos-sandbox">Online EFTPOS Sandbox</a></div><div class="collapse-content"><ul><li><a href="#header-overview-16">Overview</a></li><li><a href="#header-asb-transactions">ASB Transactions</a></li><li><a href="#header-payment-request">Payment Request</a></li><li><a href="#header-refund-request">Refund Request</a></li><li><a href="#header-the-co-operative-bank-(co-op)-transactions">The Co-operative Bank (Co-op) Transactions</a></li><li><a href="#header-payment-request-1">Payment Request</a></li><li><a href="#header-refund-request-1">Refund Request</a></li><li><a href="#header-heartland-bank-transactions">Heartland Bank Transactions</a></li><li><a href="#header-payment-request-2">Payment Request</a></li><li><a href="#header-refund-request-2">Refund Request</a></li><li><a href="#header-westpac-transactions">Westpac Transactions</a></li><li><a href="#header-payment-request-3">Payment Request</a></li><li><a href="#header-refund-request-3">Refund Request</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#online-eftpos-autopay">Online EFTPOS Autopay</a></div><div class="collapse-content"><ul><li><a href="#header-overview-17">Overview</a></li><li><a href="#header-transaction-flow-1">Transaction Flow</a></li><li><a href="#header-account-holder-statement">Account Holder Statement</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#click-feature-releases">Click Feature Releases</a></div><div class="collapse-content"><ul><li><a href="#header-overview-18">Overview</a></li><li><a href="#header-apis">APIs</a></li><li><a href="#header-merchant-portal">Merchant Portal</a></li></ul></div></div><div class="resource-group"><div class="heading"><div class="chevron"><i class="open fa fa-angle-down"></i></div><a href="#revision-history">Revision History</a></div><div class="collapse-content"><ul></ul></div></div><p style="text-align: center; word-wrap: break-word;"><a href="https://secure.paymarkclick.co.nz/api">https://secure.paymarkclick.co.nz/api</a></p></nav><div class="content"><header><h1 id="top">Paymark Click APIs</h1></header><h2 id="header-introduction">Introduction <a class="permalink" href="#header-introduction" aria-hidden="true">¶</a></h2>
<p>This portal describes the Paymark Click APIs.</p>
<p><strong>We recommend you read this Introduction section in full before looking at specific API details.  The information in this section applies to all Paymark Click APIs.</strong></p>
<p>The following APIs and services are described in this portal:</p>
<ol>
<li><a href="#web-payments">Web Payments</a> API:</li>
</ol>
<ul>
<li>
<p>Create a Paymark Click hosted web payment page (<a href="#paymark-hosted-standard-payment">Standard Payment</a> (“three party payment”)).</p>
</li>
<li>
<p>Securely tokenise card details for later use (an option under <a href="#paymark-hosted-standard-payment">Standard Payment</a>).</p>
</li>
<li>
<p>Create a secure token for future Online EFTPOS Autopay payments (an option under <a href="#paymark-hosted-standard-payment">Standard Payment</a>).</p>
</li>
<li>
<p>Process a secure transaction from the Merchant’s web site (<a href="#direct-post">Direct Post</a>).</p>
</li>
<li>
<p>Track payments made on a specific card (marketing token using <a href="#header-standard-payment-marketing-token-registration">Standard Payment</a> and <a href="#header-direct-post-marketing-token-registration">Direct Post</a>).
<br>
<br></p>
</li>
</ul>
<ol start="2">
<li>Transaction Processing API: this set of REST APIs enables Merchant Hosted Payments, as well as “follow up” transactions, such as captures and refunds, against any payments and authorisations done through either the <a href="#web-payments">Web Payments</a> API or the <a href="#merchant-hosted-transaction-processing">Transaction Processing</a> API.</li>
</ol>
<ul>
<li>
<p><a href="#merchant-hosted-transaction-processing">Merchant Hosted Payments</a>: Process a “two party” card <a href="#header-purchase-with-card-details">payment</a>, <a href="#header-authorisation-with-card-details">authorisation</a> or <a href="#header-status-check-with-card-details">status check</a>, or an <a href="#header-online-eftpos-payment">Online EFTPOS payment</a>.</p>
</li>
<li>
<p><a href="#retrieve-transaction">Retrieve transaction</a> details for a payment created through the <a href="#web-payments">Web Payments</a> API or the <a href="#merchant-hosted-transaction-processing">Transaction Processing</a> API.</p>
</li>
<li>
<p>Process a <a href="#header-purchase-with-payment-(or-card)-token">payment</a> or <a href="#header-authorisation-with-payment-(or-card)-token">authorisation</a> transaction for a tokenised card (payment token or card token created via the <a href="#web-payments">Web Payments</a> API or the <a href="#merchant-hosted-transaction-processing">Transaction Processing</a> API).</p>
</li>
<li>
<p><a href="#capture-transaction">Capture</a> a prior authorisation created via the <a href="#web-payments">Web Payments</a> API or the <a href="#merchant-hosted-transaction-processing">Transaction Processing</a> API.</p>
</li>
<li>
<p><a href="#cancellation-transaction">Cancel</a> a prior authorisation that is no longer required.</p>
</li>
<li>
<p><a href="#refund-transaction">Refund</a> a transaction created via the <a href="#web-payments">Web Payments</a> API or the <a href="#merchant-hosted-transaction-processing">Transaction Processing</a> API.
<br>
<br></p>
</li>
</ul>
<ol start="3">
<li><a href="#manage-payment-and-card-tokens">Token Management</a> API:</li>
</ol>
<ul>
<li>
<p>Retrieve payment token details (including card tokens) created via the <a href="#web-payments">Web Payments</a> API or the <a href="#merchant-hosted-transaction-processing">Transaction Processing</a> API.</p>
</li>
<li>
<p>Update card token details, for example, card expiry date.</p>
</li>
<li>
<p>Delete card tokens that are out of date or no longer required.
<br>
<br></p>
</li>
</ul>
<p>You can sign up for a Click demo account <a href="https://www.paymark.co.nz/products/click/demo">here</a>.</p>
<p>You can try out the <a href="#paymark-hosted-standard-payment">Standard Payment</a> integration option in our <a href="https://demo.paymarkclick.co.nz/guides/app/test/index.html">Web Payments sandbox</a>.</p>
<p>Paymark Click also offers an Interactive Voice Response (IVR) to take payments and store cards for later use.  The Click IVR can be connected to your own IVR or telephony platform.  The Paymark Click IVR specification is available <a href="#ivr-payments">here</a>.</p>
<p>The Click IVR is offered as a bespoke implementation.  Should you with to integrate with the Click IVR, please contact Paymark on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> to discuss options.</p>
<h2 id="header-end-points">End Points <a class="permalink" href="#header-end-points" aria-hidden="true">¶</a></h2>
<p>The following end points are available for the Paymark Click APIs:</p>
<p><strong>Production:</strong></p>
<p>Web Payments: <a href="https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</a></p>
<p>Transaction Processing: <a href="https://secure.paymarkclick.co.nz/api/transaction">https://secure.paymarkclick.co.nz/api/transaction</a></p>
<p>Retrieve Transaction: <a href="https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest</a></p>
<p>Retrieve Payment Tokens: <a href="https://secure.paymarkclick.co.nz/api/token/payment">https://secure.paymarkclick.co.nz/api/token/payment</a></p>
<p>Manage Card Tokens: <a href="https://secure.paymarkclick.co.nz/api/token/card">https://secure.paymarkclick.co.nz/api/token/card</a></p>
<p>Remove Marketing Token: <a href="https://secure.paymarkclick.co.nz/api/token/merchanttoken/">https://secure.paymarkclick.co.nz/api/token/merchanttoken/</a></p>
<p><strong>Non-Production:</strong></p>
<p>Web Payments: <a href="https://uat.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest">https://uat.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</a></p>
<p>Transaction Processing: <a href="https://uat.paymarkclick.co.nz/api/transaction">https://uat.paymarkclick.co.nz/api/transaction</a></p>
<p>Retrieve Transaction: <a href="https://uat.paymarkclick.co.nz/api/webpayments/paymentservice/rest">https://uat.paymarkclick.co.nz/api/webpayments/paymentservice/rest</a></p>
<p>Retrieve Payment Tokens: <a href="https://uat.paymarkclick.co.nz/api/token/payment">https://uat.paymarkclick.co.nz/api/token/payment</a></p>
<p>Manage Card Tokens: <a href="https://uat.paymarkclick.co.nz/api/token/card">https://uat.paymarkclick.co.nz/api/token/card</a></p>
<p>Remove Marketing Token: <a href="https://uat.paymarkclick.co.nz/api/token/merchanttoken/">https://uat.paymarkclick.co.nz/api/token/merchanttoken/</a></p>
<h2 id="header-http-headers">HTTP Headers <a class="permalink" href="#header-http-headers" aria-hidden="true">¶</a></h2>
<p>In addition to the headers that are required by the HTTP protocol, Paymark requires that you specify the Content and Accept headers.</p>
<p>The Content header is used to specify the content type that the Merchant application will pass in.</p>
<p>The Accept header is used to specify the content type that your client will accept.</p>
<h2 id="header-authentication">Authentication <a class="permalink" href="#header-authentication" aria-hidden="true">¶</a></h2>
<p>Authentication to the Click APIs is handled in one of two ways:</p>
<ul>
<li>
<p>Passing in the username and password in the request body, or</p>
</li>
<li>
<p>Passing an encoded username and password in the HTTP header.</p>
</li>
</ul>
<p>Refer to the individual APIs for information on what authentication model to use.</p>
<p><strong>Authentication in the Request Body</strong></p>
<p>Authentication is included in the transaction POST, in the username, password and account_id fields.</p>
<p>Example:</p>
<pre><code><span class="hljs-setting">username=<span class="hljs-value"><span class="hljs-number">90127</span>&amp;</span></span>
<span class="hljs-setting">password=<span class="hljs-value">Paymark123&amp;</span></span>
<span class="hljs-setting">account_id=<span class="hljs-value"><span class="hljs-number">700152</span></span></span></code></pre>
<p><strong>Authentication in the HTTP Header</strong></p>
<p>Authentication is achieved by passing an encoded username and password in the HTTP header in the incoming request.</p>
<p>Format: username:password in base64 encoding.</p>
<p>Example:</p>
<pre><code><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span></code></pre>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>password</td>
<td>Your Paymark Click API Password.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<section id="web-payments" class="resource-group"><h2 class="group-heading">Web Payments <a href="#web-payments" class="permalink">&para;</a></h2><h2 id="header-getting-started">Getting Started <a class="permalink" href="#header-getting-started" aria-hidden="true">¶</a></h2>
<p>Paymark Click is designed to take web-based card and Online EFTPOS payments by integrating into your website or eCommerce platform.  The Web Payments API is a RESTful API.</p>
<h2 id="header-how-web-payments-works">How Web Payments Works <a class="permalink" href="#header-how-web-payments-works" aria-hidden="true">¶</a></h2>
<p><strong>Integration Models</strong></p>
<p>The Web Payments API supports two integration models:</p>
<ul>
<li>
<p>Paymark Hosted Standard Payment</p>
</li>
<li>
<p>Direct Post</p>
</li>
</ul>
<p>You can select the option that best suits your integration requirements.</p>
<p>Both integration models support Online EFTPOS payments. Paymark Hosted Standard Payment also supports Google Pay payments.  Contact Paymark if you wish to enable Online EFTPOS or Google Pay.</p>
<p>Three Domain Secure (3DS) is fully supported under the Paymark Hosted Standard Payment integration model. To use 3DS under Direct Post, additional development is required.</p>
<p>See also <a href="#merchant-hosted-transaction-processing">Merchant Hosted Transaction Processing</a> for a further alternative.</p>
<p><strong>Paymark Hosted Standard Payment:</strong>  This is the most commonly used option. This supports card, Online EFTPOS and Google Pay payments.  This model is the easiest to implement out of all the options.</p>
<p>With each payment request, an encrypted secure URL is returned to provide a Paymark Click hosted web payment page for that transaction. This page contains appropriate merchant and transaction details and the Cardholder/Account Holder is required to enter their card or account information to proceed. Once the Cardholder/Account Holder submits valid card or account details and payment is processed and the transaction results are made available to the Merchant site/service.</p>
<p>As the payment page is hosted by Paymark, it minimises the Merchant’s PCI-DSS compliance requirements.  The payment page also supports some CSS customisation to enable Merchant branding.  Note: iFrames are not supported in the Paymark Hosted Payment Page.  If you intend you use iFrames, you need to use the <a href="#direct-post">Direct Post</a> model.</p>
<p>Full details are shown in the <a href="#paymark-hosted-standard-payment">Paymark Hosted Standard Payment</a> section.</p>
<p>You can sign up for a demo account <a href="https://www.paymark.co.nz/products/click/demo">here</a>.  You can try out this integration option in our <a href="https://demo.paymarkclick.co.nz/guides/app/test/index.html">Web Payments sandbox</a>.</p>
<p><strong>Direct Post:</strong> This is designed to receive card or Online EFTPOS payer information in a direct URL post from any Merchant held payment page, without storing card or payer information in the Merchant’s system.  This option reduces the Merchant’s PCI-DSS compliance requirements, while still giving the Merchant an option to use their own payment page if the Paymark Hosted Payment Page does not meet their needs. This is also the recommended method if the Merchant is using iFrames and does not require <a href="#three-domain-secure">Three Domain Secure (3DS)</a>. Full details are shown in the <a href="#direct-post">Direct Post</a> section.</p>
<p>If Direct Post is required, please talk to your Acquiring Bank. Your Acquiring Bank will assess your site and advise Paymark to enable this option accordingly.</p>
</section><section id="paymark-hosted-standard-payment" class="resource-group"><h2 class="group-heading">Paymark Hosted Standard Payment <a href="#paymark-hosted-standard-payment" class="permalink">&para;</a></h2><h2 id="header-overview">Overview <a class="permalink" href="#header-overview" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</a></p>
<p>The Standard Payment service allows your web app to register a payment, authorisation or tokenise request, which in turn will generate a unique URL that the application can use to load a secure payment page (Paymark Click hosted web payment page (“three party payment”)).</p>
<p>When setting up the card payment facility with your Acquiring Bank, you need to request the Gateway Hosted integration model. The Bank will then advise of your PCI compliance requirements.</p>
<p>The transactions available are:</p>
<ul>
<li>
<p>Payment (purchase) (card, Online EFTPOS and Google Pay payments)</p>
</li>
<li>
<p>Authorisation (hold funds on a card for future charging)</p>
</li>
<li>
<p>Tokenise card (store card for future payments)</p>
</li>
<li>
<p>Create a secure token for future Online EFTPOS payments (done as part of an initial Online EFTPOS payment)</p>
</li>
</ul>
<p>Transaction details may be retrieved by ID or by Merchant reference (Particular or Reference variables).</p>
<p>This service is a server to server communication method that validates all data posted to it. The payment request should be sent as a POST web request. All data should be provided in the body of the request formatted as a query string.</p>
<p>Once the request is received, the input will be validated and, if successful, a URL that can be used to access the Paymark Click hosted web payment page will be returned. If an error occurs or if invalid data is submitted, a response is provided to the requester in the form of a URL that includes an error code and a description (where applicable).</p>
<h2 id="header-two-return-options">Two Return Options <a class="permalink" href="#header-two-return-options" aria-hidden="true">¶</a></h2>
<p>The Web Payments API supports two types of return options for a Standard Payment, which determine what happens after a transaction is completed:</p>
<ol>
<li>Post to Return URL.</li>
<li>Display in Hosted Web Payment Page.</li>
</ol>
<p>When returning back to the Merchant’s web site, the Cardholder/Account Holder experience will differ based on the option selected.  This option is configured in your Paymark Click account.</p>
<p>To configure your account, log in to the <a href="https://client.paymarkclick.co.nz/">Click Merchant Portal</a> using the Username and Password from your Merchant activation email.  Note: If you are using test mode, use the “Test Merchant Activation” email.  If you are integrating to Production, use the “Production Merchant Activation” email.</p>
<p>Once you have successfully logged in, navigate to the Web Payments section via the left-hand navigation menu, then select Integration Settings. In here you can select the preferred return option. Select Save Changes once complete.</p>
<img src="./click-images/default_return_option.png" width="624">
<br>
<br>
<br>
<br>
<p><strong>Post to Return URL</strong></p>
<p>This is the default option.</p>
<p>If this option is selected, the transaction results, along with a set of other parameters, will be posted back to the Merchant’s return URL.  At the same time, the Cardholder/Account Holder will be redirected back to the return URL.</p>
<p>For security and reliability reasons, Merchants are recommended to retrieve and validate the transaction results using the <a href="#retrieve-transaction">Retrieve Transaction</a> function and not rely on the return post variables received in the return URL.</p>
<p>Note: If you choose to use this model, your return_url must have a valid SSL certificate to avoid the Cardholder/Account Holder’s browser prompting any security warning messages.  The Paymark Click hosted web payment page is a secure page.  If the web page referenced in the return_url is not secure, most browsers prompt the Customer not to continue (to the insecure page).</p>
<p><strong>Transaction Flow for Post to Return URL</strong></p>
<img src="./click-images/return_option_2.png" width="624">
<br>
<br>
<br>
<br>
<p><strong>Display in Hosted Web Payment Page</strong></p>
<p>If this option is selected, the transaction results are displayed on the Paymark Click hosted web payment page and the Cardholder/Account Holder will be presented with a “Return to Merchant” button to go back to the Merchant’s web site.</p>
<p>Merchants are required to retrieve the transaction results using the <a href="#retrieve-transaction">Retrieve Transaction</a> function.</p>
<p><strong>Transaction Flow for Display in Hosted Web Payment Page</strong></p>
<img src="./click-images/return_option_1.png" width="624">
<h2 id="header-css-customisation-for-hosted-web-payment-page">CSS customisation for Hosted Web Payment Page <a class="permalink" href="#header-css-customisation-for-hosted-web-payment-page" aria-hidden="true">¶</a></h2>
<p>The Paymark Click hosted web payment page offers a base CSS page that you can download and customise to change the look and feel of the page: <a href="https://secure.paymarkclick.co.nz/webpayments/shared/assets/v3/css/base.css">https://secure.paymarkclick.co.nz/webpayments/shared/assets/v3/css/base.css</a>.</p>
<p>Once you have updated the CSS, you can upload this for approval via the Click Merchant Portal (<a href="https://client.paymarkclick.co.nz/Default/MemberLogin.aspx">Production portal</a>, <a href="https://clientuat.paymarkclick.co.nz/Default/MemberLogin.aspx">Demo portal</a>).  The Click team will review the CSS and publish it in that environment.  Note: To ensure replication across all Click servers, please ensure each version of the CSS file has a different name e.g. include a date or version number in the file name.</p>
<p>Only the latest version of the hosted web payment page supports CSS customisation. If you’re running an older version and wish to customise your payment page, please also contact us via <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> to discuss options.</p>
<h2 id="header-standard-payment-request-data">Standard Payment Request Data <a class="permalink" href="#header-standard-payment-request-data" aria-hidden="true">¶</a></h2>
<p>The following table shows the input fields that can be posted to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>password</td>
<td>Your Paymark Click API Password.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>account_id</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>cmd</td>
<td>Defines the Web Payments integration service to use. Always use “_xclick” for a standard payment request.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value (more than zero) for purchase or authorisation requests.  Ignored (and may be omitted) for “status check” requests.  Ignored (but must be provided) for “tokenise” requests.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  For Merchants accepting cards and Online EFTPOS, this should be a 12 character alphanumeric order identifier.  This will appear on the Account Holder’s bank statement and is truncated at 12 characters, and any spaces or special characters will be removed.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>return_url</td>
<td>The URL that the Cardholder/Account Holder will be sent to on completion of the payment. This must be a publicly accessible URL.  Note: While this field is optional, this should be treated as required when the Return Option is set to Post to Return URL (see <a href="#header-two-return-options">Two Return Options</a> section) to ensure the Customer is returned to the Merchant web site.</td>
<td>Optional</td>
<td>String</td>
<td>1024</td>
</tr>
<tr>
<td>notification_url</td>
<td>Additional URL where the transaction response will be sent to. This must be a publicly accessible URL.</td>
<td>Optional</td>
<td>String</td>
<td>1024</td>
</tr>
<tr>
<td>display_customer_email</td>
<td>0 or 1 as to whether to display the customer email receipt field. 0 = hide (default), 1 = display.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>store_payment_token</td>
<td>Determines if the Customer’s payment method will be stored (tokenised) when the transaction is successful.  0 = do not display option to store payment method (default), 1 = display option to store payment method for future use, 2 = store payment method without asking Customer (Customer must have opted into storing the payment method on the Merchant’s web site).  If type is set to “tokenise”, the store_payment_token parameter will be ignored.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>token_reference</td>
<td>Merchant defined reference associated with the stored payment method (or card token).  Allowed: alphanumeric, spaces, special characters @   #   ’   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>In addition, the following fields may be included for card transactions.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>Type of transaction requested, “purchase”, “authorisation” or “statuscheck”.  Should be included if not using the account’s (account_id) default transaction type. Contact Paymark to confirm the default setting for this account_id.  Purchase is used to make a payment. Authorisation validates card details and holds funds on the card. Status check validates card details but does not hold any funds on the card; this is recommended for storing a card for future charges. A fourth option, “tokenise” is also available, however this does not validate card details so status check is recommended if the Merchant’s Acquiring Bank supports this.  Contact Paymark to confirm if your Acquiring Bank supports status checks.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>merchant_token</td>
<td>0 or 1 as to whether a <a href="#marketing-token">marketing token</a> should be generated and returned upon successful completion of the payment. 0 = do not generate a marketing token (default), 1 = generate and return marketing token.  Note: If 1 is used, it is expected the Cardholder has opted in to creating a marketing token elsewhere on the Merchant web site.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>store_card</td>
<td>This field has been deprecated: it has been replaced by store_payment_token.  This field is ignored if store_payment_token has been used in the request.  0 or 1 as to whether the option to store (tokenise) card details should be displayed upon a successful transaction. 0 = do not display (default), 1 = display option to store card for future use.  If type is set to “tokenise”, the store_card parameter will be ignored.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>store_card_without_input</td>
<td>This field has been deprecated: it has been replaced by store_payment_token.  This field is ignored if store_payment_token has been used in the request.  0 or 1 as to whether the card should be tokenised upon a successful transaction. 0 = do not store (default), 1 = store card without giving the Cardholder an option to store their card.  Note: It is expected the Cardholder has opted in to storing their card details elsewhere on the Merchant web site.  If type is set to “tokenise”, the store_card_without_input parameter will be ignored.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>transaction_source</td>
<td>“MOTO” or “INTERNET” to indicate the source of the transaction. Default value is “INTERNET”.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>button_label</td>
<td>Customise the text used on the “MAKE PAYMENT” button. Text will always be displayed in capitals.  Allowed: alphanumeric, spaces, special characters $   ,   -   ’   !   ?   .   #</td>
<td>Optional</td>
<td>String</td>
<td>20</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/x-www-form-urlencoded</span>

<span class="cpp">account_id=<span class="hljs-number">700152</span>&amp;
username=<span class="hljs-number">90127</span>&amp;
password=Paymark123&amp;
cmd=_xclick&amp;
amount=<span class="hljs-number">10.00</span>&amp;
reference=Reference&amp;
particular=Particular&amp;
display_customer_email=<span class="hljs-number">1</span>&amp;
store_payment_token=<span class="hljs-number">2</span>&amp;
token_reference=Account <span class="hljs-number">12345</span>&amp;
button_label=PAY AND SAVE CARD
return_url=https%<span class="hljs-number">3</span>A%<span class="hljs-number">2F</span>%<span class="hljs-number">2F</span>your-site.com%<span class="hljs-number">2F</span>My-Return-URL%<span class="hljs-number">3F</span>Ref%<span class="hljs-number">3</span>DReference
</span></span></code></pre>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/x-www-form-urlencoded</span>

<span class="ini"><span class="hljs-setting">account_id=<span class="hljs-value"><span class="hljs-number">700152</span>&amp;</span></span>
<span class="hljs-setting">username=<span class="hljs-value"><span class="hljs-number">90127</span>&amp;</span></span>
<span class="hljs-setting">password=<span class="hljs-value">Paymark123&amp;</span></span>
<span class="hljs-setting">cmd=<span class="hljs-value">_xclick&amp;</span></span>
<span class="hljs-setting">type=<span class="hljs-value">statuscheck&amp;</span></span>
<span class="hljs-setting">reference=<span class="hljs-value">Reference&amp;</span></span>
<span class="hljs-setting">particular=<span class="hljs-value">Particular&amp;</span></span>
<span class="hljs-setting">display_customer_email=<span class="hljs-value"><span class="hljs-number">1</span>&amp;</span></span>
<span class="hljs-setting">store_payment_token=<span class="hljs-value"><span class="hljs-number">2</span>&amp;</span></span>
<span class="hljs-setting">token_reference=<span class="hljs-value">Account <span class="hljs-number">12345</span>&amp;</span></span>
<span class="hljs-setting">button_label=<span class="hljs-value">SAVE CARD</span></span>
<span class="hljs-setting">return_url=<span class="hljs-value">https%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Fyour-site.com%<span class="hljs-number">2</span>FMy-Return-URL%<span class="hljs-number">3</span>FRef%<span class="hljs-number">3</span>DReference</span></span>
</span></span></code></pre>
<p>Note: Data is passed to the service as a URI query string so if a parameter contains URL punctuation characters it must be URL encoded.  For example, reference=Ref?001 and particular=Part&amp;001.</p>
<h2 id="header-standard-payment-request-result">Standard Payment Request Result <a class="permalink" href="#header-standard-payment-request-result" aria-hidden="true">¶</a></h2>
<p><strong>Result Options</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>https://&lt; webpaymentsbaseurl &gt;?cmd=_xclick&amp;request=&lt;encryptedrequestdata&gt;</td>
</tr>
<tr>
<td>Failure</td>
<td>Returns REST error information in XML format.  See <a href="#rest-exceptions">REST Exceptions</a>.</td>
</tr>
</tbody>
</table>
<p><strong>Success Result Parameters</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Data Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cmd</td>
<td>Value set to _xclick to indicate Standard Payment integration.</td>
<td>String</td>
</tr>
<tr>
<td>request</td>
<td>Encrypted request data.</td>
<td>String</td>
</tr>
</tbody>
</table>
<p>The Paymark Click hosted web payment page URL returned will be wrapped in an XML element in string format. You will need to extract the Payment URL out and XML decode the URL before you pass it to your “browser object”.</p>
<p>Example:</p>
<pre><code>&lt;string xmlns="http://schemas.microsoft.com/2003/10/Serialization/"&gt;

<span class="hljs-link_url">https://secure.paymarkclick.co.nz/webpayments/default.aspx?cmd=_xclick&amp;request=</span>[<span class="hljs-link_label">encrypted requested data goes here</span>]

&lt;/string&gt;</code></pre>
<h2 id="header-output-fields-for-post-to-return-url-return-option">Output Fields for Post to Return URL Return Option <a class="permalink" href="#header-output-fields-for-post-to-return-url-return-option" aria-hidden="true">¶</a></h2>
<p>These output fields only apply if the Return Option is set to Post to Return URL (see <a href="#header-two-return-options">Two Return Options</a> section).</p>
<p>The following table shows the output fields to be posted back to the Return URL, along with a brief description of each.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>TransactionId</td>
<td>Paymark Click defined unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>Type</td>
<td>Transaction type (PURCHASE, AUTHORISATION, STATUS_CHECK, OE_PAYMENT, TOKENISE).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>AccountId</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>Status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>TransactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>BatchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>ReceiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>Amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>Reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>Particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardStored</td>
<td>When store_payment_token, store_card or store_card_without_input were used in the request, and the Customer paid using a card, this indicates whether or not the card was stored.  false = not stored, true = stored. Will always be false for Online EFTPOS payments, even when store_payment_token has been used in the request.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>ErrorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>ErrorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>PaymentToken</td>
<td>The token of the newly stored payment method.  Only available if the store_payment_token variable was set to 1 or 2, and the Customer chose to store their payment method details, and the transaction was successful. <br><br> Note: No token is created if the Customer pays using: <br>* Online EFTPOS and the Merchant is not enabled for Online EFTPOS Autopay.<br>*Google Pay.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>PaymentTokenStatus</td>
<td>The status of the token request.  The status is provided regardless of whether the token was created or not, so in the event a token could not be created, this is made clear to the Merchant. <br>SUCCESS = payment token has been created (and PaymentToken will contain the token ID). <br>MERCHANT_NOT_ENABLED = Customer selected a payment method for which the Merchant may not create tokens, for example, the Merchant is not enabled for Online EFTPOS Autopay and the Customer has paid using Online EFTPOS. <br>USER_DECLINED = May appear when store_payment_token variable was set to 1.  If Customer has paid using Online EFTPOS, and Customer has not selected Save OE Autopay, PaymentTokenStatus = USER_DECLINED and there is no PaymentToken.  Note: If Customer has paid using a card, and Customer has not selected Save Card, CardStored variable shows as false and there is no PaymentToken or PaymentTokenStatus. <br>ERROR = If (transaction) status = DECLINED, this means the Customer declined the Online EFTPOS payment.  Or if there is another (transaction) status, this is an undefined issue when attempting to create the token.  Contact Paymark for support. <br>PROCESSING = awaiting Customer action for an Online EFTPOS payment.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>TokenReference</td>
<td>Merchant defined reference associated with the stored payment method (or card token).  Present if the Customer paid using a card.</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>The following table shows output fields that may also be present for a card payment.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>AuthCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>CardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardHolder</td>
<td>The Cardholder name entered into the Paymark Click hosted web payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>MerchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction. Only available if the merchant_token variable was set to 1.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardToken</td>
<td>The token of the newly stored payment method, if the Customer paid using a card.  Only available if the store_payment_token variable was set to 1 or 2, or store_card / store_card_without_input was set to 1, and the Customer chose to store their payment method details, and the transaction was successful.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>AcquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>6</td>
</tr>
</tbody>
</table>
<p><strong>Note on Transaction Status</strong></p>
<p>The status field in the transaction response enables you to manage the Customer experience in your web site.  For example:</p>
<ul>
<li>
<p>SUCCESSFUL indicates the payment has been processed and you can fulfil the order.</p>
</li>
<li>
<p>DECLINED means the Bank has declined the payment so you may wish to offer the Customer an alternative payment method.</p>
</li>
<li>
<p>CANCELLED means the Customer cancelled out of the payment screen so you may wish to release any hold on goods that you have (pending payment).</p>
</li>
</ul>
</section><section id="direct-post" class="resource-group"><h2 class="group-heading">Direct Post <a href="#direct-post" class="permalink">&para;</a></h2><h2 id="header-overview-1">Overview <a class="permalink" href="#header-overview-1" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</a></p>
<p>The Direct Post service allows data from the Merchant hosted payment page to be securely sent to Paymark.  Registering a payment request for Direct Post works in a similar way as <a href="#paymark-hosted-standard-payment">Standard Payment</a>.  It allows the Merchant’s application to register a payment request and obtain a unique URL to which payment information can be posted.</p>
<p>When setting up the card payment facility with your Acquiring Bank, you need to request the Direct Post integration model.  The Bank will then advise Paymark to enable Direct Post on your account.  Direct Post requires a higher level of PCI compliance than <a href="#paymark-hosted-standard-payment">Standard Payment</a>.  Your Bank will advise you of your specific requirements.  For additional information, refer to the <a href="https://www.pcisecuritystandards.org/documents/Understanding_SAQs_PCI_DSS_v3.pdf">PCI DSS Self Assessment Questionnaires</a>, A-EP information.</p>
<p>There are three options available for the transaction:</p>
<ul>
<li>
<p>Payment (card and Online EFTPOS)</p>
</li>
<li>
<p>Authorisation (hold funds on a card)</p>
</li>
<li>
<p>Tokenise (store card for future payments).</p>
</li>
</ul>
<p>For card payments, the Cardholder may also choose to store their card details (thus generating a card token) at the same time as making the payment.</p>
<p>A card token is ideal for websites or services that wish to collect card details for recurring billing purposes in a secure manner.  This only applies to standard card types: Visa, MasterCard, American Express and Diners Club cards.</p>
<p>This service is implemented by encrypting the card number and expiry date and assigning it a unique token that can then be used to process future transactions.  If using type “authorisation”, the card details are validated at the time the card is stored through creating an authorisation for the amount specified in the direct post request.</p>
<p>The transaction result is retrieved by unique reference Result_ID.  Other transaction details may be retrieved by ID or by Merchant reference (Particular or Reference variables).  See also <a href="#retrieve-transaction">Retrieve Transaction</a> section.</p>
<p>This service is a server to server communication method that validates all data posted to it. The payment request should be sent as a POST web request. All data should be provided in the body of the request formatted as a query string.</p>
<p>Once the request is received, the input will be validated and, if successful, a URL that can be used to post payment details to Paymark Click will be returned. If an error occurs or if invalid data is submitted, a response is provided to the requester in the form of a URL that includes an error code and a description (where applicable).</p>
<h2 id="header-transaction-flow">Transaction Flow <a class="permalink" href="#header-transaction-flow" aria-hidden="true">¶</a></h2>
<p>There are three stages to the Direct Post transaction:</p>
<ol>
<li>Merchant’s application registers the payment request and obtains a Direct Post URL.</li>
<li>Merchant’s payment page collects payment information and posts to the Direct Post URL. Paymark then processes the transaction and returns a unique reference Result_ID.</li>
<li>Merchant’s application retrieves the transaction result using the unique reference Result_ID.</li>
</ol>
<p><strong>Notes:</strong></p>
<ul>
<li>
<p>Your return_url must have a valid SSL certificate to avoid the Cardholder/Account Holder’s browser prompting any security warning messages.</p>
</li>
<li>
<p>Your site needs to be able to handle redirection to the Issuing Bank’s authentication site (Issuer ACS) if the Merchant is enabled for 3DS.  C.f. <a href="#three-domain-secure">3DS with Direct Post Integration</a>.</p>
</li>
</ul>
<img src="./click-images/direct_post_txn_flow.png" width="624">
<h2 id="header-direct-post-request-data">Direct Post Request Data <a class="permalink" href="#header-direct-post-request-data" aria-hidden="true">¶</a></h2>
<p>The following table shows the input fields that can be posted to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>password</td>
<td>Your Paymark Click API Password.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>account_id</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>cmd</td>
<td>Defines the Web Payments integration service to use. Always use “_xdirect” for a Direct Post request.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>type</td>
<td>Type of transaction requested, “purchase”, “authorisation” or “statuscheck”.  Should be included if not using the account’s (account_id) default transaction type. Contact Paymark to confirm the default setting for this account_id.  Purchase is used to make a payment on a card or using Online EFTPOS. Authorisation validates card details and holds funds on the card. Status check validates card details but does not hold any funds on the card; this is recommended for storing a card for future charges. A fourth option, “tokenise” is also available, however this does not validate card details so status check is recommended if the Merchant’s Acquiring Bank supports this.  Contact Paymark to confirm if your Acquiring Bank supports status checks.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value (more than zero) for purchase or authorisation requests.  Ignored (and may be omitted) for status check requests.  Ignored (but must be provided) for “tokenise” requests.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  For Merchants accepting cards and Online EFTPOS, this should be a 12 character alphanumeric order identifier.  This will appear on the Account Holder’s bank statement and is truncated at 12 characters, and any spaces or special characters will be removed.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>return_url</td>
<td>The URL that the Cardholder/Account Holder will be sent to on completion of the payment. This must be a publicly accessible URL.  Note: While this field is optional, this should be treated as required to ensure the Result_Id can be returned to the Merchant and the Merchant can retrieve the transaction result to display to the Customer.</td>
<td>Optional</td>
<td>String</td>
<td>1024</td>
</tr>
<tr>
<td>notification_url</td>
<td>Additional URL where the transaction response will be sent to. This must be a publicly accessible URL.</td>
<td>Optional</td>
<td>String</td>
<td>1024</td>
</tr>
</tbody>
</table>
<p>In addition, the following fields are included for card payments.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>merchant_token</td>
<td>0 or 1 as to whether a <a href="#marketing-token">marketing token</a> should be generated and returned upon successful completion of the payment. 0 = do not generate a marketing token (default), 1 = generate and return marketing token.  Note: If 1 is used, it is expected the Cardholder has opted in to creating a marketing token elsewhere on the Merchant web site.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>store_card_without_input</td>
<td>0 or 1 as to whether the card should be tokenised upon a successful transaction. 0 = do not store (default), 1 = store card without giving the Cardholder an option to store their card.  Note: It is expected the Cardholder has opted in to storing their card details elsewhere on the Merchant web site.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>transaction_source</td>
<td>“MOTO” or “INTERNET” to indicate the source of the transaction. Default value is “INTERNET”.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>token_reference</td>
<td>Merchant defined reference associated with the stored card token.  Allowed: alphanumeric, spaces, special characters @   #   ’   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/x-www-form-urlencoded</span>

<span class="cpp">account_id=<span class="hljs-number">700152</span>&amp;
username=<span class="hljs-number">90127</span>&amp;
password=Paymark123&amp;
amount=<span class="hljs-number">10.00</span>&amp;
reference=Reference&amp;
particular=Particular&amp;
cmd=_xdirect&amp;
return_url=https%<span class="hljs-number">3</span>A%<span class="hljs-number">2F</span>%<span class="hljs-number">2F</span>your-site.com%<span class="hljs-number">2F</span>My-Return-URL%<span class="hljs-number">3F</span>Ref%<span class="hljs-number">3</span>DReference
</span></span></code></pre>
<p>Note: Data is passed to the service as a URI query string so if a parameter contains URL punctuation characters it must be URL encoded.  For example, reference=Ref?001 and particular=Part&amp;001.</p>
<h2 id="header-direct-post-request-result">Direct Post Request Result <a class="permalink" href="#header-direct-post-request-result" aria-hidden="true">¶</a></h2>
<p><strong>Result Options</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>The Direct Post URL returned will be wrapped in an XML element in string format. You will need to extract the Direct Post URL out and XML decode the URL before you pass it to your “browser object”.</td>
</tr>
<tr>
<td>Failure</td>
<td>Returns REST error information in XML format.  See <a href="#rest-exceptions">REST Exceptions</a>.</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code>&lt;<span class="hljs-built_in">string</span> xmlns=<span class="hljs-string">"http://schemas.microsoft.com/2003/10/Serialization/"</span>&gt;

http<span class="hljs-variable">s:</span>//secure.paymarkclick.<span class="hljs-keyword">co</span>.nz/api/webpayments/default.aspx?<span class="hljs-keyword">q</span>=<span class="hljs-number">5</span>e274bfe878446a997e252b0c4189cc0

&lt;/<span class="hljs-built_in">string</span>&gt;</code></pre>
<h2 id="header-post-payment-details">Post Payment Details <a class="permalink" href="#header-post-payment-details" aria-hidden="true">¶</a></h2>
<p>After a Direct Post URL has been obtained from <a href="#header-direct-post-request-result">above</a>, a payment page on the Merchant’s web site can collect payment information and post it to the Direct Post URL.  This may be card payment information or Online EFTPOS payment information.  For specific requirements on the presentation and handling of Online EFTPOS payments, please also refer to the <a href="http://docs.dev.paymark.nz/oe/">Online EFTPOS API specification</a> or contact Paymark with any questions.</p>
<p>To process a card payment, the following fields are used for the post to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>card_number</td>
<td>Card number collected from Merchant’s payment page.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>card_expiry_month</td>
<td>Expiry month of the card, in the format MM.</td>
<td>Required</td>
<td>String</td>
<td>2</td>
</tr>
<tr>
<td>card_expiry_year</td>
<td>Expiry year of the card, in the format YY.</td>
<td>Required</td>
<td>String</td>
<td>2</td>
</tr>
<tr>
<td>card_holder_name</td>
<td>Cardholder name that appears on the card, for example, Mr John Smith.  Allowed: alphanumeric, spaces, special characters - ’</td>
<td>Optional</td>
<td>String</td>
<td>256</td>
</tr>
<tr>
<td>card_csc</td>
<td>Card security code (CSC number).</td>
<td>Optional</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>payment_method</td>
<td>Type of payment.  Use CARD for card payments.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>customer_email</td>
<td>Customer email address, if provided.  Sends an email notification to the Customer to advise the transaction details and status.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>To process an Online EFTPOS payment, the following fields are used for the post to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>payer_id</td>
<td>Consumer’s personal identifier.  See payerIdType and bankId Mapping table below for allowed payer ID types.  See also <a href="#merchant-web-site-requirements">Merchant Web Site Requirements</a> for payerId validation rules.</td>
<td>Required</td>
<td>String</td>
<td>128</td>
</tr>
<tr>
<td>payer_id_type</td>
<td>Defines the type of payerId that has been used.  See payerIdType and bankId Mapping table below for allowed payer ID types.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>bank</td>
<td>Consumer bank to which the payment request is sent.  See payerIdType and bankId Mapping table below for allowed banks.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>payment_method</td>
<td>Type of payment.  Use OE for Online EFTPOS payments.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>customer_email</td>
<td>Customer email address, if provided.  Sends an email notification to the Customer to advise the transaction details and status.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p><strong>payerIdType and bankId Mapping</strong></p>
<p>Supported Consumer Banks are:</p>
<ul>
<li>
<p>ASB (bank = ASB)</p>
</li>
<li>
<p>Co-operative Bank (bank = COOPERATIVE)</p>
</li>
<li>
<p>Heartland (bank = HEARTLAND)</p>
</li>
<li>
<p>Westpac (bank = WESTPAC)</p>
</li>
</ul>
<p>Each Consumer Bank can allow different types as the payerIdType.  The table below shows what is allowed by each Consumer Bank (as specified in bankId).</p>
<table>
<thead>
<tr>
<th>Consumer Bank (bank)</th>
<th>Allowed Types (payerIdType)</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASB</td>
<td>MOBILE</td>
</tr>
<tr>
<td>COOPERATIVE</td>
<td>MOBILE, CUSTOMERID</td>
</tr>
<tr>
<td>HEARTLAND</td>
<td>MOBILE</td>
</tr>
<tr>
<td>WESTPAC</td>
<td>MOBILE, WESTPAC1ID</td>
</tr>
</tbody>
</table>
<p>Examples:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/default.aspx?q=5e274bfe878446a997e252b0c4189cc0</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/x-www-form-urlencoded</span>

<span class="ini"><span class="hljs-setting">card_number=<span class="hljs-value"><span class="hljs-number">4987654321098769</span>&amp;</span></span>
<span class="hljs-setting">card_expiry_month=<span class="hljs-value"><span class="hljs-number">05</span>&amp;</span></span>
<span class="hljs-setting">card_expiry_year=<span class="hljs-value"><span class="hljs-number">17</span>&amp;</span></span>
<span class="hljs-setting">card_holder_name=<span class="hljs-value">Mr John Smith&amp;</span></span>
<span class="hljs-setting">card_csc=<span class="hljs-value"><span class="hljs-number">111</span>&amp;</span></span>
<span class="hljs-setting">payment_method=<span class="hljs-value">CARD</span></span>
</span></span></code></pre>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/default.aspx?q=5e274bfe878446a997e252b0c4189cc0</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/x-www-form-urlencoded</span>

<span class="ini"><span class="hljs-setting">payer_id=<span class="hljs-value">ABC.<span class="hljs-number">123456789</span></span></span>
<span class="hljs-setting">payer_id_type=<span class="hljs-value">WESTPAC1ID</span></span>
<span class="hljs-setting">bank=<span class="hljs-value">WESTPAC </span></span>
<span class="hljs-setting">payment_method=<span class="hljs-value">OE</span></span>
</span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>While the transaction is being processed, the Cardholder/Account Holder is redirected back to the Return URL that was in the <a href="#header-direct-post-request-data">transaction request</a>, along with the Result_Id and a Transaction_No (for successful transactions).</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Result_Id</td>
<td>Identifier used to retrieve transaction details for successful transactions, or exception details for transactions with a <a href="#rest-exceptions">REST Exception</a>.</td>
<td>GUID</td>
</tr>
<tr>
<td>Transaction_No</td>
<td>Identifier that is populated for successful transactions i.e. there were no <a href="#rest-exceptions">REST Exceptions</a>.  Can be used to <a href="#header-retrieve-transaction-by-transaction-id">retrieve transaction details</a>.</td>
<td>String</td>
</tr>
</tbody>
</table>
<h2 id="header-validating-transaction-result-by-result_id">Validating Transaction Result By Result_ID <a class="permalink" href="#header-validating-transaction-result-by-result_id" aria-hidden="true">¶</a></h2>
<p>After a Result_ID is returned from the <a href="#header-post-payment-details">previous step</a>, the Merchant application can retrieve the transaction result.</p>
<p>The following table shows the input fields that can be posted to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>password</td>
<td>Your Paymark Click API Password.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>account_id</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>result_id</td>
<td>Unique identifier for the Direct Post transaction, returned from the <a href="#header-post-payment-details">previous step</a> after posting payment information.</td>
<td>Required</td>
<td>GUID</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code>GET https:<span class="hljs-comment">//secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/QueryDirectPostResultByResultId?</span>
username=<span class="hljs-number">90127</span>&amp;
password=Paymark123&amp;
account_id=<span class="hljs-number">700152</span>&amp;
result_id=e619459a-<span class="hljs-number">3</span>c03-<span class="hljs-number">478f</span>-b0c1-<span class="hljs-number">44</span>a680ef87cc
HTTP/<span class="hljs-number">1.1</span></code></pre>
<h2 id="header-validate-transaction-request-result">Validate Transaction Request Result <a class="permalink" href="#header-validate-transaction-request-result" aria-hidden="true">¶</a></h2>
<p><strong>Result Options</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>XML containing standard outputs for requested transaction information.</td>
</tr>
<tr>
<td>Failure</td>
<td>Returns REST error information in XML format.  See <a href="#rest-exceptions">REST Exceptions</a>.</td>
</tr>
</tbody>
</table>
<p><strong>Success Result Parameters</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Status</td>
<td>There are four possible statuses: PROCESSED, REJECTED, SESSION_EXPIRED, UNKNOWN.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>Message</td>
<td>Messages correspond to the status above: PROCESSED – “Transaction was processed”, REJECTED – “Transaction details failed validation”, SESSION_EXPIRED – “Session has expired”, UNKNOWN – “Unknown server error”.</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>MerchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction. Only available if the merchant_token variable was set to 1.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>Transaction</td>
<td>Details of the transaction.  See table below for UDT structure.</td>
<td>UDT</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>TransactionId</td>
<td>Paymark Click assigned unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>Type</td>
<td>Transaction type (PURCHASE, AUTHORISATION, STATUS_CHECK, REFUND, CAPTURE, OE_PAYMENT).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>AccountID</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>Status</td>
<td>Status of the transaction.  UNKNOWN, SUCCESSFUL, DECLINED, BLOCKED, FAILED, INPROGRESS, CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>TransactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>BatchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>ReceiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>AuthCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>Amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>Reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>Particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>ErrorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>ErrorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>AcquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>6</td>
</tr>
</tbody>
</table>
<p>The following table shows output fields that may also be present for a card payment.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CardType</td>
<td>The card type used for this transaction. (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>CardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardHolder</td>
<td>The Cardholder name entered into the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardStored</td>
<td>Whether or not the card was stored: 0 = not stored, 1 = stored.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>CardToken</td>
<td>The token of the newly stored card, only available if the cardStored variable was set to 1 and the Cardholder chose to store their card details.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>TokenReference</td>
<td>Merchant defined reference associated with the stored card token.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
</section><section id="merchant-hosted-transaction-processing" class="resource-group"><h2 class="group-heading">Merchant Hosted Transaction Processing <a href="#merchant-hosted-transaction-processing" class="permalink">&para;</a></h2><h2 id="header-overview-2">Overview <a class="permalink" href="#header-overview-2" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/transaction/">https://secure.paymarkclick.co.nz/api/transaction/</a></p>
<p>The Transaction Processing API allows a Merchant to process a secure card or Online EFTPOS payment from their own web site (“two party payment”).</p>
<p>With this option, Merchants are able to utilise their own functions and processes to collect and store card details, and then make a direct server to server API call to process transactions via the Paymark Transaction Processing API. Merchants also have the option of bulk processing transactions with pre-collected Card details. Having the ability to collect and store card details, Merchants are required to meet full PCI-DSS compliance.</p>
<p>If Merchant Hosted Transaction Processing is required, please talk to your Acquiring Bank. Your Acquiring Bank will assess your site and advise Paymark to enable the option accordingly.</p>
<p>This option supports Online EFTPOS payments. Contact Paymark if you wish to enable Online EFTPOS.</p>
<p>Merchant Hosted Transaction Processing currently does not support Three Domain Secure (3DS).</p>
<p>The Transaction Processing API is a RESTful API over HTTP, with a JSON payload.</p>
<h2 id="header-method-options">Method Options <a class="permalink" href="#header-method-options" aria-hidden="true">¶</a></h2>
<p>This API offers the following methods to process transactions:</p>
<ul>
<li>
<p><a href="#header-purchase-with-card-details">Purchase transaction with card details</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-card-details">Authorisation transaction with card details</a></p>
</li>
<li>
<p><a href="#header-status-check-with-card-details">Status check transaction with card details</a></p>
</li>
<li>
<p><a href="#header-store-card-details-without-issuer-validation">Store card without Issuer validation</a></p>
</li>
<li>
<p><a href="#header-online-eftpos-payment">Payment transaction using Online EFTPOS</a></p>
</li>
</ul>
<h2 id="header-purchase-with-card-details">Purchase with Card Details <a class="permalink" href="#header-purchase-with-card-details" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to make a purchase transaction by passing in card data.</p>
<p>This method also allows this card to be stored (tokenised) and the token and token reference be returned with the transaction result. The next time a transaction is to be done on this card, the token can be used to process the transaction.</p>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Paymark issued Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>email</td>
<td>Email address for the Cardholder.  This field is for the Merchant’s use: Paymark Click does not send any information to the Cardholder for transactions done through the Merchant Hosted Transaction Processing API.  If not required, leave blank.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Card number without spaces.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>12-19</td>
</tr>
<tr>
<td>cardType</td>
<td>Card type. Accepted values are: “MC” MasterCard, “VISA” Visa, “DINERS” Diners Club, “AMEX” American Express and “QCARD” QCard.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Card expiry date, in the format MMYY. E.g. 0518 for May 2018.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>cardHolder</td>
<td>Cardholder name that appears on the card, for example, Mr John Smith.  Allowed: alphanumeric, spaces, special characters - ’</td>
<td>Required</td>
<td>String</td>
<td>256</td>
</tr>
<tr>
<td>cardCSC</td>
<td>Card security code found on the back of the card, in numeric format.  If passed it will be used, else if left null or blank it will be ignored.  Needs to be 4 digits for American Express, 3 digits for all other card types.</td>
<td>Optional</td>
<td>String</td>
<td>3 or 4</td>
</tr>
<tr>
<td>merchantToken</td>
<td>Whether a <a href="#marketing-token">marketing token</a> should be registered and returned upon successful completion of the payment. 0 = do not register a marketing token (default), 1 = register and return a marketing token.</td>
<td>Optional</td>
<td>Integer</td>
<td>1</td>
</tr>
<tr>
<td>storeCard</td>
<td>Whether the card should be stored and assigned a card token upon successful completion of the payment.  0 = do not store card (default), 1 = store card and return a card token.</td>
<td>Optional</td>
<td>Boolean</td>
<td>N/A</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   +   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionFrequency</td>
<td>Indicates whether this is a single or a recurring transaction. If not passed in or empty, it will take the default frequency from the Paymark Click account setting.  Set to “Single” when charging a saved card, for example, the Customer has previously opted to save their Card then chooses to use this for a later purchase. For a Merchant initiated regular repeat purchase, for example, a magazine subscription, use “Recurring”. If not passed in or empty, it will take the default frequency from the Paymark Click account setting. Allowed: “Single”, “Recurring” or empty string i.e. “”.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/purchase/</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-number">700152</span></span>,
"<span class="hljs-attribute">amount</span>":<span class="hljs-value"><span class="hljs-number">10.00</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span></span>,
"<span class="hljs-attribute">cardNumber</span>":<span class="hljs-value"><span class="hljs-string">"4987654321098769"</span></span>,
"<span class="hljs-attribute">cardType</span>":<span class="hljs-value"><span class="hljs-string">"VISA"</span></span>,
"<span class="hljs-attribute">cardExpiry</span>":<span class="hljs-value"><span class="hljs-string">"0517"</span></span>,
"<span class="hljs-attribute">cardHolder</span>":<span class="hljs-value"><span class="hljs-string">"Mr John Smith"</span></span>,
"<span class="hljs-attribute">cardCSC</span>":<span class="hljs-value"><span class="hljs-string">"111"</span></span>,
"<span class="hljs-attribute">storeCard</span>":<span class="hljs-value"><span class="hljs-number">1</span></span>,
"<span class="hljs-attribute">tokenReference</span>":<span class="hljs-value"><span class="hljs-string">"TokenReference"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>Standard response outputs are detailed in the <a href="#header-outputs">Outputs</a> section.</p>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Card Details Exception</td>
<td>Card details passed do not pass card validation.</td>
</tr>
<tr>
<td>One Dollar Auth Exception</td>
<td>Unable to obtain the $1 authorisation from the card details specified (if storing card data).</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-authorisation-with-card-details">Authorisation with Card Details <a class="permalink" href="#header-authorisation-with-card-details" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to make an authorisation transaction by passing in card data.  An authorisation transaction holds funds on the card for charging at a later date, for example, if stock levels need to be checked before an order can be fulfilled.  All authorisation transactions need to be either captured (charged) or cancelled (removes the hold).</p>
<p>This method also allows the card to be stored (tokenised) and the token and token reference be returned with the transaction result. The next time a transaction is to be done on this card, the token can be used to process the transaction.</p>
<p>See also:</p>
<ul>
<li>
<p><a href="#capture-transaction">Capture Transaction</a></p>
</li>
<li>
<p><a href="#cancellation-transaction">Cancellation Transaction</a></p>
</li>
<li>
<p><a href="#header-purchase-with-payment-(or-card)-token">Purchase with Card Token</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-payment-(or-card)-token">Authorisation with Card Token</a></p>
</li>
</ul>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Paymark issued Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>email</td>
<td>Email address for the Cardholder.  This field is for the Merchant’s use: Paymark Click does not send any information to the Cardholder for transactions done through the Merchant Hosted Transaction Processing API.  If not required, leave blank.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Card number without spaces.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>12-19</td>
</tr>
<tr>
<td>cardType</td>
<td>Card type. Accepted values are: “MC” MasterCard, “VISA” Visa, “DINERS” Diners Club, “AMEX” American Express and “QCARD” QCard.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Card expiry date, in the format MMYY. E.g. 0518 for May 2018.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>cardHolder</td>
<td>Cardholder name that appears on the card, for example, Mr John Smith.  Allowed: alphanumeric, spaces, special characters ’   -</td>
<td>Required</td>
<td>String</td>
<td>256</td>
</tr>
<tr>
<td>cardCSC</td>
<td>Card security code found on the back of the card, in numeric format.  If passed it will be used, else if left null or blank it will be ignored.  Needs to be 4 digits for American Express, 3 digits for all other card types.</td>
<td>Optional</td>
<td>String</td>
<td>3 or 4</td>
</tr>
<tr>
<td>merchantToken</td>
<td>Whether a <a href="#marketing-token">marketing token</a> should be registered and returned upon successful completion of the payment. 0 = do not register a marketing token (default), 1 = register and return a marketing token.</td>
<td>Optional</td>
<td>Integer</td>
<td>1</td>
</tr>
<tr>
<td>storeCard</td>
<td>Whether the card should be stored and assigned a card token upon successful completion of the payment.  0 = do not store card (default), 1 = store card and return a card token.</td>
<td>Optional</td>
<td>Boolean</td>
<td>N/A</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionFrequency</td>
<td>Indicates whether the transaction is a single or a recurring transaction. If not passed in or empty, it will take the default frequency from the Paymark Click account setting.  Set to “Single” when charging a saved card, for example, the Customer has previously opted to save their Card then chooses to use this for a later purchase. For a Merchant initiated regular repeat purchase, for example, a magazine subscription, use “Recurring”. If not passed in or empty, it will take the default frequency from the Paymark Click account setting. Allowed: “Single”, “Recurring” or empty string i.e. “”.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/authorisation/</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-number">700152</span></span>,
"<span class="hljs-attribute">amount</span>":<span class="hljs-value"><span class="hljs-number">10.00</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span></span>,
"<span class="hljs-attribute">cardNumber</span>":<span class="hljs-value"><span class="hljs-string">"4987654321098769"</span></span>,
"<span class="hljs-attribute">cardType</span>":<span class="hljs-value"><span class="hljs-string">"VISA"</span></span>,
"<span class="hljs-attribute">cardExpiry</span>":<span class="hljs-value"><span class="hljs-string">"0517"</span></span>,
"<span class="hljs-attribute">cardHolder</span>":<span class="hljs-value"><span class="hljs-string">"Mr John Smith"</span></span>,
"<span class="hljs-attribute">cardCSC</span>":<span class="hljs-value"><span class="hljs-string">"111"</span></span>,
"<span class="hljs-attribute">storeCard</span>":<span class="hljs-value"><span class="hljs-number">1</span></span>,
"<span class="hljs-attribute">tokenReference</span>":<span class="hljs-value"><span class="hljs-string">"TokenReference"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>Standard response outputs are detailed in the <a href="#header-outputs">Outputs</a> section.</p>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Card Details Exception</td>
<td>Card details passed do not pass card validation.</td>
</tr>
<tr>
<td>Payment Details Exception</td>
<td>Authorisation transaction details do not pass validation.</td>
</tr>
<tr>
<td>One Dollar Auth Exception</td>
<td>Unable to obtain the $1 authorisation from the card details specified (if storing card data).</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-status-check-with-card-details">Status Check with Card Details <a class="permalink" href="#header-status-check-with-card-details" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to make a status check transaction by passing in card data.  A status check validates the card with the Issuer without the need to hold funds on the card.  Not all Acquiring Banks support status checks: contact Paymark to confirm if your Acquiring Bank supports status checks.</p>
<p>The primary use for a status check is to store the card for future transactions.  The card is stored (tokenised) and the token and token reference be returned with the transaction result. The next time a transaction is to be done on this card, the token can be used to process the transaction.</p>
<p>See also:</p>
<ul>
<li>
<p><a href="#header-purchase-with-payment-(or-card)-token">Purchase with Card Token</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-payment-(or-card)-token">Authorisation with Card Token</a></p>
</li>
</ul>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Paymark issued Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>Ignored (and may be omitted) for status check requests.</td>
<td>Optional</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>email</td>
<td>Email address for the Cardholder.  This field is for the Merchant’s use: Paymark Click does not send any information to the Cardholder for transactions done through the Merchant Hosted Transaction Processing API.  If not required, leave blank.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Card number without spaces.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>12-19</td>
</tr>
<tr>
<td>cardType</td>
<td>Card type. Accepted values are: “MC” MasterCard, “VISA” Visa, “DINERS” Diners Club, “AMEX” American Express and “QCARD” QCard.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Card expiry date, in the format MMYY. E.g. 0518 for May 2018.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>cardHolder</td>
<td>Cardholder name that appears on the card, for example, Mr John Smith.  Allowed: alphanumeric, spaces, special characters ’   -</td>
<td>Required</td>
<td>String</td>
<td>256</td>
</tr>
<tr>
<td>cardCSC</td>
<td>Card security code found on the back of the card, in numeric format.  While this is an optional field from the API perspective, the Issuer may need this to process the transaction so should be treated as required.  Needs to be 4 digits for American Express, 3 digits for all other card types.</td>
<td>Optional</td>
<td>String</td>
<td>3 or 4</td>
</tr>
<tr>
<td>merchantToken</td>
<td>Whether a <a href="#marketing-token">marketing token</a> should be registered and returned upon successful completion of the payment. 0 = do not register a marketing token (default), 1 = register and return a marketing token.</td>
<td>Optional</td>
<td>Integer</td>
<td>1</td>
</tr>
<tr>
<td>storeCard</td>
<td>Whether the card should be stored and assigned a card token upon successful completion of the payment.  0 = do not store card (default), 1 = store card and return a card token.</td>
<td>Optional</td>
<td>Boolean</td>
<td>N/A</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionFrequency</td>
<td>Indicates whether the transaction is a single or a recurring transaction. If not passed in or empty, it will take the default frequency from the Paymark Click account setting.  Set to “Single” when charging a saved card, for example, the Customer has previously opted to save their Card then chooses to use this for a later purchase. For a Merchant initiated regular repeat purchase, for example, a magazine subscription, use “Recurring”. If not passed in or empty, it will take the default frequency from the Paymark Click account setting. Allowed: “Single”, “Recurring” or empty string i.e. “”.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/statuscheck/</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-number">700152</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span></span>,
"<span class="hljs-attribute">cardNumber</span>":<span class="hljs-value"><span class="hljs-string">"4987654321098769"</span></span>,
"<span class="hljs-attribute">cardType</span>":<span class="hljs-value"><span class="hljs-string">"VISA"</span></span>,
"<span class="hljs-attribute">cardExpiry</span>":<span class="hljs-value"><span class="hljs-string">"0517"</span></span>,
"<span class="hljs-attribute">cardHolder</span>":<span class="hljs-value"><span class="hljs-string">"Mr John Smith"</span></span>,
"<span class="hljs-attribute">cardCSC</span>":<span class="hljs-value"><span class="hljs-string">"111"</span></span>,
"<span class="hljs-attribute">storeCard</span>":<span class="hljs-value"><span class="hljs-number">1</span></span>,
"<span class="hljs-attribute">tokenReference</span>":<span class="hljs-value"><span class="hljs-string">"TokenReference"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>Standard response outputs are detailed in the <a href="#header-outputs">Outputs</a> section.</p>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Card Details Exception</td>
<td>Card details passed do not pass card validation.</td>
</tr>
<tr>
<td>Payment Details Exception</td>
<td>Status check transaction details do not pass validation.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-store-card-details-without-issuer-validation">Store Card Details without Issuer Validation <a class="permalink" href="#header-store-card-details-without-issuer-validation" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to store the card for future payments, without validating card details with the card issuer or holding funds on the card.  This method exists for historical purposes and is useful for storing card details if the Merchant’s Acquiring Bank does not support status checks.  Contact Paymark to confirm if your Acquiring Bank supports status checks.</p>
<p>The recommended method is now <a href="#header-status-check-with-card-details">Status Check</a>, which validates card details without holding funds on the card.</p>
<p>A card token and token reference be returned with the transaction result. The next time a transaction is to be done on this card, the token can be used to process the transaction.</p>
<p>See also:</p>
<ul>
<li>
<p><a href="#header-purchase-with-payment-(or-card)-token">Purchase with Card Token</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-payment-(or-card)-token">Authorisation with Card Token</a></p>
</li>
</ul>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardNumber</td>
<td>Card number without spaces.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>12-19</td>
</tr>
<tr>
<td>cardType</td>
<td>Card type. Accepted values are: “MC” MasterCard, “VISA” Visa, “DINERS” Diners Club, “AMEX” American Express and “QCARD” QCard.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Card expiry date, in the format MMYY. E.g. 0518 for May 2018.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>cardHolder</td>
<td>Cardholder name that appears on the card, for example, Mr John Smith.  Allowed: alphanumeric, spaces, special characters ’   -</td>
<td>Required</td>
<td>String</td>
<td>256</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.  Allowed: alphanumeric, spaces.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/card</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">cardNumber</span>":<span class="hljs-value"><span class="hljs-string">"4987654321098769"</span></span>,
"<span class="hljs-attribute">cardType</span>":<span class="hljs-value"><span class="hljs-string">"VISA"</span></span>,
"<span class="hljs-attribute">cardExpiry</span>":<span class="hljs-value"><span class="hljs-string">"0517"</span></span>,
"<span class="hljs-attribute">cardHolder</span>":<span class="hljs-value"><span class="hljs-string">"Mr John Smith"</span></span>,
"<span class="hljs-attribute">tokenReference</span>":<span class="hljs-value"><span class="hljs-string">"TokenReference"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>The store card details transaction processing method has the response outputs as described below.</p>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionResult</td>
<td>Details of the transaction.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardToken</td>
<td>The token of the newly stored card</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction. (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name entered into the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Card Details Exception</td>
<td>Card details passed do not pass card validation.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-online-eftpos-payment">Online EFTPOS Payment <a class="permalink" href="#header-online-eftpos-payment" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to send a payment request to a Customer using Online EFTPOS.</p>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Paymark issued Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  This is used on the Consumer’s bank statement and will be truncated at 12 characters. We recommend a maximum of 12 characters is used in this field.  Allowed: alphanumeric, space, hyphen.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>email</td>
<td>Email address for the Cardholder.  This field is for the Merchant’s use: Paymark Click does not send any information to the Cardholder for transactions done through the Merchant Hosted Transaction Processing API.  If not required, leave blank.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>payerId</td>
<td>Consumer’s personal identifier.  See payerIdType and bankId Mapping table below for allowed payer ID types.  See also <a href="#merchant-web-site-requirements">Merchant Web Site Requirements</a> for payerId validation rules.</td>
<td>Required</td>
<td>String</td>
<td>15</td>
</tr>
<tr>
<td>payerIdType</td>
<td>Defines the type of payerId that has been used.  See payerIdType and bankId Mapping table below for allowed payer ID types.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>bank</td>
<td>Consumer bank to which the payment request is sent.  See payerIdType and bankId Mapping table below for allowed banks.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p><strong>payerIdType and bankId Mapping</strong></p>
<p>Supported Consumer Banks are:</p>
<ul>
<li>
<p>ASB (bank = ASB)</p>
</li>
<li>
<p>Co-operative Bank (bank = COOPERATIVE)</p>
</li>
<li>
<p>Heartland (bank = HEARTLAND)</p>
</li>
<li>
<p>Westpac (bank = WESTPAC)</p>
</li>
</ul>
<p>Each Consumer Bank can allow different types as the payerIdType.  The table below shows what is allowed by each Consumer Bank (as specified in bankId).</p>
<table>
<thead>
<tr>
<th>Consumer Bank (bank)</th>
<th>Allowed Types (payerIdType)</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASB</td>
<td>MOBILE</td>
</tr>
<tr>
<td>COOPERATIVE</td>
<td>MOBILE, CUSTOMERID</td>
</tr>
<tr>
<td>HEARTLAND</td>
<td>MOBILE</td>
</tr>
<tr>
<td>WESTPAC</td>
<td>MOBILE, WESTPAC1ID</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/oepayment</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-number">700152</span></span>,
"<span class="hljs-attribute">amount</span>":<span class="hljs-value"><span class="hljs-number">10.00</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span></span>,
"<span class="hljs-attribute">payerId</span>": <span class="hljs-value"><span class="hljs-string">"0210123456"</span></span>,
"<span class="hljs-attribute">payerIdType</span>": <span class="hljs-value"><span class="hljs-string">"MOBILE"</span></span>,
"<span class="hljs-attribute">bank</span>": <span class="hljs-value"><span class="hljs-string">"ASB"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>Standard response outputs are detailed in the <a href="#header-outputs">Outputs</a> section.</p>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-outputs">Outputs <a class="permalink" href="#header-outputs" aria-hidden="true">¶</a></h2>
<p>Most of the transaction processing methods in this section have a standard set of response outputs as described below.  Note: The <a href="#header-store-card-details-without-issuer-validation">Store Card Details without Issuer Validation</a> method has a subset of response outputs.</p>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionResult</td>
<td>Details of the transaction.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionId</td>
<td>Paymark Click assigned unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>originalTransactionId</td>
<td>Used in refund, capture and cancellation transactions.  Contains the transaction ID for the related (authorisation or payment) transaction.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>Transaction type (PURCHASE, AUTHORISATION, STATUS_CHECK, OE_PAYMENT).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>accountId</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>batchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>receiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>authCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>surcharge</td>
<td>Surcharge amount, if a card surcharge has been enabled.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction. (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).  Will be “UNKNOWN” for an Online EFTPOS payment.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.  Will be empty for an Online EFTPOS payment.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.  Will be empty for an Online EFTPOS payment.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name entered into the secure payment page.  Will be empty for an Online EFTPOS payment.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardStored</td>
<td>Whether or not the card was stored: 0 = not stored, 1 = stored.  Will be false for an Online EFTPOS payment.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>cardToken</td>
<td>The token of the newly stored card, only available if the cardStored variable was set to 1 and the Cardholder chose to store their card details.  Will be NULL for an Online EFTPOS payment.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>errorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>errorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>acquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>6</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.  Will be NULL for an Online EFTPOS payment.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction. Only available if the merchantToken variable was set to 1.  Will be empty for an Online EFTPOS payment.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerId</td>
<td>Consumer’s personal identifier for Online EFTPOS payments.  Will be NULL for card transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>Type of payerId that was used.  Will be NULL for card transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>bank</td>
<td>Consumer bank to which the Online EFTPOS payment request was sent.  Will be NULL for card transactions.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
</section><section id="three-domain-secure" class="resource-group"><h2 class="group-heading">Three Domain Secure <a href="#three-domain-secure" class="permalink">&para;</a></h2><h2 id="header-overview-3">Overview <a class="permalink" href="#header-overview-3" aria-hidden="true">¶</a></h2>
<p>Three Domain Secure (3DS) is a payment card industry standard for authenticating a Cardholder performing an online purchase and is designed to provide greater online transaction security for both the Cardholder and the Merchant. It is marketed by Mastercard as “Mastercard Securecode” and by Visa as “Verified by Visa” (VbV).</p>
<img src="./click-images/3DS_logos.jpg">
<p>With 3DS transactions, a Cardholder may be asked to authenticate himself during an online transaction by entering Cardholder specific information, such as a pre-configured password or one time password, which is authenticated by the Cardholder’s Issuing Bank.</p>
<p>3DS also provides level of chargeback protection for participating Merchants under certain conditions.</p>
<h2 id="header-enabling-3ds">Enabling 3DS <a class="permalink" href="#header-enabling-3ds" aria-hidden="true">¶</a></h2>
<p>If you wish to enable 3DS, please contact your Acquirer Bank for 3DS enrolment. Your Acquirer Bank will complete your enrolment and send Paymark an activation notice with all the required information.</p>
<p>Please note, if you use 3DS your website and integration method must support the use of sessions and cookies. For some newer web browsers, this means you may not be able to host the payment page in an iFrame.</p>
<h2 id="header-3ds-with-standard-payment-integration">3DS with Standard Payment Integration <a class="permalink" href="#header-3ds-with-standard-payment-integration" aria-hidden="true">¶</a></h2>
<p>For Standard Payment integration, Click handles the entire flow of the 3DS process and no specific development is required for 3DS.</p>
<h2 id="header-3ds-with-direct-post-integration">3DS with Direct Post Integration <a class="permalink" href="#header-3ds-with-direct-post-integration" aria-hidden="true">¶</a></h2>
<p>For Direct Post integration, Click handles the flow of the 3DS process.  However, Cardholders will be redirected away from your website to the Issuing Bank’s authentication site to complete their card verification.  The Cardholder will then be redirected back to your site.  You need to make sure your website can handle this redirection in order for 3DS to work smoothly.</p>
<p><strong>How 3DS works with Direct Post</strong></p>
<img src="./click-images/direct_post_txn_flow_w_3DS.png" width="624">
<p>Between the <a href="#header-direct-post-request-result">Direct Post Request Result</a> and <a href="#header-post-payment-details">Post Payment Details</a> steps, the Merchant is sent a HTML payload that can be used to invoke the Cardholder redirection to the Issuer’s 3DS authentication flow (Issuer ACS).</p>
<h2 id="header-3ds-with-merchant-hosted-integration">3DS with Merchant Hosted Integration <a class="permalink" href="#header-3ds-with-merchant-hosted-integration" aria-hidden="true">¶</a></h2>
<p>3DS is not supported with Direct API integration via methods detailed under <a href="#merchant-hosted-transaction-processing">Merchant Hosted Transaction Processing</a>.  If you wish to implement this function, contact Paymark for further consultation.</p>
<h2 id="header-possible-errors-and-3ds-details">Possible Errors and 3DS Details <a class="permalink" href="#header-possible-errors-and-3ds-details" aria-hidden="true">¶</a></h2>
<p>For both Standard Payment integration and Direct Post integration, Click handles 3DS processing.  There are no additional inputs and outputs. Possible 3DS errors are detailed in error codes 270-272 under <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a>.</p>
<p>You can see 3DS information for any transaction under “Transactions Details” in the <a href="https://client.paymarkclick.co.nz/">Click Merchant Portal</a>.  You can see whether 3DS was used and what the authentication result was.</p>
<img src="./click-images/3DS_PortalTransactionDetails.png" width="624"></section><section id="retrieve-transaction" class="resource-group"><h2 class="group-heading">Retrieve Transaction <a href="#retrieve-transaction" class="permalink">&para;</a></h2><h2 id="header-overview-4">Overview <a class="permalink" href="#header-overview-4" aria-hidden="true">¶</a></h2>
<p>Once the transaction has been processed the results can be retrieved and validated using one of the methods described below.  Options are to retrieve the transaction by (Paymark) ID, or by (Merchant) reference or particular.</p>
<p>The Transaction Processing API is a RESTful API over HTTP, with a JSON payload.</p>
<h2 id="header-method-options-1">Method Options <a class="permalink" href="#header-method-options-1" aria-hidden="true">¶</a></h2>
<p><a href="">https://secure.paymarkclick.co.nz/api/transaction/search/&lt;transactionID&gt;</a></p>
<p><a href="">https://secure.paymarkclick.co.nz/api/transaction/search?startDate=&lt;startDate&gt;&amp;endDate=&lt;endDate&gt;&amp;reference=&lt;reference&gt;&amp;particular=&lt;particular&gt;&amp;clientAccountID=&lt;clientAccountID&gt;</a></p>
<p>Transaction requests should be sent as a GET web requests. Input data should be provided as part of the URL request. Once the request is received the input will be validated and, if successful, response will be returned in JSON format with body containing information for the requested transaction.</p>
<p>Authentication is achieved by passing an encoded username and password in the HTTP header in the incoming request.</p>
<p>If an error occurs, or if invalid data is submitted, a response is provided to the requester in the form of a URL that includes an error code and a description (where applicable).</p>
<h2 id="header-retrieve-transaction-by-transaction-id">Retrieve Transaction by Transaction ID <a class="permalink" href="#header-retrieve-transaction-by-transaction-id" aria-hidden="true">¶</a></h2>
<p><strong>Input</strong></p>
<p>Transaction ID is passed in as part of the URL and no other inputs are required for the request.</p>
<p>Example:</p>
<pre><code><span class="hljs-request">GET <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/search/P170310001234567</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>
</span></span></code></pre>
<p><strong>Result Options</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>200 with body containing output elements below.</td>
</tr>
<tr>
<td>Failure</td>
<td>See exceptions and errors below.</td>
</tr>
</tbody>
</table>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionId</td>
<td>Paymark Click defined unique transaction ID for this transaction.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>originalTransactionId</td>
<td>Used in refund, capture and cancellation transactions.  Contains the transaction ID for the related (authorisation or payment) transaction.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>Transaction type (PURCHASE, AUTHORISATION, STATUS_CHECK, REFUND, CAPTURE, CANCELLATION, OE_PAYMENT).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>accountId</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>batchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>receiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>authCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>surcharge</td>
<td>If the Merchant has added a surcharge % to this transaction, this is the surcharge amount for this transaction.  Note: Contact Paymark to configure a surcharge for your Merchant account.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name entered into the Paymark Click hosted web payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardStored</td>
<td>Whether or not the card was stored, false = not stored, true = stored. Will always be false for Online EFTPOS payments.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>cardToken</td>
<td>Payment token ID if a payment (or card) token was used for this transaction and the payment method associated with this token is a card.  Note: The Merchant can use the Merchant Portal to see payment token details when the payment method (associated with the token) is Online EFTPOS.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>errorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>errorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>acquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the payment (or card) token used in this transaction, if the payment method associated with this token is a card.  Note: The Merchant can use the Merchant Portal to see payment token details when the payment method (associated with the token) is Online EFTPOS.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction.  Only available if the merchantToken variable was set to 1.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerId</td>
<td>Consumer’s personal identifier for Online EFTPOS payments.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>Type of payerId that was used for Online EFTPOS payments.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>bank</td>
<td>Consumer bank to which the Online EFTPOS payment request was sent.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Errors and Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>HTTP Response Code</strong></th>
<th><strong>Error Number</strong></th>
<th><strong>Error Message</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>404 Not Found</td>
<td>5019</td>
<td>Transaction not found.</td>
</tr>
<tr>
<td>401 Unauthorised</td>
<td>3000</td>
<td>Authentication error. Username and/or Password are incorrect.</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>-1</td>
<td>Unspecified error, contact Paymark.</td>
</tr>
</tbody>
</table>
<h2 id="header-search-for-transactions">Search for Transactions <a class="permalink" href="#header-search-for-transactions" aria-hidden="true">¶</a></h2>
<p><strong>Input Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>startDate</td>
<td>Starting date and time of transaction date to be included in the search result, inclusive. Date range cannot be more than 1 year.</td>
<td>Required</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>endDate</td>
<td>Ending date and time of transaction date to be included in the search result, inclusive.    Date range cannot be more than 1 year.</td>
<td>Required</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Reference value which transaction reference should match exactly to be included in the result.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Particular value which transaction reference should match exactly to be included in the result.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>clientAccountId</td>
<td>Client Account ID under which transaction should be searched for. If empty, method will search for all transactions under the merchant.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code>GET https:<span class="hljs-comment">//secure.paymarkclick.co.nz/api/transaction/search?</span>
    startDate=<span class="hljs-number">2017</span>-<span class="hljs-number">08</span>-<span class="hljs-number">01</span>T00:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&amp;
    endDate=<span class="hljs-number">2017</span>-<span class="hljs-number">08</span>-<span class="hljs-number">02</span>T00:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&amp;
    reference=Click-Test-Reference&amp;
    particular=Click-Test-Particular&amp;
    clientAccountId=<span class="hljs-number">7012345</span>
    HTTP/<span class="hljs-number">1.1</span>

Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=

Content-Type: application/json</code></pre>
<p><strong>Result Options</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>200 with body containing up to 100 transactions. For each returned transaction, details are the same as the output fields documented in <a href="#header-retrieve-transaction-by-transaction-id">Retrieve transaction by Transaction ID</a>, ordered by transaction date in descending order. Note if search result covers more than 100 records, only the latest 100 records are returned. Therefore, an appropriate combination of parameters should be considered to restrict the search range.</td>
</tr>
<tr>
<td>Failure</td>
<td>See exceptions and errors below.</td>
</tr>
</tbody>
</table>
<p><strong>Possible Errors and Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>HTTP Response Code</strong></th>
<th><strong>Error Number</strong></th>
<th><strong>Error Message</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>400 Bad Request</td>
<td>7004</td>
<td>Start date cannot be greater than End date, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>7005</td>
<td>Date range greater than 1 year, please restrict the date range, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>7002</td>
<td>Reference cannot contain more than 50 characters, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>5019</td>
<td>Particular cannot contain more than 50 characters, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>6023</td>
<td>Client Account ID provided is not valid.</td>
</tr>
<tr>
<td>401 Unauthorised</td>
<td>3000</td>
<td>Authentication error. Username and/or Password are incorrect.</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>-1</td>
<td>Unspecified error, contact Paymark.</td>
</tr>
</tbody>
</table>
</section><section id="capture-transaction" class="resource-group"><h2 class="group-heading">Capture Transaction <a href="#capture-transaction" class="permalink">&para;</a></h2><h2 id="header-overview-5">Overview <a class="permalink" href="#header-overview-5" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/transaction/">https://secure.paymarkclick.co.nz/api/transaction/</a></p>
<p>The Transaction Processing API allows a Merchant to capture (receive funds for) a previously created successful card authorisation transaction.</p>
<p>The Transaction Processing API is a RESTful API over HTTP, with a JSON payload.</p>
<h2 id="header-capture-transaction-1">Capture Transaction <a class="permalink" href="#header-capture-transaction-1" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to capture the funds from a previously made, successful, card authorisation transaction. In order to perform a capture you will need to pass the original (authorisation) transaction ID and the amount to capture. This can be less than or equal to, but never more than, than the original authorisation transaction amount.</p>
<p>See also:</p>
<ul>
<li>
<p><a href="#paymark-hosted-standard-payment">Standard Payment</a></p>
</li>
<li>
<p><a href="#direct-post">Direct Post</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-card-details">Authorisation transaction with card details</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-payment-(or-card)-token">Authorisation transaction with card token</a></p>
</li>
</ul>
<p>Notes:</p>
<ul>
<li>
<p>All authorisations need to be finalised, either through a capture or a <a href="#cancellation-transaction">cancellation</a>.</p>
</li>
<li>
<p>If an authorisation has already been cancelled, it cannot be captured.</p>
</li>
</ul>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>originalTransactionId</td>
<td>The Paymark transaction ID of the authorisation transaction to be captured.  Alphanumeric format.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>conditionIndicator</td>
<td>Indicates whether this is the last capture to be performed against the authorisation (“final”), or whether additional capture transactions are expected (“partial”).  Designed for cases the order is fulfilled in parts, and the Customer is charged as each part is fulfilled.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>email</td>
<td>Email address to send receipt to.  If not required, leave blank.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/capture</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">originalTransactionId</span>":<span class="hljs-value"><span class="hljs-string">"P160110000014131"</span></span>,
"<span class="hljs-attribute">amount</span>":<span class="hljs-value"><span class="hljs-number">10.00</span></span>,
"<span class="hljs-attribute">conditionIndicator</span>":<span class="hljs-value"><span class="hljs-string">"final"</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionResult</td>
<td>Details of the transaction.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionId</td>
<td>Paymark Click assigned unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>originalTransactionId</td>
<td>Contains the transaction ID of the initial transaction, only populated in a capture, refund or cancellation transaction.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>Transaction type (CAPTURE).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>accountId</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>batchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>receiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>authCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>surcharge</td>
<td>Surcharge amount, if a card surcharge has been enabled.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction. (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name entered into the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardStored</td>
<td>Whether or not the card was stored: 0 = not stored, 1 = stored.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>cardToken</td>
<td>Payment token ID if a payment (or card) token was used for this transaction and the payment method associated with this token is a card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>errorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>errorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>acquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>6</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the payment (or card) token used in this transaction, if the payment method associated with this token is a card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction. Only available if the merchantToken variable was set to 1.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerId</td>
<td>Not applicable for capture transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>Not applicable for capture transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>bank</td>
<td>Not applicable for capture transactions.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Payment Details Exception</td>
<td>Capture transaction details do not pass validation.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
</section><section id="cancellation-transaction" class="resource-group"><h2 class="group-heading">Cancellation Transaction <a href="#cancellation-transaction" class="permalink">&para;</a></h2><h2 id="header-overview-6">Overview <a class="permalink" href="#header-overview-6" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/transaction/">https://secure.paymarkclick.co.nz/api/transaction/</a></p>
<p>The Transaction Processing API allows a Merchant to cancel a card authorisation when this authorisation is no longer needed and the funds will never be captured.</p>
<p>The Transaction Processing API is a RESTful API over HTTP, with a JSON payload.</p>
<h2 id="header-cancellation-transaction-1">Cancellation Transaction <a class="permalink" href="#header-cancellation-transaction-1" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to cancel a previously made, successful, authorisation transaction that is no longer required, for example, because the order cannot be fulfilled.  All authorisations need to be finalised, either through a <a href="#capture-transaction">Capture</a> or a cancellation.  In order to perform a cancellation you will need to pass the original (authorisation) transaction ID.</p>
<p>Note: If an authorisation has already been captured, it cannot be cancelled.</p>
<p>See also:</p>
<ul>
<li>
<p><a href="#paymark-hosted-standard-payment">Standard Payment</a></p>
</li>
<li>
<p><a href="#direct-post">Direct Post</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-card-details">Authorisation transaction with card details</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-payment-(or-card)-token">Authorisation transaction with card token</a></p>
</li>
</ul>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>originalTransactionId</td>
<td>The Paymark transaction ID of the authorisation transaction to be captured.  Alphanumeric format.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/cancellation</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">originalTransactionId</span>":<span class="hljs-value"><span class="hljs-string">"P160110000014131"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionResult</td>
<td>Details of the transaction.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionId</td>
<td>Paymark Click assigned unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>originalTransactionId</td>
<td>Contains the transaction ID of the initial transaction, only populated in a capture, refund or cancellation transaction.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>Transaction type (CANCELLATION).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>accountID</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>batchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>receiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>authCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction. (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name entered into the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardStored</td>
<td>Whether or not the card was stored: 0 = not stored, 1 = stored.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>cardToken</td>
<td>Payment token ID if a payment (or card) token was used for this transaction and the payment method associated with this token is a card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>errorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>errorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>acquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>6</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the payment (or card) token used in this transaction, if the payment method associated with this token is a card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction. Only available if the merchantToken variable was set to 1.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerId</td>
<td>Not applicable for cancellation transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>Not applicable for cancellation transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>bank</td>
<td>Not applicable for cancellation transactions.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Payment Details Exception</td>
<td>Cancellation transaction details do not pass validation.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
</section><section id="refund-transaction" class="resource-group"><h2 class="group-heading">Refund Transaction <a href="#refund-transaction" class="permalink">&para;</a></h2><h2 id="header-overview-7">Overview <a class="permalink" href="#header-overview-7" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/transaction/">https://secure.paymarkclick.co.nz/api/transaction/</a></p>
<p>The Transaction Processing API allows a Merchant to refund a previously created successful purchase or capture transaction.</p>
<p>The Transaction Processing API is a RESTful API over HTTP, with a JSON payload.</p>
<h2 id="header-refund-transaction-1">Refund Transaction <a class="permalink" href="#header-refund-transaction-1" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to refund a previously made, successful, purchase or capture transaction. In order to perform a refund you will need to pass the original transaction ID and the amount to refund. This can be less than or equal to, but never more than, than the original purchase or capture transaction amount.  Note: You should only attempt to refund a transaction that is less than six months old: there may be issues with the correct Cardholder receiving funds for transactions older than six months.</p>
<p>See also:</p>
<ul>
<li>
<p><a href="#paymark-hosted-standard-payment">Standard Payment</a></p>
</li>
<li>
<p><a href="#direct-post">Direct Post</a></p>
</li>
<li>
<p><a href="#header-purchase-with-card-details">Purchase transaction with card details</a></p>
</li>
<li>
<p><a href="#header-purchase-with-payment-(or-card)-token">Purchase transaction with card token</a></p>
</li>
<li>
<p><a href="#header-online-eftpos-payment">Payment transaction using Online EFTPOS</a></p>
</li>
<li>
<p><a href="#capture-transaction">Capture transaction</a></p>
</li>
</ul>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>originalTransactionId</td>
<td>The Paymark transaction ID of the transaction to refund.  Alphanumeric format.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>email</td>
<td>Email address to send receipt to.  If not required, leave blank.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/refund</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">originalTransactionId</span>":<span class="hljs-value"><span class="hljs-string">"P160110000014131"</span></span>,
"<span class="hljs-attribute">amount</span>":<span class="hljs-value"><span class="hljs-number">10.00</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionResult</td>
<td>Details of the transaction.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionId</td>
<td>Paymark Click assigned unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>originalTransactionId</td>
<td>Contains the transaction ID of the initial transaction, only populated in a capture, refund or cancellation transaction.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>Transaction type (REFUND).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>accountId</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>batchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>receiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>authCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>surcharge</td>
<td>Surcharge amount, if a card surcharge has been enabled.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction. (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name entered into the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardStored</td>
<td>Whether or not the card was stored: 0 = not stored, 1 = stored.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>cardToken</td>
<td>Payment token ID if a payment (or card) token was used for this transaction and the payment method associated with this token is a card.  Note: The Merchant can use the Merchant Portal to see payment token details when the payment method (associated with the token) is Online EFTPOS.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>errorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>errorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>acquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>6</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the payment (or card) token used in this transaction, if the payment method associated with this token is a card.  Note: The Merchant can use the Merchant Portal to see payment token details when the payment method (associated with the token) is Online EFTPOS.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction. Only available if the merchantToken variable was set to 1.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerId</td>
<td>Consumer’s personal identifier for Online EFTPOS payments.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>Type of payerId that was used.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>bank</td>
<td>Consumer bank to which the Online EFTPOS payment request was sent.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Payment Details Exception</td>
<td>Refund transaction details do not pass validation.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
</section><section id="payment-token-transaction-processing" class="resource-group"><h2 class="group-heading">Payment Token Transaction Processing <a href="#payment-token-transaction-processing" class="permalink">&para;</a></h2><h2 id="header-overview-8">Overview <a class="permalink" href="#header-overview-8" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/transaction/">https://secure.paymarkclick.co.nz/api/transaction/</a></p>
<p>Click supports two types of tokens for financial transactions:</p>
<ul>
<li>
<p>Payment token, which supports multiple payment methods, including card payments and Online EFTPOS payments.</p>
</li>
<li>
<p>Card token, a deprecated feature than can be used for cards only.</p>
</li>
</ul>
<p>This section covers both types of tokens, and the functions available with each.  If building a new integration with Click, we recommend using payment tokens to build longevity into your integration.</p>
<p>The Token Processing API allows a Merchant to use payment (card or Online EFTPOS) tokens to process transactions.  A payment token allows Merchants to initiate a payment without requiring the Cardholder to enter any additional information (for card tokens), or Account Holder to approve the payment (for Online EFTPOS tokens).</p>
<p>A payment token can be created using the Paymark Click hosted web payment page (using the <a href="#paymark-hosted-standard-payment">Standard Payment</a> integration model).  A payment token can be created for both card and Online EFTPOS payment methods.  Cards that can be tokenised are: Visa, MasterCard, American Express, Diners Club and Q Card cards.</p>
<p>A card token may also be created through a <a href="#direct-post">Direct Post</a> or <a href="#merchant-hosted-transaction-processing">Merchant Hosted</a> payment page, the <a href="#ivr-payments">Click IVR</a>, or the <a href="https://client.paymarkclick.co.nz/">Click Merchant Portal</a>.</p>
<p>This token processing feature can also be built into systems to create an automated, flexible processing system to suit business processes, for example, billing cycles.</p>
<p>This function is implemented by encrypting the payment details via an initial transaction and assigning it a unique token number which can then be used to process future transactions.</p>
<p>For information on managing existing payment or card tokens, see the <a href="#manage-payment-and-card-tokens">Manage Tokens</a> section.</p>
<p>The Token Processing API is a RESTful API over HTTP, with a JSON payload.</p>
<h2 id="header-method-options-2">Method Options <a class="permalink" href="#header-method-options-2" aria-hidden="true">¶</a></h2>
<p>This API offers the following methods to process token transactions:</p>
<ul>
<li>
<p><a href="#header-purchase-with-payment-(or-card)-token">Purchase transaction with payment (or card) token</a></p>
</li>
<li>
<p><a href="#header-authorisation-with-payment-(or-card)-token">Authorisation transaction with payment (or card token)</a> (cards only)</p>
</li>
</ul>
<h2 id="header-purchase-with-payment-(or-card)-token">Purchase with Payment (or Card) Token <a class="permalink" href="#header-purchase-with-payment-(or-card)-token" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to make a purchase transaction using previously stored payment method data. To use this method, the Merchant must have already stored the payment method with Paymark and have an existing payment (or card) token.</p>
<p><strong>Input Fields</strong></p>
<p>The token identifier to be charged is passed in as part of the URL.  The following table shows the other input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Paymark issued Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>email</td>
<td>Email address to send receipt to.  If not required, leave blank.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionFrequency</td>
<td>Applies to tokens created for card payments.  Indicates whether this is a single or a recurring transaction. If not passed in or empty, it will take the default frequency from the Paymark Click account setting.  Set to “Single” when charging a saved card, for example, the Customer has previously opted to save their Card then chooses to use this for a later purchase.  For a Merchant initiated regular repeat purchase, for example, a magazine subscription, use “Recurring”.  Allowed: “Single”, “Recurring” or empty string i.e. “”.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/purchase/OE.1234567890</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-number">700152</span></span>,
"<span class="hljs-attribute">amount</span>":<span class="hljs-value"><span class="hljs-number">10.00</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span>
</span>}
</span></span></span></code></pre>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/purchase/6971410</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-number">700152</span></span>,
"<span class="hljs-attribute">amount</span>":<span class="hljs-value"><span class="hljs-number">10.00</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span></span>,
"<span class="hljs-attribute">transactionFrequency</span>":<span class="hljs-value"><span class="hljs-string">"Single"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>Standard response outputs are detailed in the <a href="#header-outputs-1">Outputs</a> section.</p>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Card Token Exception</td>
<td>The card token passed is not found or is invalid.  This manifests as a REST exception 400.</td>
</tr>
<tr>
<td>Payment Details Exception</td>
<td>Payment details do not pass validation.</td>
</tr>
<tr>
<td>OE Autopay Token Not Found</td>
<td>Merchant has attempted a transaction using a token ID that has been removed in Click.  The Merchant should delete their record of this token.  C.f. <a href="#online-eftpos-autopay">Online EFTPOS Autopay Transaction Flow</a>.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-authorisation-with-payment-(or-card)-token">Authorisation with Payment (or Card) Token <a class="permalink" href="#header-authorisation-with-payment-(or-card)-token" aria-hidden="true">¶</a></h2>
<p>This method allows Merchants to make an authorisation transaction using previously stored card data. To use this method, the Merchant must have already stored the card with Paymark and have an existing payment (or card) token.</p>
<p><strong>Input Fields</strong></p>
<p>The card token identifier (for the card to be authorised) is passed in as part of the URL.  The following table shows the other input fields that can be posted to the Transaction Processing API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Paymark issued Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>amount</td>
<td>The transaction amount in NZD. Must be a positive value.</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>email</td>
<td>Email address to send receipt to.  If not required, leave blank.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionFrequency</td>
<td>Indicates whether this is a single or a recurring transaction. If not passed in or empty, it will take the default frequency from the Paymark Click account setting.  Set to “Single” when charging a saved card, for example, the Customer has previously opted to save their Card then chooses to use this for a later purchase.  For a Merchant initiated regular repeat purchase, for example, a magazine subscription, use “Recurring”.  If not passed in or empty, it will take the default frequency from the Paymark Click account setting.  Allowed: “Single”, “Recurring” or empty string i.e. “”.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/transaction/authorisation/6971410</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-number">700152</span></span>,
"<span class="hljs-attribute">amount</span>":<span class="hljs-value"><span class="hljs-number">10.00</span></span>,
"<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
"<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span></span>,
"<span class="hljs-attribute">transactionFrequency</span>":<span class="hljs-value"><span class="hljs-string">"Single"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>Standard response outputs are detailed in the <a href="#header-outputs-1">Outputs</a> section.</p>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Card Token Exception</td>
<td>The card token passed is not found or is invalid.  This manifests as a REST exception 400.</td>
</tr>
<tr>
<td>Payment Details Exception</td>
<td>Authorisation details do not pass validation.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-outputs-1">Outputs <a class="permalink" href="#header-outputs-1" aria-hidden="true">¶</a></h2>
<p>All token transaction processing methods have a standard set of response outputs as described below.</p>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionResult</td>
<td>Details of the transaction.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionId</td>
<td>Paymark Click assigned unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>originalTransactionId</td>
<td>Used in refund, capture and cancellation transactions.  Contains the transaction ID for the related (authorisation or payment) transaction.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>Transaction type (PURCHASE, AUTHORISATION).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>accountId</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>batchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>receiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>authCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>surcharge</td>
<td>Surcharge amount, if a card surcharge has been enabled.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction. (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name entered into the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardStored</td>
<td>Whether or not the card was stored: 0 = not stored, 1 = stored.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>cardToken</td>
<td>Payment token ID if a payment (or card) token was used for this transaction and the payment method associated with this token is a card.  Note: The Merchant can use the Merchant Portal to see payment token details when the payment method (associated with the token) is Online EFTPOS.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>errorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>errorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>acquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>6</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the payment (or card) token used in this transaction, if the payment method associated with this token is a card.  Note: The Merchant can use the Merchant Portal to see payment token details when the payment method (associated with the token) is Online EFTPOS.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction. Only available if the merchantToken variable was set to 1.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerId</td>
<td>Will be NULL for card token transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>Will be NULL for card token transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>bank</td>
<td>Will be NULL for card token transactions.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
</section><section id="manage-payment-and-card-tokens" class="resource-group"><h2 class="group-heading">Manage Payment and Card Tokens <a href="#manage-payment-and-card-tokens" class="permalink">&para;</a></h2><h2 id="header-overview-9">Overview <a class="permalink" href="#header-overview-9" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/token/payment">https://secure.paymarkclick.co.nz/api/token/payment</a><br>
<a href="https://secure.paymarkclick.co.nz/api/token/card">https://secure.paymarkclick.co.nz/api/token/card</a></p>
<p>A payment token is ideal for websites or services that need to securely store payment details for future purchases or recurring billing purposes.  See also <a href="#token-transaction-processing">Token Transaction Processing</a>.</p>
<p>The Token Management API is available for managing existing stored tokens: payment method details (card and Online EFTPOS) can be retrieved, details for card tokens can be updated, and card tokens can be removed.</p>
<p>The Token Management API is a RESTful API over HTTP, with a JSON payload.</p>
<h2 id="header-method-options-3">Method Options <a class="permalink" href="#header-method-options-3" aria-hidden="true">¶</a></h2>
<p>This API offers the following methods to manage card tokens:</p>
<ul>
<li>
<p><a href="#header-retrieve-payment-method-details-using-payment-token">Retrieve payment method details using payment token</a></p>
</li>
<li>
<p><a href="#header-retrieve-card-details-using-card-token">Retrieve card details using card token</a></p>
</li>
<li>
<p><a href="#header-retrieve-payment-method-details-using-token-reference">Retrieve payment method details using token reference</a></p>
</li>
<li>
<p><a href="#header-retrieve-card-details-using-token-reference">Retrieve card details using token reference</a></p>
</li>
<li>
<p><a href="#header-update-card-token-information">Update card token information</a> (for card tokens only)</p>
</li>
<li>
<p><a href="#header-remove-a-card-token">Remove a card token</a> (for card tokens only)</p>
</li>
</ul>
<h2 id="header-retrieve-payment-method-details-using-payment-token">Retrieve Payment Method Details Using Payment Token <a class="permalink" href="#header-retrieve-payment-method-details-using-payment-token" aria-hidden="true">¶</a></h2>
<p>This method provides the functionality to retrieve the details of a stored payment method (card or Online EFTPOS) using the token identifier.</p>
<p>Only partial details for the payment method will be retrieved, and this is not sufficient to perform a transaction. The purpose of this method is for information only.</p>
<p><strong>Input Fields</strong></p>
<p>The token identifier is passed in as part of the URL.</p>
<p>Example:</p>
<pre><code><span class="hljs-request">GET <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/payment/OE.1234567890</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>
</span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>tokenType</td>
<td>Indicates the payment method this token is for.  Options are CARD and OE.</td>
<td>String</td>
<td>N/a</td>
</tr>
<tr>
<td>token</td>
<td>Token identifier.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored payment token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenDetails</td>
<td>Details of the payment method. See table below for UDT structure.</td>
<td>UDT</td>
<td>N/a</td>
</tr>
</tbody>
</table>
<p><strong>Token Details for Card Payment Method</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name initially collected from the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Token Details for Online EFTPOS Payment Method</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>payerId</td>
<td>Consumer’s personal identifier (with the bank).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>bank</td>
<td>Consumer bank this payment token is for.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>The type of payerId that has been used, for example, mobile number.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Token Not Found</td>
<td>The payment token passed in is not found or is invalid.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-retrieve-card-details-using-card-token">Retrieve Card Details Using Card Token <a class="permalink" href="#header-retrieve-card-details-using-card-token" aria-hidden="true">¶</a></h2>
<p>This method provides the functionality to retrieve the details of a stored card using the token identifier, when the card was stored using the “store card” method.</p>
<p>Only partial details for the card will be retrieved, and this is not sufficient to perform a transaction. The purpose of this method is for information only.</p>
<p><strong>Input Fields</strong></p>
<p>The token identifier is passed in as part of the URL.</p>
<p>Example:</p>
<pre><code><span class="hljs-request">GET <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/card/6971410</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>
</span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardDetails</td>
<td>Details of the card.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardToken</td>
<td>Token identifier for the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name initially collected from the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
<tr>
<td>Card Token Not Found</td>
<td>The card token passed in was not found or is invalid.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-retrieve-payment-method-details-using-token-reference">Retrieve Payment Method Details Using Token Reference <a class="permalink" href="#header-retrieve-payment-method-details-using-token-reference" aria-hidden="true">¶</a></h2>
<p>This method retrieves the details of all stored payment methods with the token reference that matches the parameter passed.  The token type (card or OE) may be passed as an optional parameter.</p>
<p>Only partial information is returned, and this is not sufficient to perform a transaction. The purpose of this method is for information only.</p>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Token Management API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>tokenReference</td>
<td>URL encoded value of the token reference the returned tokens must have.  This is not case sensitive.  If left empty, payment tokens with no token reference will be returned.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>tokenType</td>
<td>The type of payment token to be searched: CARD or OE.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>startDate</td>
<td>Earliest date the token was created (inclusive of datetime specified).</td>
<td>Optional</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>endDate</td>
<td>Latest date the token was created (inclusive of datetime specified).</td>
<td>Optional</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">GET <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/payment/?tokenReference=TokenReference&amp;tokenType=OE</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>
</span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>tokenDetails Array</td>
<td>Details of the payment tokens with this token reference.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>tokenType</td>
<td>Indicates the payment method this token is for.  Options are CARD and OE.</td>
<td>String</td>
<td>N/a</td>
</tr>
<tr>
<td>token</td>
<td>Token identifier.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored payment token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenDetails</td>
<td>Details of the payment method. See table below for UDT structure.</td>
<td>UDT</td>
<td>N/a</td>
</tr>
</tbody>
</table>
<p><strong>Token Details for Card Payment Method</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name initially collected from the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Token Details for Online EFTPOS Payment Method</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>payerId</td>
<td>Consumer’s personal identifier (with the bank).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>bank</td>
<td>Consumer bank this payment token is for.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>The type of payerId that has been used, for example, mobile number.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-retrieve-card-details-using-token-reference">Retrieve Card Details Using Token Reference <a class="permalink" href="#header-retrieve-card-details-using-token-reference" aria-hidden="true">¶</a></h2>
<p>This method provides the functionality to retrieve the details of all stored cards with the token reference that matches the parameter passed, when the cards were stored using the “store card” method.</p>
<p>Only partial information is returned, and this is not sufficient to perform a transaction. The purpose of this method is for information only.</p>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Token Management API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>tokenReference</td>
<td>URL encoded value of the token reference the returned cards must have. This is not case sensitive.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">GET <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/card/?tokenReference=TokenReference</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>
</span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardDetails Array</td>
<td>Details of the cards with this token reference.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardToken</td>
<td>Token identifier for the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name initially collected from the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service is not available to you.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-update-card-token-information">Update Card Token Information <a class="permalink" href="#header-update-card-token-information" aria-hidden="true">¶</a></h2>
<p>This method allows selected information for existing tokenised cards to be updated. The token of the card should be passed in to locate the card.  This method is only available for tokens created using the “store card” method.  Payment tokens cannot be used with this method.</p>
<p>The card attributes that can be updated are:</p>
<ul>
<li>
<p>Card expiry date</p>
</li>
<li>
<p>Card token reference</p>
</li>
<li>
<p>Name on the card</p>
</li>
</ul>
<p>The response will return the current value after any update made to the token.</p>
<p>Note: The CVV is not required when the card expiry date is updated.</p>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Token Management API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardToken</td>
<td>Token of the card to be found.  In numeric format.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>Required</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardHolder</td>
<td>Cardholder name that appears on the card, for example, Mr John Smith.  Allowed: alphanumeric, spaces, special characters ’   -</td>
<td>Optional</td>
<td>String</td>
<td>256</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">PUT <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/card/6971410</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
"<span class="hljs-attribute">cardToken</span>": <span class="hljs-value"><span class="hljs-string">"6971410"</span></span>,
"<span class="hljs-attribute">cardExpiry</span>": <span class="hljs-value"><span class="hljs-string">"0519"</span></span>,
"<span class="hljs-attribute">cardHolder</span>": <span class="hljs-value"><span class="hljs-string">"Mr Jonathan Smith"</span></span>,
"<span class="hljs-attribute">tokenReference</span>": <span class="hljs-value"><span class="hljs-string">"NewTokenReference"</span>
</span>}
</span></span></span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardDetails</td>
<td>Details of the card.  See table below for UDT structure.</td>
<td>UDT</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cardToken</td>
<td>Token identifier for the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined reference associated with the stored card token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name initially collected from the secure payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service or method is not available.</td>
</tr>
<tr>
<td>Card Token Not Found</td>
<td>The card token passed is not found or is invalid.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
<h2 id="header-remove-a-card-token">Remove a Card Token <a class="permalink" href="#header-remove-a-card-token" aria-hidden="true">¶</a></h2>
<p>This method removes the details of a previously stored card, by using the token value. The card details will be removed completely, with no way of reinstating them.  This method is only available for tokens created using the “store card” method.  Payment tokens cannot be used with this method.</p>
<p><strong>Input Fields</strong></p>
<p>The token identifier is passed in as part of the URL.</p>
<p>Example:</p>
<pre><code><span class="hljs-request">DELETE <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/card/6971410</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>
</span></code></pre>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>Card token found and removed successfully.</td>
<td>Status code 204 with empty message.</td>
</tr>
<tr>
<td>Failure</td>
<td>Card token not found.</td>
<td>Card Token Exception.</td>
</tr>
</tbody>
</table>
<p><strong>Possible Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>Exception</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Authorization Exception</td>
<td>Username and password are not correct or the web service or method is not available.</td>
</tr>
<tr>
<td>Card Token Not Found</td>
<td>The card token passed is not found or is invalid.</td>
</tr>
</tbody>
</table>
<p>For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</p>
</section><section id="shopify-plugin" class="resource-group"><h2 class="group-heading">Shopify Plugin <a href="#shopify-plugin" class="permalink">&para;</a></h2><h2 id="header-overview-10">Overview <a class="permalink" href="#header-overview-10" aria-hidden="true">¶</a></h2>
<p>Click supports integration with Shopify.  This section describes how to configure this plugin.</p>
<h2 id="header-set-up-integration">Set Up Integration <a class="permalink" href="#header-set-up-integration" aria-hidden="true">¶</a></h2>
<p><strong>Before you start:</strong> You need to have an active Shopify store to be able to access the integration plugin.</p>
<ol>
<li>
<p>Ensure the <a href="#header-two-return-options">Click return option</a> is set to “Post to Return URL”.  Note: This setting ensures your Customers return to your Shopify store once they have completed payment and you receive notification of the transaction.
<br>
<br></p>
</li>
<li>
<p>Access the <a href="https://www.shopify.com/login?redirect=authorize_gateway%2F1030843">Click Shopify plugin</a>.
<br>
<br></p>
</li>
<li>
<p>The link will lead you to the login page. Login to your existing Shopify store.</p>
</li>
</ol>
<img src="./click-images/Shopify2.png">
<ol start="4">
<li>After logging in you will see the page prompting you to install Click.  Select the button “Install payment provider”.</li>
</ol>
<img src="./click-images/Shopify3.png" width="624">
<ol start="5">
<li>You will be directed to the “Payments” settings page.  Select the “Edit” button in the “Paymark Click” section.</li>
</ol>
<img src="./click-images/Shopify4.png" width="624">
<ol start="6">
<li>The section will expand.  Enter the following fields:</li>
</ol>
<ul>
<li>
<p>Use test mode: Check this option to integrate to a Click test (demo) account. By using a Click demo account, you can test your integration without moving any real money.  All transactions will be passed through the Click payment simulator.  Uncheck this to integrate to a Click Production account.
<br></p>
</li>
<li>
<p>ClientID:AccountID: You can find the Client ID and Account ID in your Merchant activation email.  Note: If you are using test mode, use the “Test Merchant Activation” email.  If you are integrating to Production, use the “Production Merchant Activation” email.  Be careful to enter information into the ClientID:AccountID field in the correct format, for example, 123456:987654.
<br></p>
</li>
<li>
<p>Secret Hash Key: You can find the Secret Hash Key in the Click Merchant Portal.  Go to “Web Payments”, and then “Integration Settings”.  You will see the Secret Hash Key listed under the “Secret Hash Key” section.  Log in to the portal using the Username and Password credentials shown in the upper section of the activation email.  To access the Merchant Portal, go to <a href="https://client.paymarkclick.co.nz/">https://client.paymarkclick.co.nz/</a> (or for a test account, <a href="https://clientuat.paymarkclick.co.nz/">https://clientuat.paymarkclick.co.nz/</a>).  Notes: This is not the API Password (shown separately in the Merchant Portal).  If you are using test mode, use the “Test Merchant Activation” email.  If you are integrating to Production, use the “Production Merchant Activation” email.
<br></p>
</li>
<li>
<p>Select the payment methods you have been set up with.  Note: It is important to only select those you have loaded with Paymark.  If you attempt a transaction with another payment method your Customer will see an error.  To check what is loaded you can contact Paymark on 0800 PAYMARK.
<br></p>
</li>
</ul>
<p><strong>Shopify payments settings page:</strong><br>
<img src="./click-images/Shopify5a.png" width="624"></p>
<p><strong>Activation email:</strong><br>
<img src="./click-images/Shopify5b.png"></p>
<p><strong>Merchant Portal:</strong><br>
<img src="./click-images/Shopify5c.png" width="624"></p>
<ol start="7">
<li>
<p>After entering all Paymark Click settings, select the “Save” button.
<br>
<br></p>
</li>
<li>
<p>You will now see the checkout process with Click as a payment option.  After completing the order, your customers can pay using the Click hosted payment page.</p>
</li>
</ol>
<img src="./click-images/Shopify7a.png" width="624">
<img src="./click-images/Shopify7b.png" width="624"></section><section id="reporting-service" class="resource-group"><h2 class="group-heading">Reporting Service <a href="#reporting-service" class="permalink">&para;</a></h2><h2 id="header-overview-11">Overview <a class="permalink" href="#header-overview-11" aria-hidden="true">¶</a></h2>
<p><a href="https://secure.paymarkclick.co.nz/api/report/transaction">https://secure.paymarkclick.co.nz/api/report/transaction</a></p>
<p>By using the reporting service, Merchants can query and obtain a list of transactions that meet the input criteria.</p>
<p>The Reporting Service API is a RESTful API over HTTP, with a JSON payload.</p>
<h2 id="header-method-options-4">Method Options <a class="permalink" href="#header-method-options-4" aria-hidden="true">¶</a></h2>
<p>Requests should be sent as a GET web requests. Input data should be provided as part of the URL request. Once the request is received the input will be validated and, if successful, response will be returned in JSON format with body containing information for the requested transactions.</p>
<p>Authentication is achieved by passing an encoded username and password in the HTTP header in the incoming request.</p>
<p>If an error occurs, or if invalid data is submitted, a response is provided to the requester in the form of a URL that includes an error code and a description (where applicable).</p>
<p><strong>Input</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>startDate</td>
<td>Starting date and time of transaction date to be included in the search result, inclusive. Date range cannot be more than 1 year.</td>
<td>Required</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>endDate</td>
<td>Ending date and time of transaction date to be included in the search result, inclusive.    Date range cannot be more than 1 year.</td>
<td>Required</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>accountId</td>
<td>Account ID under which transaction should be searched for. If empty, method will search for all transactions under the merchant.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Reference value which transaction reference match partially to be included in the result.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Particular value which transaction particular match partially to be included in the result.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>type</td>
<td>Type of transactions to be included in the search result. Valid input values including: Purchase, Authorisation, OE_Payment, OE_Refund, Capture, Refund, Tokenise. If passing in empty or null, it will be treated as ALL.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>status</td>
<td>Status of the transactions to be included in the search result. Valid input values including:    All, Successful, Declined, Failed, Blocked. If passing in empty or null, it will be treated as ALL.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>first6Digits</td>
<td>First 6 digits of the credit card used to make transactions that should be included in the result.</td>
<td>Optional</td>
<td>Integer</td>
<td>6</td>
</tr>
<tr>
<td>last4Digits</td>
<td>Last 4 digits of the credit card used to make transactions that should be included in the result.</td>
<td>Optional</td>
<td>Integer</td>
<td>4</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card used to make transactions that should be included in the result, in the format MMYY.</td>
<td>Optional</td>
<td>Integer</td>
<td>4</td>
</tr>
<tr>
<td>pageSize</td>
<td>Number of transactions to be returned. If no number is passed in, it is defaulted to 100. Maximum pageSize allowed is 15,000.</td>
<td>Optional</td>
<td>Integer</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code>GET https:<span class="hljs-comment">//secure.paymarkclick.co.nz/api/report/transaction?</span>
    startDate=<span class="hljs-number">2017</span>-<span class="hljs-number">08</span>-<span class="hljs-number">10</span>T14:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&amp;
    endDate=<span class="hljs-number">2017</span>-<span class="hljs-number">08</span>-<span class="hljs-number">11</span>T14:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&amp;
    accountId=<span class="hljs-number">700226</span>&amp;
    reference=test&amp;
    particular=click&amp;
    type=purchase&amp;
    status=successful&amp;
    first6Digits=<span class="hljs-number">400555</span>&amp;
    pageSize=<span class="hljs-number">5</span>
    HTTP/<span class="hljs-number">1.1</span>

Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=

Content-Type: application/json</code></pre>
<p><strong>Output Fields</strong></p>
<p>Result will return a list of transactions including the following elements:</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionId</td>
<td>Paymark Click defined unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>originalTransactionId</td>
<td>Used in refund, capture and cancellation transactions.  Contains the transaction ID for the related (authorisation or payment) transaction.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>type</td>
<td>Transaction type (PURCHASE, AUTHORISATION, REFUND, CAPTURE, OE_PAYMENT).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>accountId</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>transactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>batchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>receiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>authCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>capturedAmount</td>
<td>Captured amount of transaction in NZD, in the format 1.23. For Purchase, Refund and Online EFTPOS successful transactions, this field is the same as the Amount. For Authorisation transactions, this amount is the sum of all successful subsequent Capture transactions. For Capture transactions, this amount is set to 0.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>refundedAmount</td>
<td>Refunded amount of transaction in NZD, in the format 1.23. For Purchase, Capture and Online EFTPOS successful transactions, this amount is the sum of all successful Refund transactions of the original transactions. For other types of transactions, this amount is set to 0.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>surcharge</td>
<td>If the Merchant has added a surcharge % to this transaction, this is the surcharge amount for this transaction.  Note: Contact Paymark to configure a surcharge for your Merchant account.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardHolder</td>
<td>The Cardholder name entered into the Paymark Click hosted web payment page.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardStored</td>
<td>Whether or not the card was stored, false = not stored, true = stored. Will always be false for Online EFTPOS payments.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>cardToken</td>
<td>Payment token for the card used for this transaction if chose to store the card, or if the transaction is a Tokenisation transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>tokenReference</td>
<td>Merchant defined card token reference associated with the stored card used for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>errorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>errorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>acquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction.  Only available if the merchantToken variable was set to 1.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerId</td>
<td>Consumer’s personal identifier for Online EFTPOS payments.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>payerIdType</td>
<td>Type of payerId that was used for Online EFTPOS payments.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>bank</td>
<td>Consumer bank to which the Online EFTPOS payment request was sent.</td>
<td>String</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>Result Options</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>200 with body containing all transactions match input criteria. For each returned transaction, details are documented in the above “Output Elements” section, ordered by transaction date in descending order. Note: pageSize will determine how many transactions are returned. For example, if pageSise = 600, result will return up to 600 transactions. The maximum number of transactions returned is up to 15,000</td>
</tr>
<tr>
<td>Failure</td>
<td>See exceptions and errors below.</td>
</tr>
</tbody>
</table>
<p><strong>Possible Errors and Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>HTTP Response Code</strong></th>
<th><strong>Error Number</strong></th>
<th><strong>Error Message</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>400 Bad Request</td>
<td>7004</td>
<td>Start date cannot be greater than End date, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>7005</td>
<td>Date range greater than 1 year, please restrict the date range, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>7006</td>
<td>Transaction type not valid, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>7007</td>
<td>Status not valid, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>7002</td>
<td>Reference cannot contain more than 50 characters, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>5019</td>
<td>Particular cannot contain more than 50 characters, please consult the payment web service integration manual.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>8000</td>
<td>pageSize must be between 1 and 15,000.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>8000</td>
<td>startDate is required.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>8000</td>
<td>endDate is required.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>8000</td>
<td>first6Digits must be 6 digits.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>8000</td>
<td>last4Digits must be 4 digits.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>8000</td>
<td>cardExpiry must be a valid MMYY format.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>6023</td>
<td>Client Account ID provided is not valid.</td>
</tr>
<tr>
<td>400 Unauthorised</td>
<td>3000</td>
<td>Authentication error. Username and/or Password are incorrect.</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>-1</td>
<td>Unspecified error, contact Paymark.</td>
</tr>
</tbody>
</table>
</section><section id="marketing-token" class="resource-group"><h2 class="group-heading">Marketing Token <a href="#marketing-token" class="permalink">&para;</a></h2><h2 id="header-overview-12">Overview <a class="permalink" href="#header-overview-12" aria-hidden="true">¶</a></h2>
<p>A marketing token can be created for the purpose of tracking all transactions made with a particular card, for example, for loyalty purposes.  Transactions done through an EFTPOS terminal or online through Paymark Click can be tracked, providing an omnichannel facility for Merchants.  Marketing tokens are supported for Click transactions through the Paymark Hosted Standard Payment, Direct Post and Merchant Hosted Transaction Processing integration options.  Note: Currently you cannot create a marketing token for Online EFTPOS transactions.</p>
<p>A marketing token differs to a payment token or card token, which are created for the purpose of processing financial transactions.  Unlike payment or card tokens, marketing tokens are not limited to standard card types (Visa, MasterCard, American Express, Diners Club and Q Card cards).  A marketing token can also be created for an EFTPOS card to track all transactions made with that card via EFTPOS terminals.</p>
<p>Paymark Click is used to register and manage marketing tokens using the “Merchant Token” services.</p>
<h2 id="header-end-points-1">End Points <a class="permalink" href="#header-end-points-1" aria-hidden="true">¶</a></h2>
<p>For Standard Payment and Direct Post Click integrations, registration of a marketing token shares the same endpoints as <a href="#web-payments">Web Payments</a> and is accessible at the below URLs:</p>
<p>Production: <a href="https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</a></p>
<p>Non-Production: <a href="https://uat.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest">https://uat.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</a></p>
<p>For Merchant Hosted Transaction Processing, registration of a marketing token uses the following end points:</p>
<p>Production: <a href="https://secure.paymarkclick.co.nz/api/token/merchanttoken/">https://secure.paymarkclick.co.nz/api/token/merchanttoken/</a></p>
<p>Non-Production: <a href="https://uat.paymarkclick.co.nz/api/token/merchanttoken/">https://uat.paymarkclick.co.nz/api/token/merchanttoken/</a></p>
<p>Retrieval and removal of a marketing token (for all integration options) uses the following end points:</p>
<p>Production: <a href="https://secure.paymarkclick.co.nz/api/token/merchanttoken/">https://secure.paymarkclick.co.nz/api/token/merchanttoken/</a></p>
<p>Non-Production: <a href="https://uat.paymarkclick.co.nz/api/token/merchanttoken/">https://uat.paymarkclick.co.nz/api/token/merchanttoken/</a></p>
<h2 id="header-signing-up-for-the-marketing-token-service">Signing Up For The Marketing Token Service <a class="permalink" href="#header-signing-up-for-the-marketing-token-service" aria-hidden="true">¶</a></h2>
<p>This service is not offered as a standard Paymark Click feature. To sign up to use this facility, please contact Paymark on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a>.</p>
<h2 id="header-how-marketing-tokens-work">How Marketing Tokens Work <a class="permalink" href="#header-how-marketing-tokens-work" aria-hidden="true">¶</a></h2>
<p><strong>Standard Payment:</strong> When your web application registers a marketing token request, the Merchant Token service will return a unique URL that the Merchant application can use to load a secure Paymark Click page to register the marketing token.  For standard cards, that is, Visa, MasterCard, American Express, Diners Club and Q Card, the <a href="#paymark-hosted-standard-payment">Standard Payment</a> service also offers the option to register a marketing token while processing a payment transaction.  The “merchant_token” field in the <a href="#header-standard-payment-request-data">Standard Payment request</a> registers a marketing token and returns a marketing token identifier in the response.</p>
<p><strong>Direct Post:</strong> When your web application registers a marketing token request, the Merchant Token service will return a Direct Post URL to which the marketing token details can be posted.  For standard cards, that is, Visa, MasterCard, American Express, Diners Club and Q Card, the <a href="#direct-post">Direct Post</a> service also offers the option to register a marketing token while processing a payment transaction.  The “merchant_token” field in the <a href="#header-direct-post-request-data">Direct Post request</a> registers a marketing token and returns a marketing token identifier in the response.</p>
<p><strong>Merchant Hosted Transaction Processing:</strong> With this option, Merchants are able to utilise their own functions and processes to collect and store card details, and then make a direct server to server API call to register the marketing token via the Paymark Transaction Processing API.  For standard cards, that is, Visa, MasterCard, American Express, Diners Club and Q Card, the <a href="#merchant-hosted-transaction-processing">Merchant Hosted Transaction Processing</a> service also offers the option to register a marketing token while processing a payment transaction.  The “merchantToken” field in the <a href="#merchant-hosted-transaction-processing">Merchant Hosted Transaction Processing</a> request registers a marketing token and returns a marketing token identifier in the response.</p>
<h2 id="header-standard-payment-marketing-token-registration">Standard Payment Marketing Token Registration <a class="permalink" href="#header-standard-payment-marketing-token-registration" aria-hidden="true">¶</a></h2>
<p><strong>Transaction Flow</strong></p>
<p>For all cards, a marketing token can be registered using the Standard Payment request integration with the following flow.</p>
<img src="./click-images/merchant_token_flow.png" width="624">
<br>
<br>
<br>
<p>When registering a marketing token using the Standard Payment request integration, the Click Web Payments API supports only the Post to Return URL return option.  The return option determines what happens after a transaction is completed.  See also <a href="#header-two-return-options">Two Return Options</a>.</p>
<p>The marketing token will be posted back to the Merchant’s return URL.  At the same time, the Cardholder will be redirected back to the return URL.  Note: Your return_url must have a valid SSL certificate to avoid the Cardholder’s browser prompting any security warning messages.</p>
<p>For information on registering a marketing token at the same time as the payment is done, see <a href="#header-standard-payment-request-data">Paymark Hosted Standard Payment</a>.</p>
<p><strong>Marketing Token Registration Request Data</strong></p>
<p>The following table shows the input fields that can be posted to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>password</td>
<td>Your Paymark Click API Password.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cmd</td>
<td>Defines the Web Payments integration service to use; for Standard Payment marketing token registration requests use “_xmerchanttoken”.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>client_id</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>account_id</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined reference associated with the marketing token.  Allowed: alphanumeric, spaces, special characters _   -   ’   !   @   #   $   &amp;   *   (   )   \   {   }   :   &quot;   ,   .   /</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>return_url</td>
<td>The URL that the Cardholder will be sent to on completion of the token creation.  This must be a publicly accessible URL.</td>
<td>Required</td>
<td>String</td>
<td>1024</td>
</tr>
<tr>
<td>notification_url</td>
<td>Additional URL where the transaction response will be sent to.  This must be a publicly accessible URL.</td>
<td>Optional</td>
<td>String</td>
<td>1024</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/x-www-form-urlencoded</span>

<span class="cpp">client_id=<span class="hljs-number">90127</span>&amp;
account_id=<span class="hljs-number">700152</span>&amp;
username=<span class="hljs-number">90127</span>&amp;
password=Paymark123&amp;
reference=Reference&amp;
particular=Particular&amp;
cmd=_xmerchanttoken&amp;
return_url=https%<span class="hljs-number">3</span>A%<span class="hljs-number">2F</span>%<span class="hljs-number">2F</span>your-site.com%<span class="hljs-number">2F</span>My-Return-URL%<span class="hljs-number">3F</span>Ref%<span class="hljs-number">3</span>DReference
</span></span></code></pre>
<p>Note: Data is passed to the service as a URI query string so if a parameter contains URL punctuation characters it must be URL encoded.  For example, reference=Ref?001 and particular=Part&amp;001.</p>
<p><strong>Marketing Token Request Result</strong></p>
<p>Result Options</p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>See examples below.</td>
</tr>
<tr>
<td>Failure</td>
<td>Returns REST error information in XML format. For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</td>
</tr>
</tbody>
</table>
<p>Success Result Parameters</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Data Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cmd</td>
<td>Web Payments integration service.</td>
<td>String</td>
</tr>
<tr>
<td>request</td>
<td>Encrypted request data.</td>
<td>String</td>
</tr>
</tbody>
</table>
<p>The marketing token registration URL returned will be wrapped in an XML element in string format. You will need to extract the URL out and XML decode the URL before you pass it to your “browser object”.</p>
<p>Example:</p>
<pre><code>&lt;<span class="hljs-built_in">string</span> xmlns=<span class="hljs-string">"http://schemas.microsoft.com/2003/10/Serialization/"</span>&gt;

http<span class="hljs-variable">s:</span>//secure.paymarkclick.<span class="hljs-keyword">co</span>.nz/api/webpayments/default.aspx?<span class="hljs-keyword">q</span>=d8abe23b8c1143859d0baac26f825b0

&lt;/<span class="hljs-built_in">string</span>&gt;</code></pre>
<p><strong>Output Fields</strong></p>
<p>The following table shows the output fields to be posted back to the Return URL, along with a brief description of each.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>transactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD, EFTPOS).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined reference associated with the marketing token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>errorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>errorMessage</td>
<td>The message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
</tbody>
</table>
<h2 id="header-direct-post-marketing-token-registration">Direct Post Marketing Token Registration <a class="permalink" href="#header-direct-post-marketing-token-registration" aria-hidden="true">¶</a></h2>
<p><strong>Transaction Flow</strong></p>
<p>For all cards, a marketing token can be registered using the Direct Post integration with the following flow.</p>
<img src="./click-images/merchant_token_flow_direct_post.png" width="624">
<br>
<br>
<br>
<p>For information on registering a marketing token at the same time as the payment is done, see <a href="#header-direct-post-request-data">Direct Post</a>.</p>
<p><strong>Marketing Token Registration Request Data</strong></p>
<p>The following table shows the input fields that can be posted to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>password</td>
<td>Your Paymark Click API Password.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>cmd</td>
<td>Defines the Web Payments integration service to use; for Direct Post marketing token registration requests, use “_xdirectmerchanttoken”.</td>
<td>Required</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>client_id</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>account_id</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined reference associated with the marketing token.  Allowed: alphanumeric, spaces, special characters _   -   ’   !   @   #   $   &amp;   *   (   )   \   {   }   :   &quot;   ,   .   /</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>return_url</td>
<td>The URL that the Cardholder will be sent to on completion of the token creation.  This must be a publicly accessible URL.</td>
<td>Required</td>
<td>String</td>
<td>1024</td>
</tr>
<tr>
<td>notification_url</td>
<td>Additional URL where the transaction response will be sent to.  This must be a publicly accessible URL.</td>
<td>Optional</td>
<td>String</td>
<td>1024</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/WPRequest</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/x-www-form-urlencoded</span>

<span class="cpp">client_id=<span class="hljs-number">90127</span>&amp;
account_id=<span class="hljs-number">700152</span>&amp;
username=<span class="hljs-number">90127</span>&amp;
password=Paymark123&amp;
reference=Reference&amp;
particular=Particular&amp;
cmd=_xdirectmerchanttoken&amp;
return_url=https%<span class="hljs-number">3</span>A%<span class="hljs-number">2F</span>%<span class="hljs-number">2F</span>your-site.com%<span class="hljs-number">2F</span>My-Return-URL%<span class="hljs-number">3F</span>Ref%<span class="hljs-number">3</span>DReference
</span></span></code></pre>
<p>Note: Data is passed to the service as a URI query string so if a parameter contains URL punctuation characters it must be URL encoded.  For example, reference=Ref?001 and particular=Part&amp;001.</p>
<p><strong>Marketing Token Request Result</strong></p>
<p>Result Options</p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>See examples below.</td>
</tr>
<tr>
<td>Failure</td>
<td>Returns REST error information in XML format. For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</td>
</tr>
</tbody>
</table>
<p>Success Result Parameters</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Data Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cmd</td>
<td>Web Payments integration service.</td>
<td>String</td>
</tr>
<tr>
<td>request</td>
<td>Encrypted request data.</td>
<td>String</td>
</tr>
</tbody>
</table>
<p>The marketing token registration URL returned will be wrapped in an XML element in string format. You will need to extract the URL out and XML decode the URL before you pass it to your “browser object”.</p>
<p>Example:</p>
<pre><code>&lt;<span class="hljs-built_in">string</span> xmlns=<span class="hljs-string">"http://schemas.microsoft.com/2003/10/Serialization/"</span>&gt;

http<span class="hljs-variable">s:</span>//secure.paymarkclick.<span class="hljs-keyword">co</span>.nz/api/webpayments/default.aspx?<span class="hljs-keyword">q</span>=<span class="hljs-number">6</span>ac2b7f7c73c4f2fbb802f3751c630e2

&lt;/<span class="hljs-built_in">string</span>&gt;</code></pre>
<p><strong>Post Card Details Request</strong></p>
<p>After the marketing token registration URL has been obtained from the step above, the Merchant web site can collect card information and post it to the URL.</p>
<p>The following table shows the input fields that can be posted to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>card_expiry_month</td>
<td>Expiry month of the card, in the format MM.  Required for standard card types.  Ignored for EFTPOS cards.</td>
<td>Required</td>
<td>String</td>
<td>2</td>
</tr>
<tr>
<td>card_expiry_year</td>
<td>Expiry year of the card, in the format YY.  Required for standard card types.  Ignored for EFTPOS cards.</td>
<td>Required</td>
<td>String</td>
<td>2</td>
</tr>
<tr>
<td>card_number</td>
<td>Card number collected from Merchant’s token registration page.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/default.aspx?q=6ac2b7f7c73c4f2fbb802f3751c630e2</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/x-www-form-urlencoded</span>

<span class="cpp">card_number=<span class="hljs-number">4987654321098769</span>&amp;
card_expiry_month=<span class="hljs-number">05</span>&amp;
card_expiry_year=<span class="hljs-number">17</span>
</span></span></code></pre>
<p><strong>Output Fields</strong></p>
<p>While the marketing token registration is being processed, the Cardholder is redirected back to the Return URL that was in the marketing token registration request, along with the Result_Id.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Result_Id</td>
<td>Identifier used to retrieve details for successful marketing token registration, or exception details for registrations with a <a href="#rest-exceptions">REST Exception</a>.</td>
<td>GUID</td>
</tr>
</tbody>
</table>
<p><strong>Validating Result By Result ID</strong></p>
<p>After Result_ID is returned from the previous step, the Merchant application can use the end point below to retrieve the transaction result.</p>
<p>The following table shows the input fields that can be posted to the Web Payments API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>password</td>
<td>Your Paymark Click API Password.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>account_id</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>result_id</td>
<td>Result ID returned from previous step after card details were posted.</td>
<td>Required</td>
<td>GUID</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">GET <span class="hljs-string">https://secure.paymarkclick.co.nz/api/webpayments/paymentservice/rest/QueryDirectMerchantTokenResultByResultId</span> HTTP/1.1</span>

<span class="cpp">username=<span class="hljs-number">90127</span>&amp;
password=Paymark123&amp;
account_id=<span class="hljs-number">700152</span>&amp;
result_id=e619459a-<span class="hljs-number">3</span>c03-<span class="hljs-number">478f</span>-b0c1-<span class="hljs-number">44</span>a680ef87cc
</span></code></pre>
<p><strong>Result Options</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>XML containing standard outputs for requested transaction information.</td>
</tr>
<tr>
<td>Failure</td>
<td>Returns REST error information in XML format. For a full list of REST exceptions, refer to the <a href="#rest-exceptions">REST Exceptions</a> section.</td>
</tr>
</tbody>
</table>
<p><strong>Success Result Parameters</strong></p>
<table>
<thead>
<tr>
<th><strong>Element</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Status</td>
<td>Four possible status: PROCESSED, REJECTED, SESSION_EXPIRED, UNKNOWN.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>Message</td>
<td>Messages corresponding to status above: PROCESSED – “Transaction was processed”, REJECTED – “Transaction details failed validation”, SESSION_EXPIRED – “Session has expired”, UNKNOWN – “Unknown server error”.</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>transactionResult</td>
<td>Details of the transaction.  See table below for UDT structure.</td>
<td>UDT</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>MerchantToken</td>
<td>The marketing token representing this card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>Reference</td>
<td>Merchant defined reference associated with the marketing token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>Particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>ErrorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>ErrorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
</tbody>
</table>
<h2 id="header-merchant-hosted-transaction-processing-marketing-token-registration">Merchant Hosted Transaction Processing Marketing Token Registration <a class="permalink" href="#header-merchant-hosted-transaction-processing-marketing-token-registration" aria-hidden="true">¶</a></h2>
<p>For all cards, a marketing token can be registered using the Merchant Hosted Transaction Processing integration.</p>
<p>For information on registering a marketing token at the same time as the payment is done, see <a href="#merchant-hosted-transaction-processing">Merchant Hosted Transaction Processing</a>.</p>
<p><strong>Marketing Token Registration Request Data</strong></p>
<p>The following table shows the input fields that can be posted to the Merchant Token API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>cardExpiry</td>
<td>Card expiry date, in the format MMYY. E.g. 0520 for May 2020.  Numeric format.  Expiry dates in the past are allowed as long as the format is correct.  Required for standard card types.  Ignored for EFTPOS cards.</td>
<td>Required</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Card number without spaces.  Numeric format.</td>
<td>Required</td>
<td>String</td>
<td>12-19</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined reference associated with the marketing token.  Allowed: alphanumeric, spaces, special characters _   -   ’   !   @   #   $   &amp;   *   (   )   +   \   {   }   :   &quot;   ,   .   /</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>particular</td>
<td>Merchant defined value stored with the transaction.  Allowed: alphanumeric, spaces, special characters @   #   ’   &amp;   &quot;   ;   .   \   /   !   :   ,   +   ?   [   ]   (   )   -   _</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/merchanttoken/</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="http"><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/json</span>

<span class="json">{
    "<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-string">"700152"</span></span>,
    "<span class="hljs-attribute">cardExpiry</span>":<span class="hljs-value"><span class="hljs-string">"0520"</span></span>,
    "<span class="hljs-attribute">cardNumber</span>":<span class="hljs-value"><span class="hljs-string">"4987654321098769"</span></span>,    
    "<span class="hljs-attribute">reference</span>":<span class="hljs-value"><span class="hljs-string">"Reference"</span></span>,
    "<span class="hljs-attribute">particular</span>":<span class="hljs-value"><span class="hljs-string">"Particular"</span></span>,
}
</span></span></span></code></pre>
<p><strong>Possible Errors and Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>HTTP Response Code</strong></th>
<th><strong>Error Number</strong></th>
<th><strong>Error Message</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>400 Bad Request</td>
<td>2003</td>
<td>Invalid account ID.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>1004</td>
<td>Card expiry must be in the correct format: MMYY.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>1002</td>
<td>Card number must be a valid credit card number.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>50001</td>
<td>Reference must be no more than 50 characters in length.</td>
</tr>
<tr>
<td>401 Unauthorised</td>
<td>3000</td>
<td>Authentication error. Username, Account ID and/or password are incorrect.</td>
</tr>
<tr>
<td>401 Unauthorised</td>
<td>3001</td>
<td>Authentication error. Service restricted or unavailable.</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>-1</td>
<td>Unspecified error, contact Paymark.</td>
</tr>
</tbody>
</table>
<p><strong>Output Fields</strong></p>
<p>The following table shows the output fields along with a brief description of each.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this transaction (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD, EFTPOS).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined reference associated with the marketing token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpire</td>
<td>Card expiry date, in the format MMYY. E.g. 0520 for May 2020.  Numeric format.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>createdDate</td>
<td>Date and time when marketing token was created.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<h2 id="header-retrieve-marketing-token-using-merchant-reference">Retrieve Marketing Token Using Merchant Reference <a class="permalink" href="#header-retrieve-marketing-token-using-merchant-reference" aria-hidden="true">¶</a></h2>
<p>This method provides the functionality to retrieve the details of the marketing token using the Merchant’s reference provided when the token was registered.</p>
<p><strong>Input Fields</strong></p>
<p>The following table shows the input fields that can be posted to the Merchant Token API. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>reference</td>
<td>Reference for the marketing token to be found.</td>
<td>Required</td>
<td>String</td>
</tr>
<tr>
<td>startDate</td>
<td>Starting date and time of registration transaction date to be included in the search result, inclusive.</td>
<td>Optional</td>
<td>Datetime</td>
</tr>
<tr>
<td>endDate</td>
<td>Ending date and time of registration transaction date to be included in the search result, inclusive.</td>
<td>Optional</td>
<td>Datetime</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code>GET https:<span class="hljs-comment">//secure.paymarkclick.co.nz/api/token/merchanttoken/?</span>
    reference=Reference&amp;
    startDate=<span class="hljs-number">2017</span>-<span class="hljs-number">08</span>-<span class="hljs-number">01</span>T00:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&amp;
    endDate=<span class="hljs-number">2017</span>-<span class="hljs-number">08</span>-<span class="hljs-number">02</span>T00:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&amp;
    HTTP/<span class="hljs-number">1.1</span>

Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=</code></pre>
<p><strong>Output Fields</strong></p>
<p>The following table shows the output fields along with a brief description of each.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>merchantToken</td>
<td>The marketing token registered with Paymark for the card used for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardType</td>
<td>The card type used for this token (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD, EFTPOS).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>reference</td>
<td>Merchant defined reference associated with the marketing token.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>particular</td>
<td>Particulars used for the registration transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>cardExpire</td>
<td>Card expiry date, in the format MMYY. E.g. 0520 for May 2020.  Numeric format.  Expiry dates in the past are allowed as long as the format is correct.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>createdDate</td>
<td>Date and time when marketing token was created.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p><strong>Possible Errors and Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>HTTP Response Code</strong></th>
<th><strong>Error Number</strong></th>
<th><strong>Error Message</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>401 Unauthorised</td>
<td>3000</td>
<td>Authentication error. Username, Account ID and/or password are incorrect.</td>
</tr>
<tr>
<td>401 Unauthorised</td>
<td>3001</td>
<td>Authentication error. Service restricted or unavailable.</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>-1</td>
<td>Unspecified error, contact Paymark.</td>
</tr>
</tbody>
</table>
<h2 id="header-remove-a-marketing-token">Remove a Marketing Token <a class="permalink" href="#header-remove-a-marketing-token" aria-hidden="true">¶</a></h2>
<p>This method provides the functionality to remove a previously registered marketing token.</p>
<p><strong>Input Fields</strong></p>
<p>The marketing token identifier is passed in as part of the URL.</p>
<p>The following table shows the other input fields required to remove a marketing token. A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">DELETE <span class="hljs-string">https://secure.paymarkclick.co.nz/api/token/merchanttoken/f0a0b18e-4ec7-4706-a869-da646cb35541</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Authorization</span>: <span class="hljs-string">Basic dXNlcm5hbWU6cGFzc3dvcmQ=</span>

<span class="json">{
"<span class="hljs-attribute">accountId</span>":<span class="hljs-value"><span class="hljs-number">700152</span>
</span>}
</span></span></code></pre>
<p><strong>Result Options</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>204 with empty message.</td>
</tr>
<tr>
<td>Failure</td>
<td>See exceptions and errors below.</td>
</tr>
</tbody>
</table>
<p><strong>Possible Errors and Exceptions</strong></p>
<table>
<thead>
<tr>
<th><strong>HTTP Response Code</strong></th>
<th><strong>Error Number</strong></th>
<th><strong>Error Message</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>404 Bad Request</td>
<td>2002</td>
<td>Invalid token ID.</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>2003</td>
<td>Invalid Account ID.</td>
</tr>
<tr>
<td>401 Unauthorised</td>
<td>3000</td>
<td>Authentication error. Username, Account ID and/or password are incorrect.</td>
</tr>
<tr>
<td>401 Unauthorised</td>
<td>3001</td>
<td>Authentication error. Service restricted or unavailable.</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>-1</td>
<td>Unspecified error, contact Paymark.</td>
</tr>
</tbody>
</table>
</section><section id="ivr-payments" class="resource-group"><h2 class="group-heading">IVR Payments <a href="#ivr-payments" class="permalink">&para;</a></h2><h2 id="header-introduction-1">Introduction <a class="permalink" href="#header-introduction-1" aria-hidden="true">¶</a></h2>
<p>Paymark Click can take payments and store cards for later use via an Interactive Voice Response (IVR) that is integrated to your own IVR or telephony platform.  The Click IVR is not yet available for Online EFTPOS payments.</p>
<p>The Click IVR is offered as a bespoke implementation.  Should you wish to integrate with the Click IVR, please contact Paymark on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> to discuss options.</p>
<h2 id="header-how-the-click-ivr-works">How the Click IVR Works <a class="permalink" href="#header-how-the-click-ivr-works" aria-hidden="true">¶</a></h2>
<p>There are three stages to an IVR transaction:</p>
<ol>
<li><a href="#header-ivr-transaction-registration">Transaction Registration</a>: Merchant system registers a transaction request with Click IVR.</li>
<li><a href="#header-ivr-transaction-processing">Transaction Processing</a>: Paymark Click IVR collects card information and processes the transaction.</li>
<li><a href="#header-ivr-transaction-status-retrieval">Status Retrieval</a>: Merchant system retrieves transaction status.</li>
</ol>
<p>These stages are shown in the diagram below.</p>
<img src="./click-images/ivr_flow.png" width="624">
<br>
<br>
<br>
<br>
<h2 id="header-end-points-2">End Points <a class="permalink" href="#header-end-points-2" aria-hidden="true">¶</a></h2>
<p>The Paymark Click IVR end points are accessible via the URLs below:</p>
<p><strong>Production:</strong> <a href="https://secure.paymarkclick.co.nz/api/ivrpayments/registrar/rest/%5BMethodName%5D">https://secure.paymarkclick.co.nz/api/ivrpayments/registrar/rest/[MethodName]</a></p>
<p><strong>Non-Production:</strong> <a href="https://uat.paymarkclick.co.nz/api/ivrpayments/registrar/rest/%5BMethodName%5D">https://uat.paymarkclick.co.nz/api/ivrpayments/registrar/rest/[MethodName]</a></p>
<h2 id="header-http-headers-1">HTTP Headers <a class="permalink" href="#header-http-headers-1" aria-hidden="true">¶</a></h2>
<p>In addition to the headers that are required by the HTTP protocol, Paymark requires that you specify the Accept header.  The Accept header is used to specify the content type that your client will accept.</p>
<p>The following header is required for all REST API calls to the Click IVR:</p>
<pre><code>Accept: application/<span class="hljs-keyword">xml</span>
<span class="hljs-title"></span></code></pre>
<h2 id="header-ivr-transaction-registration">IVR Transaction Registration <a class="permalink" href="#header-ivr-transaction-registration" aria-hidden="true">¶</a></h2>
<p>The Paymark Click IVR Transaction Register method allows a Merchant system to register a transaction request with the Paymark Click IVR, and obtain a unique Registration ID for further transaction processing or retrieval of a transaction status.</p>
<p>Method name: register</p>
<p>This method receives transaction registration data.  Data should be sent as a POST web request.  All data should be provided in the body of the request.</p>
<p>Once the request is received, the input will be validated. If successful, a Registration ID will be returned. This Registration ID is then used to process the transaction and to retrieve the transaction status. If an error occurs or if invalid data is submitted, a response is provided to the requester in the form of XML message that includes an error code and a description (where applicable).</p>
<p><strong>Request Data</strong></p>
<p>The following table shows the input fields that can be posted to the Paymark Click IVR.  These must be posted in the order shown in the table (alphabetical order).  A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>AccountId</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>AllowStoreCardOption</td>
<td>0 or 1 to indicate whether a Customer will be able to store the card. 0 = default, the Click IVR will not prompt the Customer to store the card. 1 = the Click IVR will give the Customer the option to store their card.</td>
<td>Optional</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>Amount</td>
<td>The transaction amount in NZD. Must be a positive value (more than zero).</td>
<td>Required</td>
<td>Decimal</td>
<td>N/A</td>
</tr>
<tr>
<td>HasStoredCard</td>
<td>0 or 1 to indicate whether Customer has the option to replace an existing stored card. 0 = default, Customer has no existing stored card. 1 = The Merchant has an existing stored card for this Customer and the Click IVR will prompt the Customer to replace their existing card with a new stored card.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
<tr>
<td>NotificationUrl</td>
<td>The URL where the transaction response will be sent to. This must be a publicly accessible URL.</td>
<td>Optional</td>
<td>String</td>
<td>2048</td>
</tr>
<tr>
<td>Particular</td>
<td>Merchant defined value stored with the transaction.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>Password</td>
<td>Your Paymark Click API Password.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>Reference</td>
<td>Merchant defined value stored with the transaction.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>ReturnPhoneNumber</td>
<td>The phone number of the Merchant system, where Customer should be redirected back to, after completing the transaction in the Click IVR.  Format: 09XXXXXXX.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>TokenReference</td>
<td>Merchant defined reference associated with the stored card token.  Allowed: alphanumeric, spaces.</td>
<td>Optional</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>Type</td>
<td>Type of transaction requested, “purchase” or “authorisation”, if not using the account’s (account_id) default transaction type. If type is omitted, this is taken from the default settings for the account_id used in this transaction. Contact Paymark to confirm the default setting for this account_id.  Purchase is used to make a payment. Authorisation validates card details and holds funds on the card. If you are only storing the card for future payments, without validating card details, you can use type = “tokenise”.  In this transaction the Amount and AllowStoreCardOption fields are ignored.</td>
<td>Optional</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>Username</td>
<td>Your Paymark Click Client ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code><span class="hljs-request">POST <span class="hljs-string">https://secure.paymarkclick.co.nz/api/ivrpayments/registrar/rest/register</span> HTTP/1.1</span>

<span class="http"><span class="hljs-attribute">Accept</span>: <span class="hljs-string">application/xml</span>

<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">RegisterIvrPaymentRequest</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"https://secure.paymarkclick.co.nz/api/"</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">AccountId</span>&gt;</span>700152<span class="hljs-tag">&lt;/<span class="hljs-title">AccountId</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">AllowStoreCardOption</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">AllowStoreCardOption</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">Amount</span>&gt;</span>5.23<span class="hljs-tag">&lt;/<span class="hljs-title">Amount</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">HasStoredCard</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">HasStoredCard</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">NotificationUrl</span>&gt;</span>https://merchanthost/ivr/<span class="hljs-tag">&lt;/<span class="hljs-title">NotificationUrl</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">Particular</span>&gt;</span>Particular<span class="hljs-tag">&lt;/<span class="hljs-title">Particular</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">Password</span>&gt;</span>Paymark123<span class="hljs-tag">&lt;/<span class="hljs-title">Password</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">Reference</span>&gt;</span>Reference<span class="hljs-tag">&lt;/<span class="hljs-title">Reference</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">ReturnPhoneNumber</span>&gt;</span>091234567<span class="hljs-tag">&lt;/<span class="hljs-title">ReturnPhoneNumber</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">TokenReference</span>&gt;</span>MerchantTokenRef<span class="hljs-tag">&lt;/<span class="hljs-title">TokenReference</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">Type</span>&gt;</span>authorisation<span class="hljs-tag">&lt;/<span class="hljs-title">Type</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-title">Username</span>&gt;</span>90127<span class="hljs-tag">&lt;/<span class="hljs-title">Username</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">RegisterIvrPaymentRequest</span>&gt;</span>
</span></span></code></pre>
<p><strong>Request Result</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>Registration ID in XML format: see example below.</td>
</tr>
<tr>
<td>Failure</td>
<td>Returns REST error information in XML format.  See <a href="#rest-exceptions">REST Exceptions</a>.</td>
</tr>
</tbody>
</table>
<p>On success, the Registration ID will be returned as a string in XML format.</p>
<p>Example:</p>
<pre><code><span class="hljs-tag">&lt;<span class="hljs-title">RegisterIvrPaymentResponse</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"https://secure.paymarkclick.co.nz/api/"</span> <span class="hljs-attribute">xmlns:i</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-title">RegistrationId</span>&gt;</span>100016<span class="hljs-tag">&lt;/<span class="hljs-title">RegistrationId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">RegisterIvrPaymentResponse</span>&gt;</span></code></pre>
<h2 id="header-ivr-transaction-processing">IVR Transaction Processing <a class="permalink" href="#header-ivr-transaction-processing" aria-hidden="true">¶</a></h2>
<p>Once a transaction request has successfully been registered, the Merchant system should then transfer the call to the Paymark Click IVR to collect and process card information.</p>
<p><strong>Request Data</strong></p>
<p>The following table shows the input fields that can be posted to the Paymark Click IVR.  A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CID</td>
<td>Caller ID (CID) needs to be set to the RegistrationID provided during the <a href="#header-ivr-transaction-registration">registration process</a>.  Transmission of the Caller ID needs to follow the <a href="http://www.telepermit.co.nz/TNA102.pdf">NZ Bellcore FSK standard</a>.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p><strong>Request Result</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>Transaction status (see <a href="#header-ivr-transaction-status-retrieval">Status Retrieval</a>) gets posted back to the NotificationURL supplied by the Merchant during the <a href="#header-ivr-transaction-registration">registration process</a>.  The Customer call is transferred back to the Merchant system by transferring the call to the ReturnPhoneNumber supplied during the <a href="#header-ivr-transaction-registrationn">registration process</a>.  The CallerID set as the RegistrationID provided in the response to the <a href="#header-ivr-transaction-registration">transaction registration request</a>.</td>
</tr>
<tr>
<td>Failure</td>
<td>Same as for Success.</td>
</tr>
</tbody>
</table>
<h2 id="header-ivr-transaction-status-retrieval">IVR Transaction Status Retrieval <a class="permalink" href="#header-ivr-transaction-status-retrieval" aria-hidden="true">¶</a></h2>
<p>Once a transaction has been processed, the Merchant system can retrieve the transaction status using the Registration ID. The method below should be used to retrieve the transaction status.  Note: Authentication is achieved by passing an encoded username and password in the HTTP header in the incoming request.  See also <a href="#header-authentication">Authentication information in Overview section</a>.</p>
<p>Method Name: getstatus</p>
<p><strong>Request Data</strong></p>
<p>The following table shows the input fields that can be posted to the Paymark Click IVR.  A brief description of each field is provided, as well as the accepted data format and whether it is required or optional.</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Required</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>accountId</td>
<td>Your Paymark Click Account ID.</td>
<td>Required</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>registrationId</td>
<td>Registration ID returned from the initial transaction registration.</td>
<td>Required</td>
<td>Integer</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<pre><code>GET https:<span class="hljs-comment">//secure.paymarkclick.co.nz/api/ivrpayments/registrar/rest/getstatus?</span>
accountId=<span class="hljs-number">700152</span>&amp;
registrationId=<span class="hljs-number">100016</span>
HTTP/<span class="hljs-number">1.1</span>

Accept: application/xml

Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=</code></pre>
<p><strong>Request Result</strong></p>
<table>
<thead>
<tr>
<th><strong>Result</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Success</td>
<td>XML containing standard outputs for requested transaction information.</td>
</tr>
<tr>
<td>Failure</td>
<td>Returns REST error information in XML format.  See <a href="#rest-exceptions">REST Exceptions</a>.</td>
</tr>
</tbody>
</table>
<p><strong>Output Fields</strong></p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Status</td>
<td>Status of the transaction.  1 = REGISTERED, 2 = IN_PROGRESS, 3 = COMPLETED, 4 = EXCEEDED_MAX_RETRY_CARD_NUMBER, 5 = EXCEEDED_MAX_RETRY_EXPIRY, 6 = EXCEEDED_MAX_RETRY_CSC, 7 = INVALID_CALLER_ID, 8 = HANGED_UP, 9 = UNKNOWN.</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>Status Code</td>
<td>Refer to Status.</td>
<td>String</td>
<td>N/A</td>
</tr>
<tr>
<td>Transaction</td>
<td>Details of the transaction. See table below for UDT structure.</td>
<td>UDT</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
<th><strong>Type</strong></th>
<th><strong>Length</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>TransactionId</td>
<td>Paymark Click assigned unique transaction ID.</td>
<td>String</td>
<td>8</td>
</tr>
<tr>
<td>Type</td>
<td>Transaction type (PURCHASE, AUTHORISATION, TOKENISE, REFUND, CAPTURE, CANCELLATION).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>AccountId</td>
<td>The Paymark Click Account ID used for processing the transaction.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>Status</td>
<td>Status of the transaction.  0 = UNKNOWN, 1 = SUCCESSFUL, 2 = DECLINED, 3 = BLOCKED, 4 = FAILED, 5 = INPROGRESS, 6 = CANCELLED.</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>TransactionDate</td>
<td>Date and time when the transaction was processed.</td>
<td>Datetime</td>
<td>N/A</td>
</tr>
<tr>
<td>BatchNumber</td>
<td>Content of this data can vary based on type of transaction. Currently when this contains a value, it is a string representing the “estimated settlement date” of the transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>ReceiptNumber</td>
<td>Paymark Click defined unique receipt ID.</td>
<td>Integer</td>
<td>8</td>
</tr>
<tr>
<td>AuthCode</td>
<td>Authorisation code returned by the Bank for this transaction.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>Amount</td>
<td>Amount of transaction in NZD, in the format 1.23.</td>
<td>Decimal</td>
<td>20</td>
</tr>
<tr>
<td>Reference</td>
<td>Reference used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>Particular</td>
<td>Particulars used for the transaction, as defined by the Merchant.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardType</td>
<td>The card type used for this transaction. (MASTERCARD, VISA, AMERICAN_EXPRESS, DINERS_CLUB, QCARD).</td>
<td>String</td>
<td>50</td>
</tr>
<tr>
<td>CardNumber</td>
<td>Masked card number showing first 6 and last 4 digits of the card.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardExpiry</td>
<td>Expiry date of the card, in the format MMYY.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardHolder</td>
<td>Defaults to “IVR System” for IVR transactions.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>CardStored</td>
<td>Whether or not the card was stored: 0 = not stored, 1 = stored.</td>
<td>Boolean</td>
<td>10</td>
</tr>
<tr>
<td>CardToken</td>
<td>The token of the newly stored card, only available if the cardStored variable was set to 1 and the Cardholder chose to store their card details.</td>
<td>String</td>
<td>100</td>
</tr>
<tr>
<td>ErrorCode</td>
<td>The error code indicating the type of error that occurred.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>4</td>
</tr>
<tr>
<td>ErrorMessage</td>
<td>The error message explaining what the error means.  See <a href="#transaction-response-codes-and-messages">Response Codes and Messages</a> for a full listing of error codes.</td>
<td>String</td>
<td>510</td>
</tr>
<tr>
<td>AcquirerResponseCode</td>
<td>Response code from the acquirer to indicate the status and errors of a particular transaction processed.</td>
<td>String</td>
<td>6</td>
</tr>
<tr>
<td>TokenReference</td>
<td>Merchant defined reference associated with the stored card token.</td>
<td>String</td>
<td>50</td>
</tr>
</tbody>
</table>
<h2 id="header-voice-prompt-files">Voice Prompt Files <a class="permalink" href="#header-voice-prompt-files" aria-hidden="true">¶</a></h2>
<p>The voice prompt files used in the IVR announcements can be either a .wav or .gsm file.  Maximum file size is 15 KB.  Files need to be sent to your integration contact person.</p>
</section><section id="merchant-web-site-requirements" class="resource-group"><h2 class="group-heading">Merchant Web Site Requirements <a href="#merchant-web-site-requirements" class="permalink">&para;</a></h2><p>When a Merchant processes payments from their own web site (<a href="#direct-post">Direct Post</a> and <a href="#merchant-hosted-transaction-processing">Merchant Hosted Transaction Processing</a> (“two party payment”)), the Merchant’s web site needs to comply with the following requirements.</p>
<p>In addition, for Merchants that support Online EFTPOS payments, these <a href="https://www.paymark.co.nz/assets/OE-Acceptance-Mark-Guide.pdf">acceptance mark guidelines</a> apply.</p>
<h2 id="header-general-requirements">General Requirements <a class="permalink" href="#header-general-requirements" aria-hidden="true">¶</a></h2>
<p>The Merchant’s web site needs to be secured using a SSL certificate.</p>
<p>There is no initial requirement for the Merchant to have a CAPTCHA type real person authentication method; Paymark reserves the right to ask the Merchant to implement such a feature.</p>
<p>From 30 April 2018, Paymark will cease support for TLS 1.0 and 1.1.  You must connect with TLS 1.2.</p>
<h2 id="header-branding-requirements">Branding Requirements <a class="permalink" href="#header-branding-requirements" aria-hidden="true">¶</a></h2>
<p>A Paymark logo must always be displayed on the payment page.  Please contact Paymark for logos and branding requirements.</p>
<h2 id="header-online-eftpos-requirements">Online EFTPOS Requirements <a class="permalink" href="#header-online-eftpos-requirements" aria-hidden="true">¶</a></h2>
<p>If Online EFTPOS is enabled, the Merchant’s web site needs to provide information on Online EFTPOS with this payment method, for example, mouse over help text.  The copy for this is: “For help on installing and using your bank’s mobile app please visit their website.”.</p>
<p>The Online EFTPOS payerID must be validated for general correctness, for example, correct number of digits.  Paymark will provide copy to display in the event the payerID has failed this validation.</p>
<p><strong>Mobile number</strong> validation rules for all Consumer Banks are:</p>
<ul>
<li>
<p>Begins with 020 / 1 / 2 / 7 / 8 / 9 (zero two …).</p>
</li>
<li>
<p>023, 024, 025, 026 not allowed.</p>
</li>
<li>
<p>Minimum 9 digits, maximum 11 digits.</p>
</li>
<li>
<p>Only numeric characters allowed.</p>
</li>
</ul>
<p>Examples (not exhaustive!):</p>
<p>Allowed:</p>
<ul>
<li>
<p>021012345</p>
</li>
<li>
<p>0221234567</p>
</li>
</ul>
<p>Not allowed:</p>
<ul>
<li>
<p>021-012-345</p>
</li>
<li>
<p>+64 22 123 4567</p>
</li>
<li>
<p>026123456</p>
</li>
</ul>
<p>The Merchant may choose to add additional usability aids such as a drop down list of valid mobile prefixes.</p>
<p>In addition, for Co-operative Bank payments, <strong>Customer ID</strong> validation rules are:</p>
<ul>
<li>
<p>Exactly 7 digits</p>
</li>
<li>
<p>Begins with 1 - 9</p>
</li>
</ul>
<p>In addition, for Westpac payments, <strong>Westpac 1 ID</strong> validation rules are shown below.</p>
<p>There are two types of Westpac One IDs: both are sent to Click with the payerIdType “WESTPAC1ID”.</p>
<p>“Tele ID”: 4 - 9 digits long, can start with any number.
“Self Selected ID”: 4 - 20 character string, minimum one letter, valid characters are letters: [A-Z a-z], numbers: [0-9], fullstop, underscore, dash, backslash: [ . _ - \ ].</p>
<p>Determining the Payer ID Type:</p>
<ul>
<li>
<p>If all numbers and meets the <a href="http://docs.dev.paymark.nz/click/#header-general-requirements">mobile number validation</a>, payerIdType = “MOBILE”. Note: This includes 9 digit numbers starting with “02”. Else,</p>
</li>
<li>
<p>If all numbers and NOT a mobile number (as above), must be a Tele ID, so validate as per Tele ID criteria above, and if valid, payerIdType = “WESTPAC1ID”.</p>
</li>
<li>
<p>If at least 1 letter, must be a Self Selected ID, so validate as per Self Selected ID criteria above, and if valid, payerIdType = “WESTPAC1ID”.</p>
</li>
</ul>
<p>For specific requirements on the presentation and handling of Online EFTPOS payments, please refer to the <a href="http://docs.dev.paymark.nz/oe/">Online EFTPOS API specification</a> or contact Paymark with any questions on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a>.</p>
</section><section id="rest-exceptions" class="resource-group"><h2 class="group-heading">REST Exceptions <a href="#rest-exceptions" class="permalink">&para;</a></h2><h2 id="header-overview-13">Overview <a class="permalink" href="#header-overview-13" aria-hidden="true">¶</a></h2>
<p>This section details the API error codes and messages that may be seen in the Paymark Click APIs.  In the event a REST Exception occurs, the transaction would be rejected by the API.</p>
<p>The table below contains the standard HTTP response codes and related service error number(s) for the REST methods.</p>
<table>
<thead>
<tr>
<th><strong>HTTP Response Code</strong></th>
<th><strong>Error Number (see table below for related error messages)</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>400 Bad Request</td>
<td>Error numbers 5000 to 5100</td>
</tr>
<tr>
<td>401 Unauthorised</td>
<td>Error numbers 3000 and 3001</td>
</tr>
<tr>
<td>404 Not Found</td>
<td>Error number 2000</td>
</tr>
<tr>
<td>406 Not Acceptable</td>
<td>Error number 5406</td>
</tr>
<tr>
<td>415 Unsupported Media Type</td>
<td>Error number 5415</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>Error number -1</td>
</tr>
</tbody>
</table>
<p>The “error type” element will contain one of the following denoting the type of exception:</p>
<ul>
<li>
<p>AUTHENTICATION Occurred whilst authenticating the service consumer.</p>
</li>
<li>
<p>PARAMETER Occurred whilst validating a parameter passed to the service.</p>
</li>
<li>
<p>SERVICE Occurred while processing the request.</p>
</li>
<li>
<p>UNSPECIFIED Occurred unexpectedly, contact Paymark.</p>
</li>
</ul>
<p>Example:</p>
<p><strong>401 Unauthorised</strong></p>
<h2 id="header-rest-apis-error-messages">REST APIs Error Messages <a class="permalink" href="#header-rest-apis-error-messages" aria-hidden="true">¶</a></h2>
<p>The REST APIs (including Merchant Hosted transaction processing) will return the error message in JSON format.</p>
<pre><code>{
   "<span class="hljs-attribute">code</span>": <span class="hljs-value"><span class="hljs-number">3000</span></span>,
   "<span class="hljs-attribute">message</span>": <span class="hljs-value"><span class="hljs-string">"Authentication error. Username, AccountId and/or Password are incorrect"</span>
</span>}</code></pre>
<h2 id="header-paymark-hosted-standard-payment-and-direct-post-error-messages">Paymark Hosted Standard Payment and Direct Post Error Messages <a class="permalink" href="#header-paymark-hosted-standard-payment-and-direct-post-error-messages" aria-hidden="true">¶</a></h2>
<p>The Paymark Hosted standard payment API (Paymark Click hosted payment page) and Direct Post API will return the error message in XML format.</p>
<p>Standard payment response message XML example:</p>
<pre><code><span class="hljs-tag">&lt;<span class="hljs-title">error</span>
<span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"https://secure.paymarkclick.co.nz/api/"</span>
<span class="hljs-attribute">xmlns:i</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">errormessage</span>&gt;</span>Authentication error. Username, AccountId and/or Password are incorrect<span class="hljs-tag">&lt;/<span class="hljs-title">errormessage</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">errornumber</span>&gt;</span>3000<span class="hljs-tag">&lt;/<span class="hljs-title">errornumber</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">errortype</span>&gt;</span>AUTHENTICATION<span class="hljs-tag">&lt;/<span class="hljs-title">errortype</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">error</span>&gt;</span></code></pre>
<h2 id="header-ivr-error-messages">IVR Error Messages <a class="permalink" href="#header-ivr-error-messages" aria-hidden="true">¶</a></h2>
<p>The IVR API will return the error message in XML format.</p>
<p>IVR response message XML example:</p>
<pre><code><span class="hljs-tag">&lt;<span class="hljs-title">Error</span>
<span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"https://secure.paymarkclick.co.nz/api/"</span>
<span class="hljs-attribute">xmlns:i</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">ErrorMessage</span>&gt;</span>Authentication error. Username, AccountId and/or Password are incorrect<span class="hljs-tag">&lt;/<span class="hljs-title">ErrorMessage</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">ErrorNumber</span>&gt;</span>3000<span class="hljs-tag">&lt;/<span class="hljs-title">ErrorNumber</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">ErrorType</span>&gt;</span>AUTHENTICATION<span class="hljs-tag">&lt;/<span class="hljs-title">ErrorType</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">Error</span>&gt;</span></code></pre>
<h2 id="header-payment-service-errors">Payment Service Errors <a class="permalink" href="#header-payment-service-errors" aria-hidden="true">¶</a></h2>
<table>
<thead>
<tr>
<th><strong>Error Number</strong></th>
<th><strong>Error Message</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-1</td>
<td>Unspecified Error - Contact Paymark</td>
</tr>
<tr>
<td>1000</td>
<td>Card number must contain a value</td>
</tr>
<tr>
<td>1001</td>
<td>Card number must be all digits</td>
</tr>
<tr>
<td>1002</td>
<td>Card number must be a valid credit card number</td>
</tr>
<tr>
<td>1003</td>
<td>Card holder name must contain a value and be 256 characters or less in length</td>
</tr>
<tr>
<td>1004</td>
<td>Card expiry must be in the correct format: MMyy</td>
</tr>
<tr>
<td>1005</td>
<td>Card expiry must only contain digits and be in the format: MMyy</td>
</tr>
<tr>
<td>1006</td>
<td>Card expiry must be in the future</td>
</tr>
<tr>
<td>1007</td>
<td>Card type must contain one of the following values: MC, VISA, AMEX, DINERS, QCARD</td>
</tr>
<tr>
<td>1008</td>
<td>Card type must be correct for the card number given</td>
</tr>
<tr>
<td>1009</td>
<td>Merchants may only transact with card types linked to their account</td>
</tr>
<tr>
<td>1010</td>
<td>Card CSC must be 3 or 4 digits in length</td>
</tr>
<tr>
<td>1011</td>
<td>A one dollar authorisation failed using the supplied card details</td>
</tr>
<tr>
<td>1012</td>
<td>The supplied Token Reference must be 50 characters or less</td>
</tr>
<tr>
<td>1013</td>
<td>You must supply a Token Reference</td>
</tr>
<tr>
<td>1014</td>
<td>An error occurred when adding the card. Please contact Paymark.</td>
</tr>
<tr>
<td>2000</td>
<td>Card token not found</td>
</tr>
<tr>
<td>2001</td>
<td>Card token is currently used/linked to other services, please use the merchant console to manage this token</td>
</tr>
<tr>
<td>3000</td>
<td>Authentication error. Username and/or Password are incorrect</td>
</tr>
<tr>
<td>3001</td>
<td>Authentication error. Service restricted or unavailable</td>
</tr>
<tr>
<td>3002</td>
<td>Authorization error. Service restricted or unavailable, please contact Paymark</td>
</tr>
<tr>
<td>3003</td>
<td>Authentication error. Merchant account is inactive</td>
</tr>
<tr>
<td>3004</td>
<td>Authentication error. This method is unavailable, possible causes are that the channel or service to which it belongs is not currently subscribed.</td>
</tr>
<tr>
<td>4000</td>
<td>Paymark Account ID is invalid</td>
</tr>
<tr>
<td>4006</td>
<td>Amount must be positive</td>
</tr>
<tr>
<td>4007</td>
<td>Total Amount must be greater than the sum of Amount and the cost of the transaction</td>
</tr>
<tr>
<td>4010</td>
<td>An error occured whilst processing the credit card transaction</td>
</tr>
<tr>
<td>5000</td>
<td>Payment Account ID is invalid</td>
</tr>
<tr>
<td>5001</td>
<td>Reference field is invalid, please consult the payment web service integration manual for allowed length and format</td>
</tr>
<tr>
<td>5002</td>
<td>Particular field is invalid, please consult the payment web service integration manual for allowed length and format</td>
</tr>
<tr>
<td>5003</td>
<td>Payment Amount must be positive</td>
</tr>
<tr>
<td>5004</td>
<td>Email Address must be a valid email</td>
</tr>
<tr>
<td>5005</td>
<td>Original transaction not found</td>
</tr>
<tr>
<td>5006</td>
<td>Original transaction invalid</td>
</tr>
<tr>
<td>5015</td>
<td>Transaction Frequency not valid</td>
</tr>
<tr>
<td>5007</td>
<td>An error occured whilst processing your transaction, please contact Paymark</td>
</tr>
<tr>
<td>5008</td>
<td>An error occured whilst processing your refund, please contact Paymark</td>
</tr>
<tr>
<td>5009</td>
<td>Total amount captured can not exceed the original authorisation amount</td>
</tr>
<tr>
<td>5010</td>
<td>Payment type must be 0 for purchase and 1 for authorisation</td>
</tr>
<tr>
<td>5011</td>
<td>Payment type selected is not valid for the Paymark Account ID passed</td>
</tr>
<tr>
<td>5013</td>
<td>This account is not enabled to make refunds. Please contact Paymark.</td>
</tr>
<tr>
<td>5016</td>
<td>The Online Eftpos Merchant not configured</td>
</tr>
<tr>
<td>5017</td>
<td>The Online Eftpos Payer Id is not valid</td>
</tr>
<tr>
<td>5018</td>
<td>The Online Eftpos transaction is not valid</td>
</tr>
<tr>
<td>5019</td>
<td>Transaction not found</td>
</tr>
<tr>
<td>5020</td>
<td>Total amount refunded can not exceed the available amount</td>
</tr>
<tr>
<td>5021</td>
<td>The Online Eftpos Payer Id Type is not valid</td>
</tr>
<tr>
<td>5022</td>
<td>Web payments: The Online Eftpos Bank is not valid.  IVR: The field reference must be a string with a maximum length of 50.</td>
</tr>
<tr>
<td>5023</td>
<td>Web payments: The provided Conditional Indicator is not valid.  IVR: The field particular must be a string with a maximum length of 50.</td>
</tr>
<tr>
<td>5024</td>
<td>Web payments: Transaction already cancelled.  IVR: The field ReturnPhoneNumber must be a string with a maximum length of 50.</td>
</tr>
<tr>
<td>5025</td>
<td>Cancellation not permitted on this transaction</td>
</tr>
<tr>
<td>5037</td>
<td>The return_url field is required.</td>
</tr>
<tr>
<td>5042</td>
<td>The field store_card must be between 0 and 1.</td>
</tr>
<tr>
<td>5043</td>
<td>The field display_customer_email must be between 0 and 1.</td>
</tr>
<tr>
<td>5044</td>
<td>Payment method is not valid.</td>
</tr>
<tr>
<td>5045</td>
<td>Client ID is not valid.</td>
</tr>
<tr>
<td>5046</td>
<td>The token reference field must be a string with a maximum length of 50.</td>
</tr>
<tr>
<td>5047</td>
<td>The field store_card_without_input must be between 0 and 1.</td>
</tr>
<tr>
<td>5048</td>
<td>The field transaction_source must be MOTO or INTERNET.</td>
</tr>
<tr>
<td>5049</td>
<td>The field AllowStoreCardOption must be between 0 and 1.</td>
</tr>
<tr>
<td>5050</td>
<td>The field HasStoredCard must be between 0 and 1.</td>
</tr>
<tr>
<td>5100</td>
<td>Invalid or empty Web Payments URL.</td>
</tr>
<tr>
<td>5406</td>
<td>Not acceptable.</td>
</tr>
<tr>
<td>5415</td>
<td>Unsupported media type.</td>
</tr>
<tr>
<td>6000</td>
<td>Consumer email address is not a valid email</td>
</tr>
<tr>
<td>6001</td>
<td>Plan start date must be after today</td>
</tr>
<tr>
<td>6003</td>
<td>Plan frequency must be one of the accepted values, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>6002</td>
<td>Plan start date must be the last business day for the frequency selected</td>
</tr>
<tr>
<td>6004</td>
<td>Consumer Title is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6005</td>
<td>Consumer First Name(s) is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6006</td>
<td>Consumer Last Name is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6007</td>
<td>Consumer Address1 is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6008</td>
<td>Consumer Address2 is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6009</td>
<td>Consumer Address3 is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6010</td>
<td>Consumer Suburb is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6011</td>
<td>Consumer City is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6012</td>
<td>Consumer Postcode is invalid, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>6013</td>
<td>Consumer Home Telephone is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6014</td>
<td>Consumer Work Telephone is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6015</td>
<td>Consumer Mobile Telephone is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6016</td>
<td>Consumer Fax Number is invalid, please consult the payment web service integration manual for length and format rules</td>
</tr>
<tr>
<td>6017</td>
<td>Consumer Email too long, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>6018</td>
<td>Termination date provided is incorrect for the frequency selected</td>
</tr>
<tr>
<td>6019</td>
<td>Number of Payments must be a positive integer</td>
</tr>
<tr>
<td>6020</td>
<td>Amount must be a positive value</td>
</tr>
<tr>
<td>6021</td>
<td>Reference field is invalid, please consult the payment web service integration manual for allowed length and format</td>
</tr>
<tr>
<td>6022</td>
<td>Particular field is invalid, please consult the payment web service integration manual for allowed length and format</td>
</tr>
<tr>
<td>6023</td>
<td>Client Account ID provided is not valid</td>
</tr>
<tr>
<td>6024</td>
<td>Client Account ID provided is incorrect</td>
</tr>
<tr>
<td>6025</td>
<td>Recurring Card Plan is not Active</td>
</tr>
<tr>
<td>6026</td>
<td>Recurring Card Plan is not in an Active or Suspended state</td>
</tr>
<tr>
<td>6027</td>
<td>Recurring Card Plan does not exist</td>
</tr>
<tr>
<td>6028</td>
<td>Recurring Card Plan is not Suspended</td>
</tr>
<tr>
<td>6029</td>
<td>Consumer date of birth is an invalid date</td>
</tr>
<tr>
<td>6030</td>
<td>Consumer country has an invalid id, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7000</td>
<td>Reference cannot be passed null or contain more than 50 characters, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7001</td>
<td>Particular cannot be passed null or contain more than 50 characters, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7002</td>
<td>Reference cannot contain more than 50 characters, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7003</td>
<td>Particular cannot contain more than 50 characters, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7004</td>
<td>Start date cannot be greater than End date, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7005</td>
<td>Date range greater than 1 year, please restrict the date range, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7006</td>
<td>Transaction type not valid, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7007</td>
<td>Status not valid, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>7008</td>
<td>Page size not valid, please consult the payment web service integration manual</td>
</tr>
<tr>
<td>8000</td>
<td>Some of the data provided is invalid, please consult the payment web service integration manual for allowed format</td>
</tr>
</tbody>
</table>
</section><section id="transaction-response-codes-and-messages" class="resource-group"><h2 class="group-heading">Transaction Response Codes and Messages <a href="#transaction-response-codes-and-messages" class="permalink">&para;</a></h2><h2 id="header-overview-14">Overview <a class="permalink" href="#header-overview-14" aria-hidden="true">¶</a></h2>
<p>This section details the transaction responses and messages, including bank error codes, that may be seen in the Paymark Click APIs.</p>
<h2 id="header-transaction-responses-and-error-messages">Transaction Responses and Error Messages <a class="permalink" href="#header-transaction-responses-and-error-messages" aria-hidden="true">¶</a></h2>
<p>Once a transaction is successfully submitted for processing, that is, no <a href="#rest-exceptions">REST Exceptions</a> have occurred, the transaction response returned will indicate the status of the transaction along with an error code and error message (if not successful).</p>
<table>
<thead>
<tr>
<th><strong>Status</strong></th>
<th><strong>Response Code</strong></th>
<th><strong>API Error Message</strong></th>
<th><strong>Acquirer Response code(s)</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Successful</td>
<td>200</td>
<td>Transaction Successful</td>
<td>00</td>
</tr>
<tr>
<td>Declined</td>
<td>200</td>
<td>Insufficient Funds</td>
<td>51, 61</td>
</tr>
<tr>
<td>Declined</td>
<td>201</td>
<td>Transaction Declined - Expired Card</td>
<td>54</td>
</tr>
<tr>
<td>Declined</td>
<td>202</td>
<td>Bank Declined Transaction</td>
<td>01, 04, 05, 08, 21, 31, 39, 43, 52, 53, 55, 60, 65, 75, 94, 98</td>
</tr>
<tr>
<td>Declined</td>
<td>203</td>
<td>Transaction Declined - Bank Error</td>
<td>02, 03, 06, 10, 14, 18, 20, 23, 25, 29, 33, 34, 40, 41, 44, 59, 62, 64, 70, 76, 79, 82, 83, 84, 86, 87, 89, 90, 92, 93, 95, 97</td>
</tr>
<tr>
<td>Declined</td>
<td>204</td>
<td>Transaction Type Not Supported</td>
<td>08, 57, 58</td>
</tr>
<tr>
<td>Declined</td>
<td>205</td>
<td>Card Security Code verification failed</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>206</td>
<td>Address Verification Failed</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>207</td>
<td>Address Verification and Card Security Code Failed</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>250</td>
<td>Declined - Unauthorised</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>251</td>
<td>Declined - Account does not exist</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>252</td>
<td>Declined - Payment stopped</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>253</td>
<td>Declined - Authority cancelled</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>254</td>
<td>Declined - Account closed</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>255</td>
<td>Declined - Account transferred</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>256</td>
<td>Declined - Payment limit exceeded</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>257</td>
<td>Declined - Invalid Account</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>270</td>
<td>Declined - 3DSecure authentication failed</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>271</td>
<td>Declined - Card not enrolled in 3DSecure</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>272</td>
<td>Declined - Card enrolled but holder not registered with 3DSecure</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>273</td>
<td>Declined - Transaction Declined</td>
<td></td>
</tr>
<tr>
<td>Declined</td>
<td>299</td>
<td>Declined - Unknown dishonour</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>300</td>
<td>Failed - Error communicating with provider</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>301</td>
<td>Error communicating with the bank (check card details)</td>
<td>91, 96</td>
</tr>
<tr>
<td>Failed</td>
<td>302</td>
<td>No Reply from Bank</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>303</td>
<td>Payment Server detected an error</td>
<td>30</td>
</tr>
<tr>
<td>Failed</td>
<td>304</td>
<td>Shopping Transaction Locked (Please try the transaction again later)</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>305</td>
<td>Transaction was not processed - Reached limit of retry attempts allowed</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>306</td>
<td>Duplicate SessionID</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>307</td>
<td>Card Issuer Institution Returned a Referral Response</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>353</td>
<td>Unable to process 3DSecure transaction</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>360</td>
<td>Online EFTPOS Unsubmitted</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>361</td>
<td>Online EFTPOS Transaction Expired</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>398 – 400</td>
<td>Trusted payments not allowed for this merchant. <br>This means either the Merchant is not enabled for Online EFTPOS Autopay, or the Consumer has revoked the Online EFTPOS Autopay arrangement.</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>398 – 409</td>
<td>Invalid request.  Trust already exists.  <br>This means the Merchant tried to set up Online EFTPOS Autopay arrangement for a bank / payerId / payerIdType combination that already exists for this Merchant.</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>398</td>
<td>Internal Error</td>
<td></td>
</tr>
<tr>
<td>Failed</td>
<td>399</td>
<td>Transaction Failed</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>400</td>
<td>Transaction Rule Violation: Minimum Transaction Amount</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>401</td>
<td>Transaction Rule Violation: Maximum Transaction Amount</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>402</td>
<td>Transaction Rule Violation: Daily Transaction Amount</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>403</td>
<td>Transaction Rule Violation: Daily Transaction Volume</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>404</td>
<td>Transaction Rule Violation: Monthly Transaction Amount</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>405</td>
<td>Transaction Rule Violation: Monthly Transaction Volume</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>406</td>
<td>Transaction Rule Violation: Card Amount Limit Reached</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>407</td>
<td>Transaction Rule Violation: Card Successful Volume Limit Reached</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>408</td>
<td>Transaction Rule Violation: Card Unsuccessful Volume Limit Reached</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>409</td>
<td>Transaction Rule Violation: Overseas issued card. Issue Country: {0}</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>410</td>
<td>Transaction Rule Violation: Card is on Blocked List</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>411</td>
<td>Transaction Rule Violation: Detected a duplicate Transaction Reference</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>470</td>
<td>Transaction Rule Violation: Refund Daily Transaction Amount</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>471</td>
<td>Transaction Rule Violation: Total amount refunded can not exceed the original transaction amount</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>498</td>
<td>Transaction Rule Violation: No Rules Set</td>
<td></td>
</tr>
<tr>
<td>Blocked</td>
<td>499</td>
<td>Transaction Rule Violation: Transaction blocked</td>
<td></td>
</tr>
<tr>
<td>Cancelled</td>
<td>800</td>
<td>Transaction Cancelled</td>
<td></td>
</tr>
<tr>
<td>Cancelled</td>
<td>801</td>
<td>Transaction Aborted</td>
<td></td>
</tr>
<tr>
<td>Unknown</td>
<td>900</td>
<td>Transaction Result Unknown. Unable to ascertain the transaction result. Please contact Paymark.</td>
<td></td>
</tr>
<tr>
<td>Unknown</td>
<td>901</td>
<td>Transaction may not have completed</td>
<td></td>
</tr>
<tr>
<td>Unknown</td>
<td>902</td>
<td>Unable to obtain transaction result,  service temporarily unavailable.</td>
<td></td>
</tr>
<tr>
<td>Unknown</td>
<td>903</td>
<td>3DSecure authentication may not have completed</td>
<td></td>
</tr>
<tr>
<td>Unknown</td>
<td>999</td>
<td>Blank</td>
<td></td>
</tr>
</tbody>
</table>
</section><section id="test-card-details" class="resource-group"><h2 class="group-heading">Test Card Details <a href="#test-card-details" class="permalink">&para;</a></h2><h2 id="header-overview-15">Overview <a class="permalink" href="#header-overview-15" aria-hidden="true">¶</a></h2>
<p>This section details the test cards that may be used in the Paymark Click non-production environment.</p>
<p><strong>Important:</strong> Please ensure you do not use real (production) card data within the non-production environment.</p>
<h2 id="header-card-numbers">Card Numbers <a class="permalink" href="#header-card-numbers" aria-hidden="true">¶</a></h2>
<p>To process test transactions within the non-production environment you must use one of the cards listed below.</p>
<table>
<thead>
<tr>
<th>Card Type</th>
<th>Card Number</th>
<th>Card Expiry (MM/YY)</th>
<th>CSC</th>
<th>Response Code</th>
<th>Transaction Status</th>
</tr>
</thead>
<tbody>
<tr>
<td>MasterCard</td>
<td>5123456789012346</td>
<td>12/20</td>
<td>111</td>
<td>00</td>
<td>Successful</td>
</tr>
<tr>
<td>MasterCard</td>
<td>5290075430806729</td>
<td>12/20</td>
<td>111</td>
<td>01</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>MasterCard</td>
<td>5538737873773631</td>
<td>12/20</td>
<td>111</td>
<td>05</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>MasterCard</td>
<td>5265340072069809</td>
<td>12/20</td>
<td>111</td>
<td>12</td>
<td>Transaction Type Not Supported</td>
</tr>
<tr>
<td>MasterCard</td>
<td>5307995509923512</td>
<td>12/20</td>
<td>111</td>
<td>31</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>MasterCard</td>
<td>5114996316783803</td>
<td>12/20</td>
<td>111</td>
<td>51</td>
<td>Insufficient Funds</td>
</tr>
<tr>
<td>MasterCard</td>
<td>5178468787602840</td>
<td>12/20</td>
<td>111</td>
<td>54</td>
<td>Expired Card</td>
</tr>
<tr>
<td>MasterCard</td>
<td>5510545567805243</td>
<td>12/20</td>
<td>111</td>
<td>91</td>
<td>Error Communicating with Bank (Check Card Details)</td>
</tr>
<tr>
<td>MasterCard</td>
<td>2221006789012347</td>
<td>12/20</td>
<td>111</td>
<td>00</td>
<td>Successful</td>
</tr>
<tr>
<td>MasterCard</td>
<td>2221005430806727</td>
<td>12/20</td>
<td>111</td>
<td>01</td>
<td>Declined</td>
</tr>
<tr>
<td>MasterCard</td>
<td>2221007873773638</td>
<td>12/20</td>
<td>111</td>
<td>05</td>
<td>Declined</td>
</tr>
<tr>
<td>MasterCard</td>
<td>2221000072069809</td>
<td>12/20</td>
<td>111</td>
<td>12</td>
<td>Declined</td>
</tr>
<tr>
<td>MasterCard</td>
<td>2221005509923510</td>
<td>12/20</td>
<td>111</td>
<td>31</td>
<td>Declined</td>
</tr>
<tr>
<td>MasterCard</td>
<td>2221006316783808</td>
<td>12/20</td>
<td>111</td>
<td>51</td>
<td>Declined</td>
</tr>
<tr>
<td>MasterCard</td>
<td>2221008787602848</td>
<td>12/20</td>
<td>111</td>
<td>54</td>
<td>Declined</td>
</tr>
<tr>
<td>MasterCard</td>
<td>2221005567805245</td>
<td>12/20</td>
<td>111</td>
<td>91</td>
<td>Declined</td>
</tr>
<tr>
<td>MasterCard</td>
<td>5391715789309969</td>
<td>12/20</td>
<td>111</td>
<td>10</td>
<td>Partial authorisation (half the requested amount is approved for an authorisation transaction)</td>
</tr>
<tr>
<td>MasterCard 3D Secure</td>
<td>5422882800700007</td>
<td>12/20</td>
<td>111</td>
<td>00</td>
<td>Successful</td>
</tr>
<tr>
<td>MasterCard 3D Secure</td>
<td>2239468872817471</td>
<td>12/20</td>
<td>111</td>
<td>00</td>
<td>Successful</td>
</tr>
<tr>
<td>MasterCard 3D Secure</td>
<td>2239464831923120</td>
<td>01/20</td>
<td>123</td>
<td>10</td>
<td>Partial authorisation (half the requested amount is approved for an authorisation transaction)</td>
</tr>
<tr>
<td>MasterCard 3D Secure</td>
<td>5257221203980330</td>
<td>01/20</td>
<td>123</td>
<td>00</td>
<td>Successful (blank AAV)</td>
</tr>
<tr>
<td>MasterCard 3D Secure</td>
<td>5573216845946050</td>
<td>01/20</td>
<td>123</td>
<td>00</td>
<td>Successful (blank AAV)</td>
</tr>
<tr>
<td>MasterCard 3D Secure</td>
<td>5583731329831220</td>
<td>01/20</td>
<td>123</td>
<td>00</td>
<td>Attempted Authentication (blank AAV)</td>
</tr>
<tr>
<td>VISA</td>
<td>4987654321098769</td>
<td>12/20</td>
<td>111</td>
<td>00</td>
<td>Successful</td>
</tr>
<tr>
<td>VISA</td>
<td>4929474753922860</td>
<td>12/20</td>
<td>111</td>
<td>01</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>VISA</td>
<td>4539032811676621</td>
<td>12/20</td>
<td>111</td>
<td>05</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>VISA</td>
<td>4886709226179775</td>
<td>12/20</td>
<td>111</td>
<td>12</td>
<td>Transaction Type Not Supported</td>
</tr>
<tr>
<td>VISA</td>
<td>4556989846299273</td>
<td>12/20</td>
<td>111</td>
<td>31</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>VISA</td>
<td>4556989785924709</td>
<td>12/20</td>
<td>111</td>
<td>51</td>
<td>Insufficient Funds</td>
</tr>
<tr>
<td>VISA</td>
<td>4916146026583852</td>
<td>12/20</td>
<td>111</td>
<td>54</td>
<td>Expired Card</td>
</tr>
<tr>
<td>VISA</td>
<td>4929233907988775</td>
<td>12/20</td>
<td>111</td>
<td>91</td>
<td>Error Communicating with Bank (Check Card Details)</td>
</tr>
<tr>
<td>VISA</td>
<td>4556286124462032</td>
<td>12/20</td>
<td>111</td>
<td>10</td>
<td>Partial authorisation (half the requested amount is approved for an authorisation transaction)</td>
</tr>
<tr>
<td>VISA 3D Secure</td>
<td>4918914107195005</td>
<td>12/20</td>
<td>111</td>
<td>00</td>
<td>Successful</td>
</tr>
<tr>
<td>VISA 3D Secure</td>
<td>4988721001931418</td>
<td>12/20</td>
<td>111</td>
<td>00</td>
<td>Card Not Enrolled</td>
</tr>
<tr>
<td>American Express</td>
<td>345678901234564</td>
<td>12/20</td>
<td>1111</td>
<td>00</td>
<td>Successful</td>
</tr>
<tr>
<td>American Express</td>
<td>372230337931151</td>
<td>12/20</td>
<td>1111</td>
<td>01</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>American Express</td>
<td>374991708241573</td>
<td>12/20</td>
<td>1111</td>
<td>05</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>American Express</td>
<td>371142424142835</td>
<td>12/20</td>
<td>1111</td>
<td>12</td>
<td>Transaction Type Not Supported</td>
</tr>
<tr>
<td>American Express</td>
<td>379864718969977</td>
<td>12/20</td>
<td>1111</td>
<td>31</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>American Express</td>
<td>377799096385150</td>
<td>12/20</td>
<td>1111</td>
<td>51</td>
<td>Insufficient Funds</td>
</tr>
<tr>
<td>American Express</td>
<td>379269138331578</td>
<td>12/20</td>
<td>1111</td>
<td>54</td>
<td>Expired Card</td>
</tr>
<tr>
<td>American Express</td>
<td>375811155501015</td>
<td>12/20</td>
<td>1111</td>
<td>91</td>
<td>Error Communicating with Bank (Check Card Details)</td>
</tr>
<tr>
<td>Diners Club</td>
<td>36129543212349</td>
<td>12/20</td>
<td>NA</td>
<td>00</td>
<td>Successful</td>
</tr>
<tr>
<td>Diners Club</td>
<td>36913546454523</td>
<td>12/20</td>
<td>NA</td>
<td>01</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>Diners Club</td>
<td>36708739256119</td>
<td>12/20</td>
<td>NA</td>
<td>05</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>Diners Club</td>
<td>36627732834435</td>
<td>12/20</td>
<td>NA</td>
<td>12</td>
<td>Transaction Type Not Supported</td>
</tr>
<tr>
<td>Diners Club</td>
<td>36802790534777</td>
<td>12/20</td>
<td>NA</td>
<td>31</td>
<td>Bank Declined Transactions</td>
</tr>
<tr>
<td>Diners Club</td>
<td>36637566233778</td>
<td>12/20</td>
<td>NA</td>
<td>51</td>
<td>Insufficient Funds</td>
</tr>
<tr>
<td>Diners Club</td>
<td>36172562385513</td>
<td>12/20</td>
<td>NA</td>
<td>54</td>
<td>Expired Card</td>
</tr>
<tr>
<td>Diners Club</td>
<td>36888226794390</td>
<td>12/20</td>
<td>NA</td>
<td>91</td>
<td>Error Communicating with Bank (Check Card Details)</td>
</tr>
</tbody>
</table>
</section><section id="online-eftpos-sandbox" class="resource-group"><h2 class="group-heading">Online EFTPOS Sandbox <a href="#online-eftpos-sandbox" class="permalink">&para;</a></h2><h2 id="header-overview-16">Overview <a class="permalink" href="#header-overview-16" aria-hidden="true">¶</a></h2>
<p>The Online EFTPOS Sandbox is part of the Paymark Click non-production environment.</p>
<p>The sandbox can be used to simulate Online EFTPOS payment and refund operations for each Consumer Bank (ASB, The Co-operative Bank, Heartland and Westpac).  The transaction amount used in the payment or refund request will determine the response that is received.</p>
<h2 id="header-asb-transactions">ASB Transactions <a class="permalink" href="#header-asb-transactions" aria-hidden="true">¶</a></h2>
<p>The following responses can be simulated for ASB transactions (bankId = ASB).</p>
<h3 id="header-payment-request">Payment Request <a class="permalink" href="#header-payment-request" aria-hidden="true">¶</a></h3>
<p>Status updates for “consumer responses” are received approximately 10 seconds after the payment request has been sent; the status in the response to the initial request is SUBMITTED.</p>
<p>The terminal status will be received in the response to the initial request for all “system responses”.</p>
<p><strong>Authorised Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Any amount under $1 (100c) or over $1.20 (120c)</td>
<td>Consumer has authorised the payment.</td>
<td>Consumer response</td>
</tr>
</tbody>
</table>
<p><strong>Declined Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>117c</td>
<td>Payment has been declined by the Consumer.</td>
<td>Consumer response</td>
</tr>
<tr>
<td>101c</td>
<td>Consumer does not have Bank mobile app registered for this payerId (mobile number for ASB).</td>
<td>System response</td>
</tr>
<tr>
<td>102c</td>
<td>Consumer does not have Bank mobile app registered (app not set up for use).</td>
<td>System response</td>
</tr>
<tr>
<td>103c</td>
<td>Consumer has Online EFTPOS disabled (PayHere turned off for ASB).</td>
<td>System response</td>
</tr>
<tr>
<td>104c</td>
<td>Consumer has no default bank account.</td>
<td>System response</td>
</tr>
<tr>
<td>105c</td>
<td>Consumer is over their account limit.</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p><strong>Expired Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>118c</td>
<td>Consumer did not action the payment request within four minutes (expiry timeout has been passed).</td>
<td>(Lack of) Consumer response</td>
</tr>
</tbody>
</table>
<p><strong>Error Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>111c</td>
<td>Duplicate payment request.</td>
<td>System response</td>
</tr>
<tr>
<td>112c</td>
<td>Paymark system issue (refer to Paymark).</td>
<td>System response</td>
</tr>
<tr>
<td>113c</td>
<td>Paymark system issue (Online EFTPOS disabled for this Bank).</td>
<td>System response</td>
</tr>
<tr>
<td>115c</td>
<td>Payment request formatted incorrectly.</td>
<td>System response</td>
</tr>
<tr>
<td>116c</td>
<td>Paymark system issue (authentication).</td>
<td>System response</td>
</tr>
</tbody>
</table>
<h3 id="header-refund-request">Refund Request <a class="permalink" href="#header-refund-request" aria-hidden="true">¶</a></h3>
<p><strong>Authorised Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Any amount under $1 (100c) or over $1.20 (120c)</td>
<td>Refund has been successfully processed.</td>
<td>Bank response</td>
</tr>
</tbody>
</table>
<p><strong>Declined Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>101c</td>
<td>Consumer does not have Bank mobile app registered for this payerId (mobile number for ASB).</td>
<td>System response</td>
</tr>
<tr>
<td>102c</td>
<td>Consumer not registered for Online EFTPOS (formerly known to ASB customers as Pay Here).</td>
<td>System response</td>
</tr>
<tr>
<td>103c</td>
<td>Consumer is not active at this Bank.</td>
<td>System response</td>
</tr>
<tr>
<td>104c</td>
<td>Consumer has no default bank account.</td>
<td>System response</td>
</tr>
<tr>
<td>105c</td>
<td>Consumer is over their account limit.</td>
<td>System response</td>
</tr>
<tr>
<td>110c</td>
<td>Refund exceeds available funds (this refund would put the Merchant in a negative settlement position, which is not allowed for Online EFTPOS).</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p><strong>Error Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>108c</td>
<td>Bank system issue.</td>
<td>System response</td>
</tr>
<tr>
<td>111c</td>
<td>Duplicate refund request.</td>
<td>System response</td>
</tr>
<tr>
<td>112c</td>
<td>Paymark system issue (refer to Paymark).</td>
<td>System response</td>
</tr>
<tr>
<td>113c</td>
<td>Paymark system issue (Online EFTPOS disabled for this Bank).</td>
<td>System response</td>
</tr>
<tr>
<td>115c</td>
<td>Payment request formatted incorrectly.</td>
<td>System response</td>
</tr>
<tr>
<td>116c</td>
<td>Paymark system issue (authentication).</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p>Note: The expire scenario does not apply to refunds as these require no Consumer action.</p>
<h2 id="header-the-co-operative-bank-(co-op)-transactions">The Co-operative Bank (Co-op) Transactions <a class="permalink" href="#header-the-co-operative-bank-(co-op)-transactions" aria-hidden="true">¶</a></h2>
<p>The following responses can be simulated for Co-op transactions (bankId = COOPERATIVE).</p>
<h3 id="header-payment-request-1">Payment Request <a class="permalink" href="#header-payment-request-1" aria-hidden="true">¶</a></h3>
<p>Status updates for “consumer responses” are received approximately 10 seconds after the payment request has been sent; the status in the response to the initial request is SUBMITTED.</p>
<p>The terminal status will be received in the response to the initial request for all “system responses”.</p>
<p><strong>Authorised Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Any amount over $1.20 (120c)</td>
<td>Consumer has authorised the payment.</td>
<td>Consumer response</td>
</tr>
</tbody>
</table>
<p><strong>Declined Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>117c</td>
<td>Payment has been declined by the Consumer.</td>
<td>Consumer response</td>
</tr>
<tr>
<td>102c</td>
<td>Bank has declined the transaction for some reason, for example, the Consumer’s account is closed.</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p><strong>Expired Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>118c</td>
<td>Consumer did not action the payment request within four minutes (expiry timeout has been passed).</td>
<td>(Lack of) Consumer response</td>
</tr>
</tbody>
</table>
<p><strong>Error Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>104c</td>
<td>An error occurred when the payment request was sent to the Bank.</td>
<td>System response</td>
</tr>
</tbody>
</table>
<h3 id="header-refund-request-1">Refund Request <a class="permalink" href="#header-refund-request-1" aria-hidden="true">¶</a></h3>
<p><strong>Authorised Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Any amount over $1.20 (120c)</td>
<td>Refund has been successfully processed.</td>
<td>Bank response</td>
</tr>
</tbody>
</table>
<p><strong>Declined Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>102c</td>
<td>Bank has declined the transaction for some reason.</td>
<td>System response</td>
</tr>
<tr>
<td>110c</td>
<td>Refund exceeds available funds (this refund would put the Merchant in a negative settlement position, which is not allowed for Online EFTPOS).</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p><strong>Error Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>104c</td>
<td>An error occurred when the refund request was sent to the Bank.</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p>Note: The expire scenario does not apply to refunds as these require no Consumer action.</p>
<h2 id="header-heartland-bank-transactions">Heartland Bank Transactions <a class="permalink" href="#header-heartland-bank-transactions" aria-hidden="true">¶</a></h2>
<p>The following responses can be simulated for Heartland Bank transactions (bankId = HEARTLAND).</p>
<h3 id="header-payment-request-2">Payment Request <a class="permalink" href="#header-payment-request-2" aria-hidden="true">¶</a></h3>
<p>Status updates for “consumer responses” are received approximately 10 seconds after the payment request has been sent; the status in the response to the initial request is SUBMITTED.</p>
<p>The terminal status will be received in the response to the initial request for all “system responses”.</p>
<p><strong>Authorised Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>130c ($1.30)</td>
<td>Consumer has authorised the payment.</td>
<td>Consumer response</td>
</tr>
</tbody>
</table>
<p><strong>Declined Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>131c</td>
<td>Payment has been declined by the Consumer.</td>
<td>Consumer response</td>
</tr>
<tr>
<td>101c, 102c, 103c</td>
<td>Consumer has not opted in for Online EFTPOS payments.  The Consumer should contact Heartland Bank to enable Online EFTPOS.</td>
<td>System response</td>
</tr>
<tr>
<td>104c</td>
<td>No account maintained for Online EFTPOS.  The Consumer should contact Heartland Bank for assistance.</td>
<td>System response</td>
</tr>
<tr>
<td>105c</td>
<td>Total transaction amount exceeds daily limit. The Consumer should contact Heartland Bank for assistance.</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p><strong>Expired Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>132c</td>
<td>Consumer did not action the payment request within four minutes (expiry timeout has been passed).</td>
<td>(Lack of) Consumer response</td>
</tr>
</tbody>
</table>
<p><strong>Error Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>108c</td>
<td>System error.  Contact Heartland Bank for assistance.</td>
<td>System response</td>
</tr>
<tr>
<td>115c</td>
<td>Paymark system issue (refer to Paymark).</td>
<td>System response</td>
</tr>
<tr>
<td>116c</td>
<td>Paymark system issue (refer to Paymark).</td>
<td>System response</td>
</tr>
</tbody>
</table>
<h3 id="header-refund-request-2">Refund Request <a class="permalink" href="#header-refund-request-2" aria-hidden="true">¶</a></h3>
<p><strong>Authorised Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Less than or equal to the approved payment amount.</td>
<td>Refund has been successfully processed.</td>
<td>Bank response</td>
</tr>
</tbody>
</table>
<p><strong>Declined Scenarios</strong></p>
<p>Declined scenarios are not available in the Online EFTPOS Sandbox for Heartland Bank transactions.</p>
<p><strong>Expired Scenarios</strong></p>
<p>The expired scenario does not apply to refunds as these require no Consumer action.</p>
<p><strong>Error Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>106c</td>
<td>No source reference number in the system.  Invalid refund request.  Contact Heartland Bank for assistance.</td>
<td>System response</td>
</tr>
<tr>
<td>110c</td>
<td>Total of refund amounts exceeds the original payment amount.</td>
<td>System response</td>
</tr>
</tbody>
</table>
<h2 id="header-westpac-transactions">Westpac Transactions <a class="permalink" href="#header-westpac-transactions" aria-hidden="true">¶</a></h2>
<p>The following responses can be simulated for Westpac transactions (bankId = WESTPAC).</p>
<h3 id="header-payment-request-3">Payment Request <a class="permalink" href="#header-payment-request-3" aria-hidden="true">¶</a></h3>
<p>Status updates for “consumer responses” are received approximately 10 seconds after the payment request has been sent; the status in the response to the initial request is SUBMITTED.</p>
<p>The terminal status will be received in the response to the initial request for all “system responses”.</p>
<p><strong>Authorised Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Any amount over $1.20 (120c)</td>
<td>Consumer has authorised the payment.</td>
<td>Consumer response</td>
</tr>
</tbody>
</table>
<p><strong>Declined Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>105c</td>
<td>Consumer is over their account limit.</td>
<td>System response</td>
</tr>
<tr>
<td>106c</td>
<td>Payer ID is not registered to a Westpac customer.</td>
<td>System response</td>
</tr>
<tr>
<td>117c</td>
<td>Payment has been declined by the Consumer.</td>
<td>Consumer response</td>
</tr>
<tr>
<td>118c</td>
<td>Consumer is not registered with Westpac.</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p><strong>Error Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>101c</td>
<td>Invalid mobile number.</td>
<td>System response</td>
</tr>
<tr>
<td>108c</td>
<td>General system error (attempt the payment again).</td>
<td>System response</td>
</tr>
<tr>
<td>111c</td>
<td>Duplicate request (Consumer needs to action the original payment request).</td>
<td>System response</td>
</tr>
<tr>
<td>112c</td>
<td>Invalid PSP ID (contact Paymark for assistance).</td>
<td>System response</td>
</tr>
<tr>
<td>113c</td>
<td>PSP disabled (contact Paymark for assistance).</td>
<td>System response</td>
</tr>
<tr>
<td>115c</td>
<td>Data error (contact Paymark for assistance).</td>
<td>System response</td>
</tr>
<tr>
<td>116c</td>
<td>Invalid signature (contact Paymark for assistance).</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p>Note: The expire scenario is not yet supported for Westpac Sandbox payments.</p>
<h3 id="header-refund-request-3">Refund Request <a class="permalink" href="#header-refund-request-3" aria-hidden="true">¶</a></h3>
<p><strong>Authorised Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Any amount over $1.20 (120c)</td>
<td>Refund has been successfully processed.</td>
<td>Bank response</td>
</tr>
</tbody>
</table>
<p><strong>Error Scenarios</strong></p>
<table>
<thead>
<tr>
<th>Transaction Amount</th>
<th>Response Description</th>
<th>Response Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>106c</td>
<td>Payment not found.</td>
<td>System response</td>
</tr>
<tr>
<td>107c</td>
<td>Original payment was not completed.</td>
<td>System response</td>
</tr>
<tr>
<td>108c</td>
<td>General system error (attempt the refund again).</td>
<td>System response</td>
</tr>
<tr>
<td>110c</td>
<td>Refund exceeds available funds (this refund would put the Merchant in a negative settlement position, which is not allowed for Online EFTPOS).</td>
<td>System response</td>
</tr>
<tr>
<td>111c</td>
<td>Duplicate request (Merchant needs to wait for the original refund to be processed).</td>
<td>System response</td>
</tr>
<tr>
<td>112c</td>
<td>PSP not registered (contact Paymark for assistance).</td>
<td>System response</td>
</tr>
<tr>
<td>113c</td>
<td>Paymark system issue (Online EFTPOS disabled for this Bank).</td>
<td>System response</td>
</tr>
<tr>
<td>115c</td>
<td>Data error (contact Paymark for assistance).</td>
<td>System response</td>
</tr>
<tr>
<td>116c</td>
<td>Invalid signature (contact Paymark for assistance).</td>
<td>System response</td>
</tr>
</tbody>
</table>
<p>Notes:</p>
<ul>
<li>
<p>The declined scenario does not apply to Westpac Sandbox refunds.</p>
</li>
<li>
<p>The expire scenario does not apply to refunds as these require no Consumer action.</p>
</li>
</ul>
</section><section id="online-eftpos-autopay" class="resource-group"><h2 class="group-heading">Online EFTPOS Autopay <a href="#online-eftpos-autopay" class="permalink">&para;</a></h2><h2 id="header-overview-17">Overview <a class="permalink" href="#header-overview-17" aria-hidden="true">¶</a></h2>
<p>Online EFTPOS Autopay enables a Merchant to create a payment token for Online EFTPOS payments, then use this token to subsequently charge the Customer when they elect to pay using Online EFTPOS.</p>
<p>Online EFTPOS Autopay is available to eligible Merchants.  Please contact Paymark on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> if you wish to discuss Online EFTPOS Autopay.</p>
<p>Before you set up Autopay there are a number of prerequisties you need to consider.  You can see the details <a href="https://www.paymark.co.nz/online-eftpos-autopay">here</a>.</p>
<h2 id="header-transaction-flow-1">Transaction Flow <a class="permalink" href="#header-transaction-flow-1" aria-hidden="true">¶</a></h2>
<p>The diagram below provides an overview of the Online EFTPOS Autopay transaction flows.  When we discuss enabling Online EFTPOS Autopay with you, we will take you through this flow to ensure your Customers’ experience is optimised.</p>
<img src="./click-images/oe_autopay_flow.png" width="624">
<h2 id="header-account-holder-statement">Account Holder Statement <a class="permalink" href="#header-account-holder-statement" aria-hidden="true">¶</a></h2>
<p>For Online EFTPOS payments, the Merchant can control some information that appears on the Account Holder’s bank statement, specifically the Merchant short name, and the reference used for the payment.</p>
<p>The “Merchant short name” is a 12 character version of the Merchant’s name.  This is set up when you add Online EFTPOS as a payment method.  Contact Paymark on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> to confirm what your Merchant short name is.</p>
<p>The Account Holder also sees the reference that was included with the transaction request.  If this reference is more than 12 characters, this will be truncated on the Account Holder’s statement.</p>
</section><section id="click-feature-releases" class="resource-group"><h2 class="group-heading">Click Feature Releases <a href="#click-feature-releases" class="permalink">&para;</a></h2><h2 id="header-overview-18">Overview <a class="permalink" href="#header-overview-18" aria-hidden="true">¶</a></h2>
<p>This section details the most recent releases for the Click APIs and <a href="https://client.paymarkclick.co.nz/">Merchant Portal</a>.</p>
<h2 id="header-apis">APIs <a class="permalink" href="#header-apis" aria-hidden="true">¶</a></h2>
<p><strong>Westpac now available for Online EFTPOS payments on the Paymark Click hosted payment page</strong></p>
<p>For Merchants integrating with the <a href="#paymark-hosted-standard-payment">Paymark Hosted Standard Payment</a> model, Online EFTPOS is now offered for four banks: ASB, The Co-operative Bank, Heartland and Westpac.  No changes are needed to your integration for your Customers to pay using their Westpac bank account.</p>
<p>For Merchants integrating to Click with <a href="#direct-post">Direct Post</a> or <a href="#merchant-hosted-transaction-processing">Merchant Hosted Transaction Processing</a>, this API spec details how Westpac will be supported in the future.  If you are intending to offer Westpac for Online EFTPOS payments, please contact us on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> to discuss options.</p>
<p><strong>Status Check Now Available</strong></p>
<p>Status check transactions allow a Merchant to validate a card with the Card Issuer, without holding funds on the card.  This transaction type is ideal when saving a card for future charges.  Note: Not all Acquiring Banks support status check transactions.  Contact Paymark on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> to confirm if your Acquiring Bank supports status check transactions.</p>
<p><strong>Online EFTPOS Autopay Now Available</strong></p>
<p>Eligible Merchants using the Paymark Click hosted web payment page can save Online EFTPOS as a payment method for future payments.  Contact Paymark on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> if you wish to enable this feature.</p>
<p><strong>Merchant Hosted Tokenise Method Now Available</strong></p>
<p>For Merchants processing payments from their own web site (“two party payment”), a “blind store” function is now available.  This <a href="#header-store-card-details-without-issuer-validation">method</a> allows Merchants to store the card for future payments, without validating card details with the card issuer.</p>
<p><strong>IVR Specification Now Available</strong></p>
<p>The Paymark Click IVR specification is now available <a href="#ivr-payments">here</a>.</p>
<p>Paymark Click can take payments and store cards for later use via an Interactive Voice Response (IVR) that is integrated to your own IVR or telephony platform.  The Click IVR is offered as a bespoke implementation.  Should you with to integrate with the Click IVR, please contact Paymark on <a href="mailto:click@paymark.co.nz">click@paymark.co.nz</a> to discuss options.</p>
<p><strong>Short Life Payment Page</strong></p>
<p>The Click API now allows you to control how long the payment page is valid for.  This is useful when you have other processes, such as shopping carts, that expire in less than one day (the default validity for a Click payment page).</p>
<p>You can contact Paymark to set this up for you.</p>
<p><strong>Authorisation Cancellation Now Available</strong></p>
<p>The Click API now supports cancellation transactions.  This method allows Merchants to cancel a previously made, successful, authorisation transaction that is no longer required, for example, because the order cannot be fulfilled.</p>
<p>Note: Cancellations will only be actioned for Merchants using an Acquiring Bank that supports cancellation transactions.</p>
<p><strong>Self Generated API Passwords</strong></p>
<p>You can now generate your own API passwords that are part of your API credentials.  Follow the instructions you received in your activation email.  Or go into the <a href="https://secure.paymarkclick.co.nz/Client/Default/MemberLogin.aspx">Merchant Portal</a>, navigate to the “Web Payments” section via the left-hand menu, then select “Integration Settings”.</p>
<h2 id="header-merchant-portal">Merchant Portal <a class="permalink" href="#header-merchant-portal" aria-hidden="true">¶</a></h2>
<p>The Click Merchant Portal has changed locations: the new location is <a href="https://client.paymarkclick.co.nz/">https://client.paymarkclick.co.nz/</a>.</p>
<p>The Click Merchant Portal user guide can be found by clicking “Page Help” in the top right hand corner of any Merchant Portal page.</p>
<p>The latest Merchant Portal feature releases are described below.</p>
<br>
<br>
<br>
<br>
<p><strong>See Which Merchant Portal User Did a Transaction</strong></p>
<p>You can view which logged in user did a transaction in the Merchant Portal, enabling any follow up with the appropriate person.</p>
<p>For Virtual Terminal transactions, the details are shown in the payment transaction details, under “User”.  Where the “user” was “System”, this indicates an API transaction.</p>
<img src="./click-images/vt_payment_user.png" width="624">
<p>For refunds and captures done in the Merchant Portal, the details are shown in the refund / capture transaction details (remember to tick “Show Refund Transactions” or “Show Capture Transactions” when finding the transaction).</p>
<img src="./click-images/refunded_by_user.png" width="624">
<br>
<br>
<br>
<br>
<p><strong>Time Included in Exported Transactions</strong></p>
<p>When you export transactions from the Merchant Portal, the export includes the time of the transaction, enabling you to filter and query more easily.</p>
<img src="./click-images/time_in_export.png" width="624">
<br>
<br>
<br>
<br>
<p><strong>Maximum Date Range Search 31 Days</strong></p>
<p>When using a date range search, the maximum you can search is 31 days.  This is to manage system response times.  If you need to search a longer period, simply do multiple searches.</p>
<br>
<br>
<br>
<br>
<p><strong>No Default Account in Virtual Terminal</strong></p>
<p>When you make a payment through Virtual Terminal, you now need to select the Account you wish to put the payment against.  When you have more than one account this prevents you accidentally putting the payment against the wrong account.</p>
<img src="./click-images/vt_select_account.png" width="624">
<br>
<br>
<br>
<br>
<p><strong>Settlement Report for a Specific Account</strong></p>
<p>If you have multiple accounts under one Click Client ID, and these settle into different bank accounts, you can run a settlement report for each (Click) account to assist with bank account reconciliation.</p>
<img src="./click-images/settlement_report_menu.png" width="624">
<img src="./click-images/settlement_report_setup.png" width="624">
<br>
<br>
<br>
<br>
<p><strong>No Limit on Viewing Historical Transactions</strong></p>
<p>You can now view transactions for any date in the Merchant Portal (in maximum 31 days chunks).  Note: You can only refund transactions that are less than six months old.</p>
<br>
<br>
<br>
<br>
<p><strong>Automatically Assign New Accounts to Users with Specific Roles</strong></p>
<p>For Merchant Portal Users that need access to all Accounts, for example, Contact Centre or Finance Users, any new Accounts can be automatically assigned to these Users overnight.  This is based on the User’s Role in the Merchant Portal.</p>
<p>Please contact Paymark to set this up.  We will need to know the Role name that you are using for these Users.</p>
<br>
<br>
<br>
<br>
<p><strong>Additional Security on Invoice Payments Function</strong></p>
<p>The “Invoice Payments” option (under Web Payments) now has additional security settings:</p>
<ul>
<li>
<p>Reference, particulars and amount details that you set cannot be edited by the Cardholder.</p>
</li>
<li>
<p>The link you generate is valid for 24 hours (and this can be shortened if that meets your business needs).</p>
</li>
</ul>
<img src="./click-images/invoice_payment.png" width="624">
<br>
<br>
<br>
<br>
<p><strong>Need More Help?</strong></p>
<p>There is now a “Support” option in the left hand menu if you need more help using the Merchant Portal.</p>
</section><section id="revision-history" class="resource-group"><h2 class="group-heading">Revision History <a href="#revision-history" class="permalink">&para;</a></h2><table>
<thead>
<tr>
<th>Date</th>
<th>Update</th>
</tr>
</thead>
<tbody>
<tr>
<td>24 January 2017</td>
<td>Added Direct Post information.</td>
</tr>
<tr>
<td>3 February 2017</td>
<td>Added Online EFTPOS payment request information.  General maintenance.</td>
</tr>
<tr>
<td>16 March 2017</td>
<td>Added Tokenise and Authorisation options for “type” in Standard Payment.</td>
</tr>
<tr>
<td>11 January 2018</td>
<td>Added support for partial and full capture transactions.</td>
</tr>
<tr>
<td>12 April 2018</td>
<td>return_url now optional.  Updated feature releases.</td>
</tr>
<tr>
<td>20 April 2018</td>
<td>Updated feature releases.</td>
</tr>
<tr>
<td>22 May 2018</td>
<td>Added cancellation API details.  Fixed broken links.  Updated feature releases.</td>
</tr>
<tr>
<td>11 July 2018</td>
<td>Updated feature releases.</td>
</tr>
<tr>
<td>17 July 2018</td>
<td>Added Merchant Hosted Transaction Processing method for creating Merchant tokens.</td>
</tr>
<tr>
<td>27 September 2018</td>
<td>Added IVR specification.</td>
</tr>
<tr>
<td>21 December 2018</td>
<td>Added Store Card Details without Issuer Validation API method.</td>
</tr>
<tr>
<td>21 January 2019</td>
<td>Updated authentication method for IVR Transaction Status Retrieval method.</td>
</tr>
<tr>
<td>26 March 2019</td>
<td>storeCard parameter in Merchant Hosted transaction processing is optional.</td>
</tr>
<tr>
<td>4 April 2019</td>
<td>Added payment token details (supporting Online EFTPOS Autopay).</td>
</tr>
<tr>
<td>15 April 2019</td>
<td>Added status check transaction details.</td>
</tr>
<tr>
<td>3 May 2019</td>
<td>Added Westpac Online EFTPOS details.</td>
</tr>
<tr>
<td>11 June 2019</td>
<td>Overhaul of marketing token section.</td>
</tr>
<tr>
<td>6 August 2019</td>
<td>Updated Westpac Sandbox transaction outcomes.</td>
</tr>
<tr>
<td>11 December 2019</td>
<td>Corrected error status for transaction search</td>
</tr>
<tr>
<td>9 January 2020</td>
<td>URL parameter request examples updated for consistency</td>
</tr>
<tr>
<td>28 January 2020</td>
<td>Update merchant hosted marketing token fields names to match actual API output.Removed broken user guide link</td>
</tr>
</tbody>
</table>
</section></div></div></div><p style="text-align: center;" class="text-muted">Generated by&nbsp;<a href="https://github.com/danielgtaylor/aglio" class="aglio">aglio</a>&nbsp;on 09 Apr 2020</p><script>/* eslint-env browser */
/* eslint quotes: [2, "single"] */
'use strict';

/*
  Determine if a string ends with another string.
*/
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

/*
  Get a list of direct child elements by class name.
*/
function childrenByClass(element, name) {
  var filtered = [];

  for (var i = 0; i < element.children.length; i++) {
    var child = element.children[i];
    var classNames = child.className.split(' ');
    if (classNames.indexOf(name) !== -1) {
      filtered.push(child);
    }
  }

  return filtered;
}

/*
  Get an array [width, height] of the window.
*/
function getWindowDimensions() {
  var w = window,
      d = document,
      e = d.documentElement,
      g = d.body,
      x = w.innerWidth || e.clientWidth || g.clientWidth,
      y = w.innerHeight || e.clientHeight || g.clientHeight;

  return [x, y];
}

/*
  Collapse or show a request/response example.
*/
function toggleCollapseButton(event) {
    var button = event.target.parentNode;
    var content = button.parentNode.nextSibling;
    var inner = content.children[0];

    if (button.className.indexOf('collapse-button') === -1) {
      // Clicked without hitting the right element?
      return;
    }

    if (content.style.maxHeight && content.style.maxHeight !== '0px') {
        // Currently showing, so let's hide it
        button.className = 'collapse-button';
        content.style.maxHeight = '0px';
    } else {
        // Currently hidden, so let's show it
        button.className = 'collapse-button show';
        content.style.maxHeight = inner.offsetHeight + 12 + 'px';
    }
}

function toggleTabButton(event) {
    var i, index;
    var button = event.target;

    // Get index of the current button.
    var buttons = childrenByClass(button.parentNode, 'tab-button');
    for (i = 0; i < buttons.length; i++) {
        if (buttons[i] === button) {
            index = i;
            button.className = 'tab-button active';
        } else {
            buttons[i].className = 'tab-button';
        }
    }

    // Hide other tabs and show this one.
    var tabs = childrenByClass(button.parentNode.parentNode, 'tab');
    for (i = 0; i < tabs.length; i++) {
        if (i === index) {
            tabs[i].style.display = 'block';
        } else {
            tabs[i].style.display = 'none';
        }
    }
}

/*
  Collapse or show a navigation menu. It will not be hidden unless it
  is currently selected or `force` has been passed.
*/
function toggleCollapseNav(event, force) {
    var heading = event.target.parentNode;
    var content = heading.nextSibling;
    var inner = content.children[0];

    if (heading.className.indexOf('heading') === -1) {
      // Clicked without hitting the right element?
      return;
    }

    if (content.style.maxHeight && content.style.maxHeight !== '0px') {
      // Currently showing, so let's hide it, but only if this nav item
      // is already selected. This prevents newly selected items from
      // collapsing in an annoying fashion.
      if (force || window.location.hash && endsWith(event.target.href, window.location.hash)) {
        content.style.maxHeight = '0px';
      }
    } else {
      // Currently hidden, so let's show it
      content.style.maxHeight = inner.offsetHeight + 12 + 'px';
    }
}

/*
  Refresh the page after a live update from the server. This only
  works in live preview mode (using the `--server` parameter).
*/
function refresh(body) {
    document.querySelector('body').className = 'preload';
    document.body.innerHTML = body;

    // Re-initialize the page
    init();
    autoCollapse();

    document.querySelector('body').className = '';
}

/*
  Determine which navigation items should be auto-collapsed to show as many
  as possible on the screen, based on the current window height. This also
  collapses them.
*/
function autoCollapse() {
  var windowHeight = getWindowDimensions()[1];
  var itemsHeight = 64; /* Account for some padding */
  var itemsArray = Array.prototype.slice.call(
    document.querySelectorAll('nav .resource-group .heading'));

  // Get the total height of the navigation items
  itemsArray.forEach(function (item) {
    itemsHeight += item.parentNode.offsetHeight;
  });

  // Should we auto-collapse any nav items? Try to find the smallest item
  // that can be collapsed to show all items on the screen. If not possible,
  // then collapse the largest item and do it again. First, sort the items
  // by height from smallest to largest.
  var sortedItems = itemsArray.sort(function (a, b) {
    return a.parentNode.offsetHeight - b.parentNode.offsetHeight;
  });

  while (sortedItems.length && itemsHeight > windowHeight) {
    for (var i = 0; i < sortedItems.length; i++) {
      // Will collapsing this item help?
      var itemHeight = sortedItems[i].nextSibling.offsetHeight;
      if ((itemsHeight - itemHeight <= windowHeight) || i === sortedItems.length - 1) {
        // It will, so let's collapse it, remove its content height from
        // our total and then remove it from our list of candidates
        // that can be collapsed.
        itemsHeight -= itemHeight;
        toggleCollapseNav({target: sortedItems[i].children[0]}, true);
        sortedItems.splice(i, 1);
        break;
      }
    }
  }
}

/*
  Initialize the interactive functionality of the page.
*/
function init() {
    var i, j;

    // Make collapse buttons clickable
    var buttons = document.querySelectorAll('.collapse-button');
    for (i = 0; i < buttons.length; i++) {
        buttons[i].onclick = toggleCollapseButton;

        // Show by default? Then toggle now.
        if (buttons[i].className.indexOf('show') !== -1) {
            toggleCollapseButton({target: buttons[i].children[0]});
        }
    }

    var responseCodes = document.querySelectorAll('.example-names');
    for (i = 0; i < responseCodes.length; i++) {
        var tabButtons = childrenByClass(responseCodes[i], 'tab-button');
        for (j = 0; j < tabButtons.length; j++) {
            tabButtons[j].onclick = toggleTabButton;

            // Show by default?
            if (j === 0) {
                toggleTabButton({target: tabButtons[j]});
            }
        }
    }

    // Make nav items clickable to collapse/expand their content.
    var navItems = document.querySelectorAll('nav .resource-group .heading');
    for (i = 0; i < navItems.length; i++) {
        navItems[i].onclick = toggleCollapseNav;

        // Show all by default
        toggleCollapseNav({target: navItems[i].children[0]});
    }
}

// Initial call to set up buttons
init();

window.onload = function () {
    autoCollapse();
    // Remove the `preload` class to enable animations
    document.querySelector('body').className = '';
};
</script></body></html>